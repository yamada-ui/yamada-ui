{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon"],
    "externals": [],
    "hooks": [],
    "providers": ["i18n-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./stat.style\"\nexport * as Stat from \"./namespace\"\nexport {\n  StatHelperMessage,\n  StatIcon,\n  StatLabel,\n  StatPropsContext,\n  StatRoot,\n  StatUnit,\n  StatValue,\n  useStatPropsContext,\n} from \"./stat\"\nexport type {\n  StatHelperMessageProps,\n  StatIconProps,\n  StatLabelProps,\n  StatRootProps,\n  StatUnitProps,\n  StatValueProps,\n} from \"./stat\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  StatHelperMessage as HelperMessage,\n  StatIcon as Icon,\n  StatLabel as Label,\n  StatPropsContext as PropsContext,\n  StatRoot as Root,\n  StatUnit as Unit,\n  useStatPropsContext as usePropsContext,\n  StatValue as Value,\n} from \"./stat\"\n\nexport type {\n  StatHelperMessageProps as HelperMessageProps,\n  StatIconProps as IconProps,\n  StatLabelProps as LabelProps,\n  StatRootProps as RootProps,\n  StatUnitProps as UnitProps,\n  StatValueProps as ValueProps,\n} from \"./stat\"\n"
    },
    {
      "name": "stat.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const statStyle = defineComponentSlotStyle({\n  base: {\n    helperMessage: {\n      alignItems: \"center\",\n      color: \"fg.muted\",\n      display: \"inline-flex\",\n    },\n    icon: {\n      \"&[data-type='decrease']\": {\n        color: \"fg.error\",\n        fill: \"fg.error\",\n        transform: \"rotate(180deg)\",\n      },\n      \"&[data-type='increase']\": {\n        color: \"fg.success\",\n        fill: \"fg.success\",\n      },\n      fontSize: \"1em\",\n      me: \"1\",\n      verticalAlign: \"middle\",\n    },\n    label: {\n      color: \"fg.muted\",\n      fontWeight: \"medium\",\n    },\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    unit: {\n      color: \"fg.muted\",\n      fontWeight: \"initial\",\n      letterSpacing: \"initial\",\n    },\n    value: {\n      alignItems: \"baseline\",\n      color: \"colorScheme.solid\",\n      display: \"inline-flex\",\n      fontFeatureSettings: '\"pnum\"',\n      fontVariantNumeric: \"proportional-nums\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"tight\",\n      lineHeight: \"1\",\n      verticalAlign: \"baseline\",\n    },\n  },\n\n  props: {\n    /**\n     * If `true`, container will center its children regardless of their width.\n     *\n     * @default false\n     */\n    centerContent: {\n      false: {\n        root: {\n          alignItems: \"flex-start\",\n        },\n      },\n      true: {\n        root: {\n          alignItems: \"center\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      helperMessage: {\n        fontSize: \"xs\",\n      },\n      label: {\n        fontSize: \"sm\",\n      },\n      root: {\n        gap: \"1\",\n      },\n      unit: {\n        fontSize: \"sm\",\n      },\n      value: {\n        fontSize: \"3xl\",\n        gap: \"1\",\n      },\n    },\n    sm: {\n      helperMessage: {\n        fontSize: \"xs\",\n      },\n      label: {\n        fontSize: \"sm\",\n      },\n      root: {\n        gap: \"1\",\n      },\n      unit: {\n        fontSize: \"sm\",\n      },\n      value: {\n        fontSize: \"4xl\",\n        gap: \"1\",\n      },\n    },\n    md: {\n      helperMessage: {\n        fontSize: \"sm\",\n      },\n      label: {\n        fontSize: \"md\",\n      },\n      root: {\n        gap: \"2\",\n      },\n      unit: {\n        fontSize: \"md\",\n      },\n      value: {\n        fontSize: \"5xl\",\n        gap: \"1.5\",\n      },\n    },\n    lg: {\n      helperMessage: {\n        fontSize: \"sm\",\n      },\n      label: {\n        fontSize: \"md\",\n      },\n      root: {\n        gap: \"2\",\n      },\n      unit: {\n        fontSize: \"md\",\n      },\n      value: {\n        fontSize: \"6xl\",\n        gap: \"2\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n  },\n})\n\nexport type StatStyle = typeof statStyle\n"
    },
    {
      "name": "stat.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { StatStyle } from \"./stat.style\"\nimport { createSlotComponent, styled, useSplitChildren } from \"@yamada-ui/react\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { TriangleIcon } from \"../icon\"\nimport { statStyle } from \"./stat.style\"\n\nexport interface StatRootProps\n  extends HTMLStyledProps<\"dl\">,\n    ThemeProps<StatStyle> {\n  /**\n   * If `true`, container will center its children regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n  /**\n   * The stat helper message to use.\n   */\n  helperMessage?: ReactNode\n  /**\n   * The stat icon to use.\n   */\n  icon?: StatIconProps[\"type\"]\n  /**\n   * The stat label to use.\n   */\n  label?: ReactNode\n  /**\n   * The stat value to use.\n   */\n  value?: ReactNode\n  /**\n   * Props for stat helper message component.\n   */\n  helperMessageProps?: StatHelperMessageProps\n  /**\n   * Props for stat icon component.\n   */\n  iconProps?: Omit<StatIconProps, \"type\">\n  /**\n   * Props for stat label component.\n   */\n  labelProps?: StatLabelProps\n  /**\n   * Props for stat value component.\n   */\n  valueProps?: StatValueProps\n}\n\nconst {\n  PropsContext: StatPropsContext,\n  usePropsContext: useStatPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<StatRootProps, StatStyle>(\"stat\", statStyle)\n\nexport { StatPropsContext, useStatPropsContext }\n\n/**\n * `Stat` is used to show numbers and data in a box.\n *\n * @see https://yamada-ui.com/components/stat\n */\nexport const StatRoot = withProvider<\"dl\", StatRootProps>(\n  ({\n    children,\n    helperMessage,\n    icon,\n    label,\n    value,\n    helperMessageProps,\n    iconProps,\n    labelProps,\n    valueProps,\n    ...rest\n  }) => {\n    const [\n      omittedChildren,\n      customStatLabel,\n      customStatValue,\n      customStatHelperMessage,\n    ] = useSplitChildren(children, StatLabel, StatValue, StatHelperMessage)\n\n    return (\n      <styled.dl {...rest}>\n        {customStatLabel ?? <StatLabel {...labelProps}>{label}</StatLabel>}\n        {customStatValue ?? <StatValue {...valueProps}>{value}</StatValue>}\n        {customStatHelperMessage ?? (\n          <StatHelperMessage {...helperMessageProps}>\n            {icon ? <StatIcon type={icon} {...iconProps} /> : null}\n            {helperMessage}\n          </StatHelperMessage>\n        )}\n        {omittedChildren}\n      </styled.dl>\n    )\n  },\n  \"root\",\n)()\n\nexport interface StatIconProps extends HTMLStyledProps<\"svg\"> {\n  /**\n   * The type of the icon.\n   *\n   * @default \"increase\"\n   */\n  type?: \"decrease\" | \"increase\"\n}\n\nexport const StatIcon = withContext<\"svg\", StatIconProps>(\n  ({ type = \"increase\", ...rest }) => {\n    const { t } = useI18n(\"stat\")\n\n    return (\n      <TriangleIcon\n        aria-label={type === \"increase\" ? t(\"Increased by\") : t(\"Decreased by\")}\n        data-type={type}\n        {...rest}\n      />\n    )\n  },\n  \"icon\",\n)()\n\nexport interface StatLabelProps extends HTMLStyledProps<\"dt\"> {}\n\nexport const StatLabel = withContext<\"dt\", StatLabelProps>(\"dt\", \"label\")()\n\nexport interface StatValueProps extends HTMLStyledProps<\"dd\"> {}\n\nexport const StatValue = withContext<\"dd\", StatValueProps>(\"dd\", \"value\")()\n\nexport interface StatUnitProps extends HTMLStyledProps<\"span\"> {}\n\nexport const StatUnit = withContext<\"span\", StatUnitProps>(\"span\", \"unit\")()\n\nexport interface StatHelperMessageProps extends HTMLStyledProps<\"dd\"> {}\n\nexport const StatHelperMessage = withContext<\"dd\", StatHelperMessageProps>(\n  \"dd\",\n  \"helperMessage\",\n)()\n"
    }
  ]
}
