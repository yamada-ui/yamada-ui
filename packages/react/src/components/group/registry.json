{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["flex"],
    "externals": [],
    "hooks": ["use-value"],
    "providers": []
  },
  "dependents": {
    "components": [
      "autocomplete",
      "button",
      "checkbox",
      "checkbox-card",
      "input",
      "native-select",
      "number-input",
      "password-input",
      "pin-input",
      "radio",
      "radio-card",
      "select",
      "toggle"
    ],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "group.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const groupStyle = defineComponentStyle({\n  base: {\n    \"& > *\": {\n      _focusVisible: {\n        zIndex: \"yamcha\",\n      },\n    },\n    display: \"inline-flex\",\n    gap: \"sm\",\n    isolation: \"isolate\",\n    justifyContent: \"start\",\n    position: \"relative\",\n  },\n\n  props: {\n    /**\n     * If `true`, the borderRadius of button that are direct children will be altered to look flushed together.\n     *\n     * @default false\n     */\n    attached: {\n      true: {\n        gap: \"0px !important\",\n      },\n    },\n    /**\n     * If `true`, the children will grow to fill the available space.\n     *\n     * @default false\n     */\n    grow: {\n      true: {\n        \"& > *\": {\n          flex: 1,\n        },\n        display: \"flex\",\n      },\n    },\n    /**\n     * The orientation of the group.\n     *\n     * @default \"horizontal\"\n     */\n    orientation: {\n      horizontal: {\n        flexDirection: \"row\",\n      },\n      vertical: {\n        flexDirection: \"column\",\n      },\n    },\n    /**\n     * The stacking order of the group.\n     */\n    stacking: {\n      \"first-on-top\": {\n        \"& > *\": {\n          zIndex: \"calc({--group-count} - {--group-index})\",\n        },\n      },\n      \"last-on-top\": {\n        \"& > *\": {\n          zIndex: \"{--group-index}\",\n        },\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        \"& > *[data-group-between]\": {\n          \"& > *[data-group-propagate]\": {\n            borderRightWidth: \"0px !important\",\n            rounded: \"0px !important\",\n          },\n          borderRightWidth: \"0px !important\",\n          rounded: \"0px !important\",\n        },\n        \"& > *[data-group-end]:not([data-group-start])\": {\n          \"& > *[data-group-propagate]\": {\n            roundedLeft: \"0px !important\",\n          },\n          roundedLeft: \"0px !important\",\n        },\n        \"& > *[data-group-start]:not([data-group-end])\": {\n          \"& > *[data-group-propagate]\": {\n            borderRightWidth: \"0px !important\",\n            roundedRight: \"0px !important\",\n          },\n          borderRightWidth: \"0px !important\",\n          roundedRight: \"0px !important\",\n        },\n      },\n      attached: true,\n      orientation: \"horizontal\",\n    },\n    {\n      css: {\n        \"& > *[data-group-between]\": {\n          borderTopWidth: \"0px !important\",\n          rounded: \"0px !important\",\n        },\n        \"& > *[data-group-end]:not([data-group-start])\": {\n          borderTopWidth: \"0px !important\",\n          roundedTop: \"0px !important\",\n        },\n        \"& > *[data-group-start]:not([data-group-end])\": {\n          roundedBottom: \"0px !important\",\n        },\n      },\n      attached: true,\n      orientation: \"vertical\",\n    },\n  ],\n\n  defaultProps: {\n    orientation: \"horizontal\",\n  },\n})\n\nexport type GroupStyle = typeof groupStyle\n"
    },
    {
      "name": "group.tsx",
      "content": "\"use client\"\n\nimport type { ThemeProps } from \"@yamada-ui/react\"\nimport type { FlexProps } from \"../flex\"\nimport type { GroupStyle } from \"./group.style\"\nimport { createComponent, dataAttr } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { Flex } from \"../flex\"\nimport { groupStyle } from \"./group.style\"\nimport { useGroup } from \"./use-group\"\n\nexport interface GroupProps\n  extends Omit<FlexProps, \"grow\">,\n    ThemeProps<GroupStyle> {}\n\nconst {\n  PropsContext: GroupPropsContext,\n  usePropsContext: useGroupPropsContext,\n  withContext,\n} = createComponent<GroupProps, GroupStyle>(\"group\", groupStyle)\n\nexport { GroupPropsContext, useGroupPropsContext }\n\n/**\n * `Group` is a component that groups and attaches multiple elements together.\n *\n * @see https://yamada-ui.com/components/group\n */\nexport const Group = withContext<\"div\", GroupProps, \"attached\" | \"orientation\">(\n  Flex,\n  { transferProps: [\"attached\", \"orientation\"] },\n)(\n  undefined,\n  ({\n    attached: attachedProp,\n    children,\n    orientation: orientationProp,\n    ...rest\n  }) => {\n    const orientation = useValue(orientationProp)\n    const attached = useValue(attachedProp)\n    const cloneChildren = useGroup(children)\n\n    return {\n      \"data-attached\": dataAttr(attached),\n      \"data-orientation\": orientation,\n      children: cloneChildren,\n      role: \"group\",\n      ...rest,\n    }\n  },\n)\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./group.style\"\nexport { Group, GroupPropsContext, useGroupPropsContext } from \"./group\"\nexport type { GroupProps } from \"./group\"\nexport * from \"./use-group\"\n"
    },
    {
      "name": "use-group.ts",
      "content": "import type { CSSProperties, DataAttributes, ReactNode } from \"react\"\nimport { cloneElement, useMemo } from \"react\"\nimport {\n  dataAttr,\n  isNull,\n  isUndefined,\n  useValidChildren,\n} from \"@yamada-ui/react\"\n\nexport const useGroup = (children?: ReactNode) => {\n  const validChildren = useValidChildren(children)\n  const omittedChildren = useMemo(\n    () =>\n      validChildren.filter((child) => {\n        const ungrouped = child.props[\"data-ungrouped\"]\n\n        return isUndefined(ungrouped) || isNull(ungrouped)\n      }),\n    [validChildren],\n  )\n  const count = omittedChildren.length\n  const cloneChildren = useMemo(\n    () =>\n      validChildren.map((child) => {\n        const index = omittedChildren.indexOf(child)\n        const ungrouped = index === -1\n\n        if (ungrouped) return child\n\n        return cloneElement(child, {\n          ...child.props,\n          style: {\n            \"--group-count\": count,\n            \"--group-index\": index,\n            ...(child.props?.style ?? {}),\n          },\n          \"data-group-between\": dataAttr(index > 0 && index < count - 1),\n          \"data-group-end\": dataAttr(index === count - 1),\n          \"data-group-start\": dataAttr(index === 0),\n          \"data-peer\": \"\",\n        })\n      }),\n    [validChildren, omittedChildren, count],\n  )\n\n  return cloneChildren\n}\n\nexport type UseGroupReturn = ReturnType<typeof useGroup>\n\ninterface Props extends DataAttributes {\n  style?: CSSProperties\n}\n\nexport const useGroupItemProps = <Y extends Props>({\n  style: {\n    \"--group-count\": groupCount,\n    \"--group-index\": groupIndex,\n    ...style\n  } = {},\n  \"data-group-between\": dataGroupBetween,\n  \"data-group-end\": dataGroupEnd,\n  \"data-group-start\": dataGroupStart,\n  \"data-peer\": dataPeer,\n  ...rest\n}: Y) => {\n  const pickedProps = useMemo(\n    () => ({\n      style: {\n        \"--group-count\": groupCount!,\n        \"--group-index\": groupIndex!,\n      },\n      \"data-group-between\": dataGroupBetween,\n      \"data-group-end\": dataGroupEnd,\n      \"data-group-start\": dataGroupStart,\n      \"data-peer\": dataPeer,\n    }),\n    [\n      groupCount,\n      groupIndex,\n      dataGroupBetween,\n      dataGroupEnd,\n      dataGroupStart,\n      dataPeer,\n    ],\n  )\n  const omittedProps = useMemo(() => ({ style, ...rest }), [style, rest])\n\n  return [pickedProps, omittedProps] as const\n}\n\nexport type UseGroupItemReturn = ReturnType<typeof useGroupItemProps>\n"
    }
  ]
}
