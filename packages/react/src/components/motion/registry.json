{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": ["motion@12.18.1"],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": [
      "accordion",
      "airy",
      "collapse",
      "drawer",
      "fade",
      "fade-scale",
      "flip",
      "loading",
      "modal",
      "popover",
      "reorder",
      "ripple",
      "rotate",
      "slide",
      "slide-fade",
      "snacks",
      "tooltip"
    ],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "factory.ts",
      "content": "import type { ComponentType } from \"react\"\nimport type { DOMElement, StyledOptions } from \"@yamada-ui/react\"\nimport type { MotionStyledComponent } from \"./index.types\"\nimport { motion as _motion } from \"motion/react\"\nimport { styled } from \"@yamada-ui/react\"\n\ntype Components = {\n  [Y in DOMElement]: MotionStyledComponent<Y>\n}\n\ninterface Factory extends Components {\n  <Y extends DOMElement = DOMElement, M extends object = {}>(\n    el: Y,\n    options?: StyledOptions,\n  ): MotionStyledComponent<Y, M>\n}\n\nfunction factory() {\n  const cache = new Map<DOMElement, ComponentType<any>>()\n\n  return new Proxy(styled, {\n    apply: function (\n      _target,\n      _thisArg,\n      [el, options]: [DOMElement, StyledOptions],\n    ) {\n      const component = styled(el, options) as ComponentType<any>\n\n      return _motion.create(component)\n    },\n\n    get: function (_target, el: DOMElement) {\n      if (!cache.has(el)) {\n        const component = styled(el) as ComponentType<any>\n\n        cache.set(el, _motion.create(component))\n      }\n\n      return cache.get(el)\n    },\n  }) as Factory\n}\n\n/**\n * `motion` is a component that allows for the easy implementation of a wide variety of animations.\n *\n * @see https://yamada-ui.com/components/motion\n */\nexport const motion = factory()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./factory\"\nexport type * from \"./index.types\"\nexport { Motion } from \"./motion\"\nexport * from \"./transition\"\n"
    },
    {
      "name": "index.types.ts",
      "content": "import type {\n  MotionProps as OriginMotionProps,\n  ResolvedValues,\n  TargetAndTransition,\n  Transition,\n} from \"motion/react\"\nimport type * as React from \"react\"\nimport type {\n  ComponentArgs,\n  DOMElement,\n  OmitProps,\n  StyledProps,\n  WithoutAs,\n  WithoutRef,\n  Dict,\n  Merge,\n} from \"@yamada-ui/react\"\n\ntype ComponentConditionalProps<\n  Y extends DOMElement,\n  M extends DOMElement,\n  D extends object = {},\n> = Y extends M\n  ? OmitProps<React.ComponentProps<Y>, D>\n  : OmitProps<React.ComponentProps<M>, D>\n\ntype ComponentProps<\n  Y extends DOMElement,\n  M extends DOMElement,\n  D extends object = {},\n> = ComponentConditionalProps<Y, M, WithoutRef<D>> & {\n  as?: M\n}\n\nexport interface MotionComponent<Y extends DOMElement, D extends object = {}>\n  extends ComponentArgs {\n  <M extends DOMElement = Y>(props: ComponentProps<Y, M, D>): React.ReactElement\n}\n\nexport interface MotionStyledComponent<\n  Y extends DOMElement,\n  M extends object = {},\n> extends MotionComponent<Y, Merge<MotionStyledProps, M>> {}\n\ninterface StyledPropsWithoutAs extends Omit<StyledProps, \"as\"> {}\n\ninterface MotionStyledProps\n  extends Merge<StyledPropsWithoutAs, OriginMotionProps> {\n  /**\n   * The HTML element to render.\n   */\n  as?: DOMElement\n}\n\nexport type HTMLMotionProps<Y extends DOMElement = \"div\"> = Merge<\n  React.ComponentProps<Y>,\n  MotionStyledProps\n>\n\nexport type HTMLMotionPropsWithoutAs<Y extends DOMElement = \"div\"> = WithoutAs<\n  HTMLMotionProps<Y>\n>\n\nexport type HTMLMotionPropsWithoutChildren<Y extends DOMElement = \"div\"> = Omit<\n  HTMLMotionProps<Y>,\n  \"children\"\n>\n\ntype TargetResolver<Y = Dict> = (\n  props: MotionTransitionProps & Y,\n) => TargetAndTransition\n\ntype Variant<Y = Dict> = TargetAndTransition | TargetResolver<Y>\n\nexport interface MotionTransitionVariants<Y = Dict> {\n  enter: Variant<Y>\n  exit: Variant<Y>\n  initial?: Variant<Y>\n}\n\ntype MotionLifecycleProps<Y> = { [key in \"enter\" | \"exit\"]?: Y }\n\nexport interface MotionTransitionProps {\n  /**\n   * Custom `delay` definition for `enter` and `exit`.\n   *\n   * @default 0\n   */\n  delay?: MotionLifecycleProps<number> | number\n  /**\n   * Custom `duration` definition for `enter` and `exit`.\n   *\n   * @default 0.2\n   */\n  duration?: MotionLifecycleProps<number> | number\n  /**\n   * Custom `enter`.\n   */\n  enter?: any\n  /**\n   * Custom `exit`.\n   */\n  exit?: any\n  /**\n   * Custom `initial`.\n   */\n  initial?: any\n  /**\n   * Custom `transition` definition for `enter` and `exit`.\n   */\n  transition?: MotionLifecycleProps<Transition>\n  /**\n   * Custom `transitionEnd` definition for `enter` and `exit`.\n   */\n  transitionEnd?: MotionLifecycleProps<ResolvedValues>\n}\n\nexport type WithTransitionProps<Y extends object = {}> = MotionTransitionProps &\n  Omit<Y, \"transition\" | \"variants\"> & {\n    /**\n     * Show the component. triggers when enter or exit states.\n     */\n    open?: boolean\n    /**\n     * If `true`, the element will unmount when `open={false}` and animation is done.\n     */\n    unmountOnExit?: boolean\n  }\n"
    },
    {
      "name": "motion.tsx",
      "content": "\"use client\"\n\nimport type { Dict } from \"@yamada-ui/react\"\nimport type { HTMLMotionProps, MotionStyledComponent } from \"./index.types\"\nimport { motion } from \"motion/react\"\nimport { useMemo } from \"react\"\nimport { styled, useSystem, cx } from \"@yamada-ui/react\"\n\nconst forwardProps = [\"transition\"]\n\nconst Component = styled<\"div\", Dict>(\"div\", { forwardProps })\n\n/**\n * `Motion` is a component that allows for the easy implementation of a wide variety of animations.\n *\n * @see https://yamada-ui.com/components/motion\n */\nexport const Motion = (({\n  ref,\n  as: asProp = \"div\",\n  className,\n  ...rest\n}: HTMLMotionProps) => {\n  const system = useSystem()\n  const as = useMemo(() => motion.create(asProp), [asProp])\n\n  return (\n    <Component\n      ref={ref}\n      as={as}\n      className={cx(system.utils.getClassName(\"motion\"), className)}\n      {...rest}\n    />\n  )\n}) as MotionStyledComponent<\"div\">\n"
    },
    {
      "name": "transition.ts",
      "content": "import type { Transition } from \"motion/react\"\nimport type { MotionTransitionProps } from \"./index.types\"\nimport { isNumber } from \"@yamada-ui/react\"\n\nexport const createTransition = {\n  enter: function (transition?: Transition) {\n    return function (\n      delay?: MotionTransitionProps[\"delay\"],\n      duration?: MotionTransitionProps[\"duration\"],\n    ): Transition {\n      return {\n        ...(transition ?? {\n          duration: 0.2,\n          ease: [0, 0, 0.58, 1],\n        }),\n        ...(duration\n          ? { duration: isNumber(duration) ? duration : duration.enter }\n          : {}),\n        delay: isNumber(delay) ? delay : delay?.enter,\n      }\n    }\n  },\n  exit: function (transition?: Transition) {\n    return function (\n      delay?: MotionTransitionProps[\"delay\"],\n      duration?: MotionTransitionProps[\"duration\"],\n    ): Transition {\n      return {\n        ...(transition ?? {\n          duration: 0.2,\n          ease: [0.42, 0, 1, 1],\n        }),\n        ...(duration\n          ? { duration: isNumber(duration) ? duration : duration.exit }\n          : {}),\n        delay: isNumber(delay) ? delay : delay?.exit,\n      }\n    }\n  },\n}\n"
    }
  ]
}
