{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["motion"],
    "externals": ["motion@12.18.1"],
    "hooks": ["use-value"],
    "providers": []
  },
  "dependents": { "components": ["drawer"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./slide.style\"\nexport {\n  Slide,\n  SlidePropsContext,\n  slideVariants,\n  useSlidePropsContext,\n} from \"./slide\"\nexport type { SlideProps } from \"./slide\"\n"
    },
    {
      "name": "slide.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const slideStyle = defineComponentStyle({\n  base: {\n    position: \"fixed\",\n    zIndex: \"guldo\",\n  },\n\n  props: {\n    /**\n     * The placement of the slide.\n     *\n     * @default 'inline-end'\n     */\n    placement: {\n      \"block-end\": { bottom: \"0\", left: \"0\", right: \"0\", w: \"vw\" },\n      \"block-start\": { left: \"0\", right: \"0\", top: \"0\", w: \"vw\" },\n      \"inline-end\": { bottom: \"0\", h: \"dvh\", right: \"0\", top: \"0\" },\n      \"inline-start\": { bottom: \"0\", h: \"dvh\", left: \"0\", top: \"0\" },\n    },\n  },\n\n  defaultProps: {\n    placement: \"inline-end\",\n  },\n})\n\nexport type SlideStyle = typeof slideStyle\n"
    },
    {
      "name": "slide.tsx",
      "content": "\"use client\"\n\nimport type { Variants } from \"motion/react\"\nimport type { ThemeProps } from \"@yamada-ui/react\"\nimport type {\n  HTMLMotionProps,\n  MotionTransitionVariants,\n  WithTransitionProps,\n} from \"../motion\"\nimport type { SlideStyle } from \"./slide.style\"\nimport { AnimatePresence } from \"motion/react\"\nimport { useMemo } from \"react\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { createTransition, motion } from \"../motion\"\nimport { slideStyle } from \"./slide.style\"\n\nconst getAnimationProps = (placement: SlideProps[\"placement\"]) => {\n  switch (placement) {\n    case \"block-start\":\n      return { enter: { x: 0, y: 0 }, exit: { x: 0, y: \"-100%\" } }\n    case \"inline-end\":\n      return { enter: { x: 0, y: 0 }, exit: { x: \"100%\", y: 0 } }\n    case \"block-end\":\n      return { enter: { x: 0, y: 0 }, exit: { x: 0, y: \"100%\" } }\n    case \"inline-start\":\n      return { enter: { x: 0, y: 0 }, exit: { x: \"-100%\", y: 0 } }\n    default:\n      return {}\n  }\n}\nexport const slideVariants: Variants = {\n  enter: ({\n    delay,\n    duration,\n    enter,\n    placement,\n    transition,\n    transitionEnd,\n  } = {}) => ({\n    ...getAnimationProps(placement).enter,\n    transition: createTransition.enter(transition?.enter)(delay, duration),\n    transitionEnd: transitionEnd?.enter,\n    ...enter,\n  }),\n  exit: ({\n    delay,\n    duration,\n    exit,\n    placement,\n    transition,\n    transitionEnd,\n  } = {}) => ({\n    ...getAnimationProps(placement).exit,\n    transition: createTransition.exit(transition?.exit)(delay, duration),\n    transitionEnd: transitionEnd?.exit,\n    ...exit,\n  }),\n} satisfies MotionTransitionVariants\n\nexport interface SlideProps\n  extends WithTransitionProps<HTMLMotionProps>,\n    ThemeProps<SlideStyle> {}\n\nconst {\n  PropsContext: SlidePropsContext,\n  usePropsContext: useSlidePropsContext,\n  withContext,\n} = createComponent<SlideProps, SlideStyle>(\"slide\", slideStyle)\n\nexport { SlidePropsContext, useSlidePropsContext }\n\n/**\n * `Slide` is a component that shows or hides an element from the corners of the page.\n *\n * @see https://yamada-ui.com/components/slide\n */\nexport const Slide = withContext<\"div\", SlideProps, \"placement\">(\n  ({\n    delay,\n    duration = { enter: 0.4, exit: 0.3 },\n    open: openProp,\n    placement: placementProp,\n    transition,\n    transitionEnd,\n    unmountOnExit,\n    ...rest\n  }) => {\n    const animate = openProp || unmountOnExit ? \"enter\" : \"exit\"\n    const open = unmountOnExit ? openProp && unmountOnExit : true\n    const placement = useValue(placementProp)\n\n    const custom = useMemo(\n      () => ({\n        delay,\n        duration,\n        placement,\n        transition,\n        transitionEnd,\n      }),\n      [delay, duration, placement, transition, transitionEnd],\n    )\n\n    return (\n      <AnimatePresence custom={custom}>\n        {open ? (\n          <motion.div\n            animate={animate}\n            custom={custom}\n            exit=\"exit\"\n            initial=\"exit\"\n            variants={slideVariants}\n            {...rest}\n          />\n        ) : null}\n      </AnimatePresence>\n    )\n  },\n  { transferProps: [\"placement\"] },\n)()\n"
    }
  ]
}
