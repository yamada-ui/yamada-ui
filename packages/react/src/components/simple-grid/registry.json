{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["grid"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./simple-grid.style\"\nexport {\n  SimpleGrid,\n  SimpleGridPropsContext,\n  useSimpleGridPropsContext,\n} from \"./simple-grid\"\nexport type { SimpleGridProps } from \"./simple-grid\"\n"
    },
    {
      "name": "simple-grid.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const simpleGridStyle = defineComponentStyle({})\n\nexport type SimpleGridStyle = typeof simpleGridStyle\n"
    },
    {
      "name": "simple-grid.tsx",
      "content": "\"use client\"\n\nimport type {\n  CSSProps,\n  StyleValue,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { GridProps } from \"../grid\"\nimport type { SimpleGridStyle } from \"./simple-grid.style\"\nimport { useMemo } from \"react\"\nimport { createComponent, replaceObject } from \"@yamada-ui/react\"\nimport { Grid } from \"../grid\"\nimport { simpleGridStyle } from \"./simple-grid.style\"\n\nexport interface SimpleGridProps\n  extends Omit<WithoutThemeProps<GridProps, SimpleGridStyle>, \"columns\">,\n    ThemeProps<SimpleGridStyle> {\n  /**\n   * The number of columns.\n   */\n  columns?: StyleValue<number>\n  /**\n   * The width at which child elements will break into columns.\n   * Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: CSSProps[\"minWidth\"]\n}\n\nconst {\n  PropsContext: SimpleGridPropsContext,\n  usePropsContext: useSimpleGridPropsContext,\n  withContext,\n} = createComponent<SimpleGridProps, SimpleGridStyle>(\n  \"simple-grid\",\n  simpleGridStyle,\n)\n\nexport { SimpleGridPropsContext, useSimpleGridPropsContext }\n\n/**\n * `SimpleGrid` is a component that makes `Grid` simpler and more user-friendly.\n *\n * @see https://yamada-ui.com/components/simple-grid\n */\nexport const SimpleGrid = withContext<\"div\", SimpleGridProps>(Grid)(\n  undefined,\n  ({ columns, minChildWidth, ...rest }) => {\n    const templateColumns = useMemo(() => {\n      if (minChildWidth) {\n        return replaceObject(minChildWidth, (value) => {\n          return value != null\n            ? `repeat(auto-fit, minmax({sizes.${value}, ${value}}, 1fr))`\n            : undefined\n        })\n      } else {\n        return replaceObject(columns, (value) =>\n          value != null ? `repeat(${value}, minmax(0, 1fr))` : undefined,\n        )\n      }\n    }, [minChildWidth, columns])\n\n    return { templateColumns, ...rest }\n  },\n)\n"
    }
  ]
}
