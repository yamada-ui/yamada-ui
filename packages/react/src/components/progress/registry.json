{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": ["i18n-provider"]
  },
  "dependents": {
    "components": ["circle-progress"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./progress.style\"\nexport {\n  Progress,\n  ProgressPropsContext,\n  useProgressPropsContext,\n} from \"./progress\"\nexport type { ProgressProps } from \"./progress\"\nexport * from \"./use-progress\"\n"
    },
    {
      "name": "progress.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const progressStyle = defineComponentSlotStyle({\n  base: {\n    range: {\n      bgColor: \"{filledTrackColor}\",\n      h: \"full\",\n      rounded: \"inherit\",\n      transitionDuration: \"slow\",\n      transitionProperty: \"size\",\n      w: \"{width}\",\n      _indeterminate: {\n        \"--animation-from-x\": \"-40%\",\n        \"--animation-to-x\": \"100%\",\n        animationDuration: \"{duration, 1s}\",\n        animationIterationCount: \"infinite\",\n        animationName: \"position\",\n        animationTimingFunction: \"ease\",\n        minW: \"50%\",\n        position: \"absolute\",\n        willChange: \"left\",\n      },\n    },\n    root: {\n      overflow: \"hidden\",\n      position: \"relative\",\n      w: \"full\",\n    },\n  },\n\n  props: {\n    /**\n     * If `true`, the progress bar will animate.\n     *\n     * @default false\n     */\n    animated: {\n      true: {\n        range: {\n          \"--animation-from\": \"{stripe-size}\",\n          animationDuration: \"{duration, 1s}\",\n          animationIterationCount: \"infinite\",\n          animationName: \"bg-position\",\n          animationTimingFunction: \"linear\",\n        },\n      },\n    },\n    /**\n     * The shape of the progress bar.\n     *\n     * @default rounded\n     */\n    shape: {\n      circle: {\n        root: { rounded: \"full\" },\n      },\n      rounded: {\n        root: { rounded: \"l1\" },\n      },\n      square: {\n        root: { rounded: \"0\" },\n      },\n    },\n    /**\n     * If `true`, the progress bar will show stripe.\n     *\n     * @default false\n     */\n    striped: {\n      true: {\n        range: {\n          \"--stripe-angle\": \"45deg\",\n          \"--stripe-color\": [\"rgba(255, 255, 255, 0.3)\", \"rgba(0, 0, 0, 0.3)\"],\n          \"--stripe-size\": \"1rem\",\n          bgImage: `linear-gradient(\n            {stripe-angle},\n            {stripe-color} 25%,\n            transparent 25%,\n            transparent 50%,\n            {stripe-color} 50%,\n            {stripe-color} 75%,\n            transparent 75%,\n            transparent\n          )`,\n          bgSize: \"{stripe-size} {stripe-size}\",\n        },\n      },\n    },\n  },\n\n  variants: {\n    outline: {\n      range: {\n        bg: \"colorScheme.solid\",\n      },\n      root: {\n        bg: \"bg.subtle\",\n      },\n    },\n    subtle: {\n      range: {\n        bg: \"colorScheme.solid/80\",\n      },\n      root: {\n        bg: [\"colorScheme.muted\", \"colorScheme.subtle\"],\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      root: { h: \"1\" },\n    },\n    sm: {\n      root: { h: \"2\" },\n    },\n    md: {\n      root: { h: \"3\" },\n    },\n    lg: {\n      root: { h: \"4\" },\n    },\n    xl: {\n      root: { h: \"5\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n    shape: \"rounded\",\n    striped: false,\n  },\n})\n\nexport type ProgressStyle = typeof progressStyle\n"
    },
    {
      "name": "progress.tsx",
      "content": "\"use client\"\n\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { ProgressStyle } from \"./progress.style\"\nimport type { UseProgressProps } from \"./use-progress\"\nimport {\n  createSlotComponent,\n  mergeCSS,\n  styled,\n  isNumber,\n} from \"@yamada-ui/react\"\nimport { progressStyle } from \"./progress.style\"\nimport { useProgress } from \"./use-progress\"\n\nexport interface ProgressProps\n  extends HTMLStyledProps,\n    UseProgressProps,\n    ThemeProps<ProgressStyle> {\n  /**\n   * The animation duration in seconds.\n   */\n  duration?: number | string\n  /**\n   * The color of the progress range.\n   */\n  rangeColor?: CSSProps[\"color\"]\n  /**\n   * The color of the progress track.\n   */\n  trackColor?: CSSProps[\"color\"]\n  /**\n   * Props for the progress range element.\n   */\n  rangeProps?: ProgressRangeProps\n}\n\nconst {\n  PropsContext: ProgressPropsContext,\n  usePropsContext: useProgressPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<ProgressProps, ProgressStyle>(\"progress\", progressStyle)\n\nexport { ProgressPropsContext, useProgressPropsContext }\n\n/**\n * `Progress` is a component for visually indicating progress.\n *\n * @see https://yamada-ui.com/components/progress\n */\nexport const Progress = withProvider(\n  ({ css, max, min, rangeColor, trackColor, value, rangeProps, ...rest }) => {\n    const { percent, getRangeProps, getRootProps } = useProgress({\n      max,\n      min,\n      value,\n    })\n\n    return (\n      <styled.div\n        css={mergeCSS(css, { \"--width\": `${percent}%` })}\n        bg={trackColor}\n        {...getRootProps(rest)}\n      >\n        <ProgressRange bg={rangeColor} {...getRangeProps(rangeProps)} />\n      </styled.div>\n    )\n  },\n  \"root\",\n)(undefined, ({ duration, ...rest }) => ({\n  \"--duration\": isNumber(duration) ? `${duration}s` : duration,\n  ...rest,\n}))\n\ninterface ProgressRangeProps extends HTMLStyledProps {}\n\nconst ProgressRange = withContext<\"div\", ProgressRangeProps>(\"div\", \"range\")()\n"
    },
    {
      "name": "use-progress.ts",
      "content": "\"use client\"\n\nimport type { HTMLProps } from \"@yamada-ui/react\"\nimport { useCallback } from \"react\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { dataAttr, valueToPercent } from \"@yamada-ui/react\"\n\nexport interface UseProgressProps {\n  /**\n   * The maximum value of the progress.\n   *\n   * @default 100\n   */\n  max?: number\n  /**\n   * The minimum value of the progress.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The value of the progress. If `null`, the progress will be indeterminate.\n   *\n   * @default 0\n   */\n  value?: null | number\n}\n\nexport const useProgress = <Y extends \"div\" | \"svg\" = \"div\">({\n  max = 100,\n  min = 0,\n  value,\n}: UseProgressProps = {}) => {\n  const indeterminate = value === null\n  const percent = valueToPercent(value ?? 0, min, max)\n  const { t } = useI18n(\"progress\")\n\n  const getRootProps = useCallback(\n    (props?: HTMLProps<Y>) => ({\n      \"aria-label\": indeterminate\n        ? t(\"Loading...\")\n        : t(\"{value} percent\", { value: percent }),\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": value ?? undefined,\n      \"data-indeterminate\": dataAttr(indeterminate),\n      role: \"progressbar\",\n      ...props,\n    }),\n    [max, min, percent, value, indeterminate, t],\n  )\n\n  const getTrackProps = useCallback(\n    (props?: HTMLProps<Y extends \"svg\" ? \"circle\" : \"div\">) => ({\n      \"data-indeterminate\": dataAttr(indeterminate),\n      ...props,\n    }),\n    [indeterminate],\n  )\n\n  const getRangeProps = useCallback(\n    (props?: HTMLProps<Y extends \"svg\" ? \"circle\" : \"div\">) => ({\n      \"data-indeterminate\": dataAttr(indeterminate),\n      ...props,\n    }),\n    [indeterminate],\n  )\n\n  return {\n    percent,\n    getRangeProps,\n    getRootProps,\n    getTrackProps,\n  }\n}\n\nexport type UseProgressReturn = ReturnType<typeof useProgress>\n"
    }
  ]
}
