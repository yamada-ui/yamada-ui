{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["button", "icon", "select"],
    "externals": ["dayjs@^1.11.18"],
    "hooks": ["use-descendants", "use-controllable-state"],
    "providers": ["i18n-provider"]
  },
  "dependents": { "components": ["date-picker"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "calendar.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { buttonStyle } from \"../button\"\n\nexport const calendarStyle = defineComponentSlotStyle({\n  base: {\n    button: {\n      ...buttonStyle.base,\n      boxSize: \"{cell-size}\",\n      color: \"colorScheme.outline\",\n      _hover: { layerStyle: \"ghost.hover\" },\n    },\n    cell: {\n      alignItems: \"center\",\n      boxSize: \"{cell-size}\",\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n    },\n    control: {\n      alignItems: \"center\",\n      display: \"flex\",\n      gap: \"{cell-gap}\",\n      gridColumn: \"span 5\",\n      justifyContent: \"center\",\n    },\n    day: {\n      ...buttonStyle.base,\n      \"&[data-between]\": {\n        _first: { _before: { roundedLeft: \"{cell-rounded}\" } },\n        _last: { _before: { roundedRight: \"{cell-rounded}\" } },\n        _notLast: {\n          _before: {\n            me: \"calc({cell-gap} * -1)\",\n            w: \"calc({cell-size} + {cell-gap})\",\n          },\n        },\n      },\n      \"&[data-between], &[data-end]:not(:first-of-type), &[data-start]:not(:last-of-type)\":\n        {\n          _before: {\n            layerStyle: \"ghost.hover\",\n            boxSize: \"{cell-size}\",\n            position: \"absolute\",\n            zIndex: \"-2\",\n          },\n        },\n      \"&[data-end]:not(:first-of-type)::before\": {\n        roundedRight: \"{cell-rounded}\",\n      },\n      \"&[data-holiday]:not([data-selected])\": { color: \"{holiday-color}\" },\n      \"&[data-outside]:not([data-selected])\": { \"& > span\": { opacity: 0.4 } },\n      \"&[data-start]:not(:last-of-type)::before\": {\n        me: \"calc({cell-gap} * -1)\",\n        roundedLeft: \"{cell-rounded}\",\n        w: \"calc({cell-size} + {cell-gap})\",\n      },\n      \"&[data-today]:not([data-outside], [data-selected], [data-between])\": {\n        layerStyle: \"ghost.hover\",\n      },\n      \"&[data-weekend]:not([data-selected])\": {\n        color: \"{weekend-color}\",\n      },\n      borderColor: \"transparent\",\n      fontWeight: \"normal\",\n      overflow: \"inherit\",\n      rounded: \"{cell-rounded}\",\n      zIndex: \"0\",\n      _hover: {\n        \"&:not([data-selected], [data-today], [data-between])\": {\n          layerStyle: \"ghost.hover\",\n        },\n      },\n      _selected: {\n        layerStyle: \"solid\",\n        _after: {\n          layerStyle: \"solid\",\n          boxSize: \"{cell-size}\",\n          position: \"absolute\",\n          rounded: \"{cell-rounded}\",\n          zIndex: \"-1\",\n        },\n      },\n    },\n    month: {\n      alignItems: \"stretch\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"{cell-gap}\",\n      outline: \"none\",\n    },\n    months: {},\n    navigation: {},\n    next: {},\n    prev: {},\n    root: {\n      \"--cell-gap\": \"spaces.1\",\n      \"--holiday-color\": [\"colors.red.500\", \"colors.red.400\"],\n      \"--select-content-size\": \"auto\",\n      \"--select-font-size\": \"{font-size}\",\n      \"--select-root-size\": \"fit-content\",\n      \"--weekend-color\": \"{holiday-color}\",\n      alignItems: \"stretch\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      fontSize: \"{font-size}\",\n      w: \"calc({cell-size} * 7 + {cell-gap} * 6)\",\n    },\n    row: {\n      display: \"grid\",\n      gap: \"{cell-gap}\",\n      gridTemplateColumns: \"repeat(7, 1fr)\",\n    },\n    select: { minH: \"{cell-size}!\" },\n    separator: { color: \"fg.muted\" },\n    week: {},\n    weekday: { color: \"fg.muted\", fontWeight: \"normal\" },\n    weeks: {\n      display: \"grid\",\n      gap: \"{cell-gap}\",\n    },\n    years: {},\n  },\n\n  props: {\n    /**\n     * If `true`, the calendar will be fixed rows.\n     *\n     * @default true\n     */\n    fixed: {\n      true: {\n        weeks: {\n          gridTemplateRows: \"repeat(6, 1fr)\",\n        },\n      },\n    },\n    /**\n     * The shape of the cell\n     *\n     * @default 'circle'\n     */\n    shape: {\n      circle: {\n        root: { \"--cell-rounded\": \"radii.full\" },\n      },\n      rounded: {\n        root: { \"--cell-rounded\": \"radii.l2\" },\n      },\n      square: {\n        root: { \"--cell-rounded\": \"0\" },\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      root: { \"--cell-size\": \"sizes.8\", \"--font-size\": \"fontSizes.xs\" },\n    },\n    sm: {\n      root: { \"--cell-size\": \"sizes.9\", \"--font-size\": \"fontSizes.sm\" },\n    },\n    md: {\n      root: { \"--cell-size\": \"sizes.10\", \"--font-size\": \"fontSizes.md\" },\n    },\n    lg: {\n      root: { \"--cell-size\": \"sizes.11\", \"--font-size\": \"fontSizes.lg\" },\n    },\n    xl: {\n      root: { \"--cell-size\": \"sizes.12\", \"--font-size\": \"fontSizes.xl\" },\n    },\n    \"2xl\": {\n      root: { \"--cell-size\": \"sizes.14\", \"--font-size\": \"fontSizes.xl\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    fixed: true,\n    shape: \"rounded\",\n  },\n})\n\nexport type CalendarStyle = typeof calendarStyle\n"
    },
    {
      "name": "calendar.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement } from \"react\"\nimport type {\n  GenericsComponent,\n  HTMLStyledProps,\n  ThemeProps,\n  ReactNodeOrFunction,\n} from \"@yamada-ui/react\"\nimport type { CalendarStyle } from \"./calendar.style\"\nimport type {\n  UseCalendarDayProps,\n  UseCalendarProps,\n  UseCalendarReturn,\n} from \"./use-calendar\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled, runIfFn } from \"@yamada-ui/react\"\nimport { ChevronLeftIcon, ChevronRightIcon } from \"../icon\"\nimport { Select } from \"../select\"\nimport { calendarStyle } from \"./calendar.style\"\nimport {\n  CalendarContext,\n  CalendarDescendantsContext,\n  useCalendar,\n  useCalendarContext,\n  useCalendarDay,\n} from \"./use-calendar\"\n\ninterface ComponentContext\n  extends Pick<\n      UseCalendarReturn,\n      | \"getMonthProps\"\n      | \"getMonthSelectProps\"\n      | \"getNavigationProps\"\n      | \"getNextButtonProps\"\n      | \"getPrevButtonProps\"\n      | \"getStatusProps\"\n      | \"getWeekdayProps\"\n      | \"getYearSelectProps\"\n      | \"monthDays\"\n      | \"monthItems\"\n      | \"weekdays\"\n      | \"yearItems\"\n    >,\n    Pick<\n      CalendarRootProps,\n      | \"buttonProps\"\n      | \"controlProps\"\n      | \"day\"\n      | \"dayProps\"\n      | \"monthProps\"\n      | \"monthSelectProps\"\n      | \"navigationProps\"\n      | \"nextButtonProps\"\n      | \"prevButtonProps\"\n      | \"selectProps\"\n      | \"weekdayProps\"\n      | \"weekdaysProps\"\n      | \"weekProps\"\n      | \"weeksProps\"\n      | \"yearSelectProps\"\n    > {}\n\nexport interface CalendarRootProps<\n  Multiple extends boolean = false,\n  Range extends boolean = false,\n> extends Omit<HTMLStyledProps, \"defaultValue\" | \"onChange\">,\n    ThemeProps<CalendarStyle>,\n    UseCalendarProps<Multiple, Range>,\n    Pick<CalendarMonthProps, \"day\"> {\n  /**\n   * Props for the button component.\n   */\n  buttonProps?: HTMLStyledProps<\"button\">\n  /**\n   * Props for the control component.\n   */\n  controlProps?: CalendarControlProps\n  /**\n   * Props for the day component.\n   */\n  dayProps?: Omit<CalendarDayProps, \"value\">\n  /**\n   * Props for the month component.\n   */\n  monthProps?: CalendarMonthProps\n  /**\n   * Props for the month select component.\n   */\n  monthSelectProps?: CalendarMonthSelectProps\n  /**\n   * Props for the navigation component.\n   */\n  navigationProps?: Omit<CalendarNavigationProps, \"children\">\n  /**\n   * Props for the next button component.\n   */\n  nextButtonProps?: CalendarNextButtonProps\n  /**\n   * Props for the prev button component.\n   */\n  prevButtonProps?: CalendarPrevButtonProps\n  /**\n   * Props for the select component.\n   */\n  selectProps?: Select.RootProps\n  /**\n   * Props for the weekday component.\n   */\n  weekdayProps?: HTMLStyledProps<\"th\">\n  /**\n   * Props for the weekdays component.\n   */\n  weekdaysProps?: HTMLStyledProps<\"tr\">\n  /**\n   * Props for the week component.\n   */\n  weekProps?: HTMLStyledProps<\"tr\">\n  /**\n   * Props for the weeks component.\n   */\n  weeksProps?: HTMLStyledProps<\"tbody\">\n  /**\n   * Props for the year select component.\n   */\n  yearSelectProps?: CalendarYearSelectProps\n}\n\nconst {\n  ComponentContext,\n  PropsContext: CalendarPropsContext,\n  useComponentContext,\n  usePropsContext: useCalendarPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<CalendarRootProps, CalendarStyle, ComponentContext>(\n  \"calendar\",\n  calendarStyle,\n)\n\nexport { CalendarPropsContext, useCalendarPropsContext }\n\n/**\n * `Calendar` is a component for displaying or selecting dates in a calendar.\n *\n * @see https://yamada-ui.com/docs/components/calendar\n */\nexport const CalendarRoot = withProvider(\n  <Multiple extends boolean = false, Range extends boolean = false>({\n    children,\n    day,\n    buttonProps,\n    controlProps,\n    dayProps,\n    monthProps,\n    monthSelectProps,\n    navigationProps,\n    nextButtonProps,\n    prevButtonProps,\n    selectProps,\n    weekdayProps,\n    weekdaysProps,\n    weekProps,\n    weeksProps,\n    yearSelectProps,\n    ...props\n  }: CalendarRootProps<Multiple, Range>) => {\n    const {\n      descendants,\n      disabled,\n      endOfMonth,\n      excludeDate,\n      holidays,\n      locale,\n      max,\n      maxDate,\n      minDate,\n      month,\n      monthDays,\n      monthItems,\n      multiple,\n      range,\n      startDayOfWeek,\n      startOfMonth,\n      today,\n      value,\n      weekdays,\n      weekendDays,\n      yearItems,\n      getMonthProps,\n      getMonthSelectProps,\n      getNavigationProps,\n      getNextButtonProps,\n      getPrevButtonProps,\n      getRootProps,\n      getStatusProps,\n      getWeekdayProps,\n      getYearSelectProps,\n      onChange,\n      onMonthChange,\n      onNextMonth,\n      onPrevMonth,\n    } = useCalendar(props)\n    const calendarContext = useMemo(\n      () => ({\n        disabled,\n        endOfMonth,\n        excludeDate,\n        holidays,\n        locale,\n        max,\n        maxDate,\n        minDate,\n        month,\n        multiple,\n        range,\n        startDayOfWeek,\n        startOfMonth,\n        today,\n        value,\n        weekendDays,\n        onChange,\n        onMonthChange,\n        onNextMonth,\n        onPrevMonth,\n      }),\n      [\n        disabled,\n        endOfMonth,\n        excludeDate,\n        holidays,\n        locale,\n        max,\n        maxDate,\n        minDate,\n        month,\n        multiple,\n        range,\n        startDayOfWeek,\n        startOfMonth,\n        today,\n        value,\n        weekendDays,\n        onChange,\n        onMonthChange,\n        onNextMonth,\n        onPrevMonth,\n      ],\n    )\n    const componentContext = useMemo(\n      () => ({\n        day,\n        monthDays,\n        monthItems,\n        weekdays,\n        yearItems,\n        buttonProps,\n        controlProps,\n        dayProps,\n        getMonthProps,\n        getMonthSelectProps,\n        getNavigationProps,\n        getNextButtonProps,\n        getPrevButtonProps,\n        getStatusProps,\n        getWeekdayProps,\n        getYearSelectProps,\n        monthProps,\n        monthSelectProps,\n        navigationProps,\n        nextButtonProps,\n        prevButtonProps,\n        selectProps,\n        weekdayProps,\n        weekdaysProps,\n        weekProps,\n        weeksProps,\n        yearSelectProps,\n      }),\n      [\n        day,\n        monthDays,\n        monthItems,\n        weekdays,\n        yearItems,\n        buttonProps,\n        controlProps,\n        dayProps,\n        getMonthProps,\n        getMonthSelectProps,\n        getNavigationProps,\n        getNextButtonProps,\n        getPrevButtonProps,\n        getStatusProps,\n        getWeekdayProps,\n        getYearSelectProps,\n        monthProps,\n        monthSelectProps,\n        navigationProps,\n        nextButtonProps,\n        prevButtonProps,\n        selectProps,\n        weekdayProps,\n        weekdaysProps,\n        weekProps,\n        weeksProps,\n        yearSelectProps,\n      ],\n    )\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return (\n        <>\n          <CalendarNavigation />\n          <CalendarMonth />\n        </>\n      )\n    }, [children])\n\n    return (\n      <CalendarDescendantsContext value={descendants}>\n        <CalendarContext value={calendarContext}>\n          <ComponentContext value={componentContext}>\n            <styled.div {...getRootProps()}>{computedChildren}</styled.div>\n          </ComponentContext>\n        </CalendarContext>\n      </CalendarDescendantsContext>\n    )\n  },\n  \"root\",\n)() as GenericsComponent<{\n  <Multiple extends boolean = false, Range extends boolean = false>(\n    props: CalendarRootProps<Multiple, Range>,\n  ): ReactElement\n}>\n\nexport interface CalendarNavigationProps extends HTMLStyledProps<\"nav\"> {}\n\nexport const CalendarNavigation = withContext<\"nav\", CalendarNavigationProps>(\n  \"nav\",\n  [\"row\", \"navigation\"],\n)(undefined, ({ children, ...rest }) => {\n  const { getNavigationProps, navigationProps } = useComponentContext()\n\n  const computedChildren = useMemo(() => {\n    if (children) return children\n\n    return (\n      <>\n        <CalendarPrevButton />\n        <CalendarControl />\n        <CalendarNextButton />\n      </>\n    )\n  }, [children])\n\n  return {\n    ...getNavigationProps({ ...navigationProps, ...rest }),\n    children: computedChildren,\n  }\n})\n\nexport interface CalendarControlProps\n  extends Omit<HTMLStyledProps, \"children\"> {\n  /**\n   * The control children to use.\n   */\n  children?: ReactNodeOrFunction<{ month: Date }>\n}\n\nexport const CalendarControl = withContext<\"div\", CalendarControlProps>(\n  \"div\",\n  \"control\",\n)(undefined, ({ children, ...rest }) => {\n  const { month } = useCalendarContext()\n  const { controlProps, getStatusProps } = useComponentContext()\n\n  const computedChildren = useMemo(() => {\n    if (children) return runIfFn(children, { month })\n\n    return (\n      <>\n        <CalendarMonthSelect />\n        <CalendarYearSelect />\n      </>\n    )\n  }, [children, month])\n\n  return {\n    ...controlProps,\n    ...rest,\n    children: (\n      <>\n        {computedChildren}\n        <styled.div {...getStatusProps()} />\n      </>\n    ),\n  }\n})\n\nexport interface CalendarPrevButtonProps extends HTMLStyledProps<\"button\"> {}\n\nexport const CalendarPrevButton = withContext<\n  \"button\",\n  CalendarPrevButtonProps\n>(\"button\", [\"button\", \"prev\"])(\n  undefined,\n  ({ children = <ChevronLeftIcon />, ...rest }) => {\n    const { buttonProps, getPrevButtonProps, prevButtonProps } =\n      useComponentContext()\n\n    return {\n      children,\n      ...getPrevButtonProps({ ...buttonProps, ...prevButtonProps, ...rest }),\n    }\n  },\n)\n\nexport interface CalendarNextButtonProps extends HTMLStyledProps<\"button\"> {}\n\nexport const CalendarNextButton = withContext<\n  \"button\",\n  CalendarNextButtonProps\n>(\"button\", [\"button\", \"next\"])(\n  undefined,\n  ({ children = <ChevronRightIcon />, ...rest }) => {\n    const { buttonProps, getNextButtonProps, nextButtonProps } =\n      useComponentContext()\n\n    return {\n      children,\n      ...getNextButtonProps({ ...buttonProps, ...nextButtonProps, ...rest }),\n    }\n  },\n)\n\nexport interface CalendarSeparatorProps extends HTMLStyledProps<\"span\"> {}\n\nexport const CalendarSeparator = withContext<\"span\", CalendarSeparatorProps>(\n  \"span\",\n  \"separator\",\n)({ children: \"/\", role: \"separator\" })\n\nexport interface CalendarYearSelectProps extends Select.RootProps {}\n\nexport const CalendarYearSelect = withContext<\"div\", CalendarYearSelectProps>(\n  (props) => {\n    const { yearItems, getYearSelectProps, selectProps, yearSelectProps } =\n      useComponentContext()\n    const { contentProps, rootProps, ...rest } = {\n      ...selectProps,\n      ...yearSelectProps,\n      ...props,\n    }\n\n    return (\n      <Select.Root\n        variant=\"plain\"\n        items={yearItems}\n        minH=\"{cell-size}\"\n        contentProps={{ minW: \"{select-content-size}\", ...contentProps }}\n        rootProps={{\n          fontSize: \"{select-font-size}\",\n          w: \"{select-root-size}\",\n          ...rootProps,\n        }}\n        {...getYearSelectProps(rest)}\n      />\n    )\n  },\n  [\"select\", \"years\"],\n)()\n\nexport interface CalendarMonthSelectProps extends Select.RootProps {}\n\nexport const CalendarMonthSelect = withContext<\"div\", CalendarMonthSelectProps>(\n  (props) => {\n    const { monthItems, getMonthSelectProps, monthSelectProps, selectProps } =\n      useComponentContext()\n    const { contentProps, rootProps, ...rest } = {\n      ...selectProps,\n      ...monthSelectProps,\n      ...props,\n    }\n\n    return (\n      <Select.Root\n        variant=\"plain\"\n        items={monthItems}\n        minH=\"{cell-size}\"\n        contentProps={{ minW: \"{select-content-size}\", ...contentProps }}\n        rootProps={{\n          fontSize: \"{select-font-size}\",\n          w: \"{select-root-size}\",\n          ...rootProps,\n        }}\n        {...getMonthSelectProps(rest)}\n      />\n    )\n  },\n  [\"select\", \"months\"],\n)()\n\nexport interface CalendarMonthProps\n  extends Omit<HTMLStyledProps<\"table\">, \"children\"> {\n  /**\n   * The day component to use.\n   */\n  day?: ReactNodeOrFunction<{ value: Date }>\n}\n\nexport const CalendarMonth = withContext<\"table\", CalendarMonthProps>(\n  \"table\",\n  \"month\",\n)(undefined, ({ day: dayProp, ...rest }) => {\n  const {\n    day,\n    monthDays,\n    weekdays,\n    dayProps,\n    getMonthProps,\n    getWeekdayProps,\n    monthProps,\n    weekdayProps,\n    weekdaysProps,\n    weekProps,\n    weeksProps,\n  } = useComponentContext()\n\n  dayProp ??= day\n\n  const computedChildren = useMemo(() => {\n    return (\n      <>\n        <styled.thead aria-hidden>\n          <CalendarWeekDays {...weekdaysProps}>\n            {weekdays.map(({ label, value }, index) => (\n              <CalendarWeekday\n                key={index}\n                {...getWeekdayProps({ ...weekdayProps, value })}\n              >\n                {label}\n              </CalendarWeekday>\n            ))}\n          </CalendarWeekDays>\n        </styled.thead>\n\n        <CalendarWeeks {...weeksProps}>\n          {monthDays.map((week, index) => (\n            <CalendarWeek key={index} {...weekProps}>\n              {week.map((value) => (\n                <CalendarDay\n                  key={value.toDateString()}\n                  {...{ ...dayProps, value }}\n                >\n                  {runIfFn(dayProp, { value }) ?? (\n                    <styled.span>{value.getDate()}</styled.span>\n                  )}\n                </CalendarDay>\n              ))}\n            </CalendarWeek>\n          ))}\n        </CalendarWeeks>\n      </>\n    )\n  }, [\n    dayProp,\n    dayProps,\n    getWeekdayProps,\n    monthDays,\n    weekProps,\n    weekdayProps,\n    weekdays,\n    weekdaysProps,\n    weeksProps,\n  ])\n\n  return {\n    ...getMonthProps({ ...monthProps, ...rest }),\n    children: computedChildren,\n  }\n})\n\nconst CalendarWeekDays = withContext(\"tr\", [\"row\", \"weekdays\"])()\n\nconst CalendarWeekday = withContext(\"th\", [\"cell\", \"weekday\"])()\n\nconst CalendarWeeks = withContext(\"tbody\", \"weeks\")()\n\nconst CalendarWeek = withContext(\"tr\", [\"row\", \"week\"])()\n\ninterface CalendarDayProps\n  extends Omit<HTMLStyledProps<\"td\">, \"value\">,\n    UseCalendarDayProps {}\n\nconst CalendarDay = withContext<\"td\", CalendarDayProps>(\"td\", [\"cell\", \"day\"])(\n  undefined,\n  (props) => {\n    const { getDayProps } = useCalendarDay(props)\n\n    return getDayProps()\n  },\n)\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./calendar.style\"\nexport {\n  CalendarControl,\n  CalendarMonth,\n  CalendarMonthSelect,\n  CalendarNavigation,\n  CalendarNextButton,\n  CalendarPrevButton,\n  CalendarPropsContext,\n  CalendarRoot,\n  CalendarYearSelect,\n  useCalendarPropsContext,\n} from \"./calendar\"\nexport type {\n  CalendarControlProps,\n  CalendarMonthProps,\n  CalendarMonthSelectProps,\n  CalendarNavigationProps,\n  CalendarNextButtonProps,\n  CalendarPrevButtonProps,\n  CalendarRootProps,\n  CalendarYearSelectProps,\n} from \"./calendar\"\nexport * as Calendar from \"./namespace\"\nexport * from \"./use-calendar\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export type {\n  CalendarControlProps as ControlProps,\n  CalendarMonthProps as MonthProps,\n  CalendarMonthSelectProps as MonthSelectProps,\n  CalendarNavigationProps as NavigationProps,\n  CalendarNextButtonProps as NextButtonProps,\n  CalendarPrevButtonProps as PrevButtonProps,\n  CalendarRootProps as RootProps,\n  CalendarYearSelectProps as YearSelectProps,\n} from \"./calendar\"\nexport {\n  CalendarControl as Control,\n  CalendarMonth as Month,\n  CalendarMonthSelect as MonthSelect,\n  CalendarNavigation as Navigation,\n  CalendarNextButton as NextButton,\n  CalendarPrevButton as PrevButton,\n  CalendarPropsContext as PropsContext,\n  CalendarRoot as Root,\n  useCalendarPropsContext as usePropsContext,\n  CalendarYearSelect as YearSelect,\n} from \"./calendar\"\nexport type { CalendarFormat as Format, StartDayOfWeek } from \"./use-calendar\"\n"
    },
    {
      "name": "use-calendar.ts",
      "content": "\"use client\"\n\nimport type { FocusEvent, KeyboardEvent } from \"react\"\nimport type {\n  HTMLProps,\n  PropGetter,\n  RequiredPropGetter,\n  Dict,\n} from \"@yamada-ui/react\"\nimport type { Descendant } from \"../../hooks/use-descendants\"\nimport dayjs from \"dayjs\"\nimport { useCallback, useMemo, useRef } from \"react\"\nimport {\n  useSplitProps,\n  ariaAttr,\n  contains,\n  createContext,\n  dataAttr,\n  handlerAll,\n  isArray,\n  isDate,\n  isNumber,\n  isObject,\n  mergeRefs,\n  runKeyAction,\n  useUpdateEffect,\n  visuallyHiddenAttributes,\n} from \"@yamada-ui/react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport { createDescendants } from \"../../hooks/use-descendants\"\nimport { useI18n } from \"../../providers/i18n-provider\"\n\nexport const DEFAULT_HOLIDAYS: Date[] = []\nexport const DEFAULT_WEEKEND_DAYS: number[] = [0, 6]\nexport const DEFAULT_FIRST_DAY_OF_WEEK: StartDayOfWeek = \"sunday\"\nexport const DEFAULT_MAX_DATE: Date = new Date(\"2099-12-31\")\nexport const DEFAULT_MIN_DATE: Date = new Date(\"1900-01-01\")\n\nexport type MaybeDate = Date | Date[] | undefined | { end?: Date; start?: Date }\nexport type MaybeDateValue<\n  Multiple extends boolean = false,\n  Range extends boolean = false,\n> = Range extends true\n  ? { end?: Date; start?: Date }\n  : Multiple extends true\n    ? Date[]\n    : Date | undefined\nexport type StartDayOfWeek = \"monday\" | \"sunday\"\nexport interface CalendarFormat {\n  month?: string\n  weekday?: string\n  year?: string\n}\n\nexport const getStartOfWeek = (\n  date: Date,\n  startDayOfWeek: StartDayOfWeek,\n): Date =>\n  dayjs(date)\n    .subtract(startDayOfWeek === \"monday\" ? 1 : 0, \"day\")\n    .startOf(\"week\")\n    .add(startDayOfWeek === \"monday\" ? 1 : 0, \"day\")\n    .toDate()\n\nexport const getEndOfWeek = (\n  date: Date,\n  startDayOfWeek: StartDayOfWeek,\n): Date =>\n  dayjs(date)\n    .subtract(startDayOfWeek === \"monday\" ? 1 : 0, \"day\")\n    .endOf(\"week\")\n    .add(startDayOfWeek === \"monday\" ? 1 : 0, \"day\")\n    .toDate()\n\nexport const getWeekdays = (\n  locale: string,\n  startDayOfWeek: StartDayOfWeek,\n  format = \"dd\",\n): { label: string; value: number }[] => {\n  let weekdays: { label: string; value: number }[] = []\n\n  const date = getStartOfWeek(new Date(), startDayOfWeek)\n\n  for (let i = 0; i < 7; i += 1) {\n    const label = dayjs(date).locale(locale).format(format)\n    const value = date.getDay()\n\n    weekdays = [...weekdays, { label, value }]\n\n    date.setDate(date.getDate() + 1)\n  }\n\n  return weekdays\n}\n\nexport const getMonthDays = (\n  date: Date,\n  startDayOfWeek: StartDayOfWeek,\n): Date[][] => {\n  const currentMonth = date.getMonth()\n  const startOfMonth = new Date(date.getFullYear(), currentMonth, 1)\n  const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0)\n  const startDate = getStartOfWeek(startOfMonth, startDayOfWeek)\n  const endDate = getEndOfWeek(endOfMonth, startDayOfWeek)\n\n  const weeks: Date[][] = []\n\n  while (startDate <= endDate) {\n    const days: Date[] = []\n\n    for (let i = 0; i < 7; i += 1) {\n      days.push(new Date(startDate))\n\n      startDate.setDate(startDate.getDate() + 1)\n    }\n\n    weeks.push(days)\n  }\n\n  return weeks\n}\n\nexport const isSameYear = (\n  date: Date | undefined,\n  comparison: Date | undefined,\n): boolean =>\n  date instanceof Date &&\n  comparison instanceof Date &&\n  dayjs(date).isSame(comparison, \"year\")\n\nexport const isSameMonth = (\n  date: Date | undefined,\n  comparison: Date | undefined,\n): boolean =>\n  date instanceof Date &&\n  comparison instanceof Date &&\n  dayjs(date).isSame(comparison, \"month\")\n\nexport const isSameDate = (\n  date: Date | undefined,\n  comparison: Date | undefined,\n) =>\n  date instanceof Date &&\n  comparison instanceof Date &&\n  dayjs(date).isSame(comparison, \"date\")\n\nexport const isAfterDate = (value: Date, date: Date | undefined) =>\n  date instanceof Date && dayjs(value).isAfter(date, \"date\")\n\nexport const isBeforeDate = (value: Date, date: Date | undefined) =>\n  date instanceof Date && dayjs(value).isBefore(date, \"date\")\n\nexport const isSameAfterDate = (value: Date, date: Date | undefined) =>\n  date instanceof Date &&\n  (dayjs(date).isSame(value, \"date\") || dayjs(value).isAfter(date, \"date\"))\n\nexport const isSameBeforeDate = (value: Date, date: Date | undefined) =>\n  date instanceof Date &&\n  (dayjs(date).isSame(value, \"date\") || dayjs(value).isBefore(date, \"date\"))\n\nexport const isAfterMonth = (value: Date, date: Date | undefined) =>\n  date instanceof Date && dayjs(value).isAfter(date, \"month\")\n\nexport const isBeforeMonth = (value: Date, date: Date | undefined) =>\n  date instanceof Date && dayjs(value).isBefore(date, \"month\")\n\nexport const isSameAfterMonth = (value: Date, date: Date | undefined) =>\n  date instanceof Date &&\n  (dayjs(date).isSame(value, \"month\") || dayjs(value).isAfter(date, \"month\"))\n\nexport const isSameBeforeMonth = (value: Date, date: Date | undefined) =>\n  date instanceof Date &&\n  (dayjs(date).isSame(value, \"month\") || dayjs(value).isBefore(date, \"month\"))\n\nexport const isAfterYear = (value: Date, date: Date | undefined) =>\n  date instanceof Date && dayjs(value).isAfter(date, \"year\")\n\nexport const isBeforeYear = (value: Date, date: Date | undefined) =>\n  date instanceof Date && dayjs(value).isBefore(date, \"year\")\n\nexport const isSameAfterYear = (value: Date, date: Date | undefined) =>\n  date instanceof Date &&\n  (dayjs(date).isSame(value, \"year\") || dayjs(value).isAfter(date, \"year\"))\n\nexport const isSameBeforeYear = (value: Date, date: Date | undefined) =>\n  date instanceof Date &&\n  (dayjs(date).isSame(value, \"year\") || dayjs(value).isBefore(date, \"year\"))\n\nexport const isIncludeDates = (comparison: Date, dates: Date[]) =>\n  dates.some((date) => dayjs(date).isSame(comparison, \"date\"))\n\nexport const isInRange = (date: Date, minDate?: Date, maxDate?: Date) => {\n  const hasMinDate = minDate instanceof Date\n  const hasMaxDate = maxDate instanceof Date\n\n  if (!hasMaxDate && !hasMinDate) return false\n\n  const minInRange = hasMinDate ? isAfterDate(date, minDate) : false\n  const maxInRange = hasMaxDate ? isBeforeDate(date, maxDate) : false\n\n  return maxInRange && minInRange\n}\n\nexport const sortDates = (dates: Date[], type: \"asc\" | \"desc\" = \"asc\") => {\n  if (type === \"asc\") {\n    return dates.sort((a, b) => (dayjs(a).isAfter(b, \"date\") ? 1 : -1))\n  } else {\n    return dates.sort((a, b) => (dayjs(a).isBefore(b, \"date\") ? 1 : -1))\n  }\n}\n\nexport const updateMaybeDateValue =\n  (value: Date, max?: number) =>\n  (prev: MaybeDate): MaybeDate => {\n    if (isArray(prev)) {\n      if (isIncludeDates(value, prev)) {\n        return prev.filter((prevValue) => !isSameDate(prevValue, value))\n      } else if (!isNumber(max) || prev.length < max) {\n        return [...prev, value]\n      } else {\n        return prev\n      }\n    } else if (isObject(prev) && !isDate(prev)) {\n      const { end, start } = prev\n\n      if ((start && end) || !start) {\n        return { end: undefined, start: value }\n      } else {\n        if (isSameDate(start, value)) {\n          return { end: undefined, start: undefined }\n        } else if (isBeforeDate(value, start)) {\n          return { end: start, start: value }\n        } else {\n          return { end: value, start }\n        }\n      }\n    } else {\n      if (isSameDate(prev, value)) {\n        return undefined\n      } else {\n        return value\n      }\n    }\n  }\n\nexport const getAdjustedMonth = (value: MaybeDate, month: Date) => {\n  if (isDate(value)) {\n    if (!isSameMonth(value, month)) month = dayjs(value).set(\"date\", 1).toDate()\n  } else if (isArray(value)) {\n    const lastValue = value.at(-1)\n\n    if (lastValue && !isSameMonth(lastValue, month))\n      month = dayjs(lastValue).set(\"date\", 1).toDate()\n  } else if (isObject(value)) {\n    if (value.end) {\n      month = dayjs(value.end).set(\"date\", 1).toDate()\n    } else if (value.start) {\n      month = dayjs(value.start).set(\"date\", 1).toDate()\n    }\n  }\n\n  return month\n}\n\nconst {\n  DescendantsContext: CalendarDescendantsContext,\n  useDescendant: useCalendarDescendant,\n  useDescendants: useCalendarDescendants,\n} = createDescendants<HTMLTableCellElement>()\n\nexport {\n  CalendarDescendantsContext,\n  useCalendarDescendant,\n  useCalendarDescendants,\n}\n\ninterface CalendarContext\n  extends Omit<\n    UseCalendarReturn,\n    | \"descendants\"\n    | \"getMonthProps\"\n    | \"getMonthSelectProps\"\n    | \"getNavigationProps\"\n    | \"getNextButtonProps\"\n    | \"getPrevButtonProps\"\n    | \"getRootProps\"\n    | \"getStatusProps\"\n    | \"getWeekdayProps\"\n    | \"getYearSelectProps\"\n    | \"monthDays\"\n    | \"monthItems\"\n    | \"weekdays\"\n    | \"yearItems\"\n  > {}\n\nconst [CalendarContext, useCalendarContext] = createContext<CalendarContext>({\n  name: \"CalendarContext\",\n})\n\nexport { CalendarContext, useCalendarContext }\n\nexport interface UseCalendarProps<\n  Multiple extends boolean = false,\n  Range extends boolean = false,\n> extends Omit<HTMLProps, \"defaultValue\" | \"onChange\"> {\n  /**\n   * The initial month of the calendar.\n   *\n   * @default new Date()\n   */\n  defaultMonth?: Date\n  /**\n   * The initial value of the calendar.\n   */\n  defaultValue?: MaybeDateValue<Multiple, Range>\n  /**\n   * If `true`, disables the calendar.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * Callback function to determine whether the day should be disabled.\n   */\n  excludeDate?: (date: Date) => boolean\n  /**\n   * The format used for conversion.\n   * Check the docs to see the format of possible modifiers you can pass.\n   *\n   * @see https://day.js.org/docs/en/display/format#list-of-localized-formats\n   */\n  format?: CalendarFormat\n  /**\n   * Define holidays.\n   */\n  holidays?: Date[]\n  /**\n   * The locale of the calendar.\n   * Check the docs to see the locale of possible modifiers you can pass.\n   *\n   * @see https://day.js.org/docs/en/i18n/instance-locale\n   * @default 'en-US'\n   */\n  locale?: string\n  /**\n   * The maximum selectable value.\n   */\n  max?: number\n  /**\n   * The maximum possible date.\n   *\n   * @default new Date(2099, 11, 31)\n   */\n  maxDate?: Date\n  /**\n   * The minimum possible date.\n   *\n   * @default new Date(1900, 0, 1)\n   */\n  minDate?: Date\n  /**\n   * The month of the calendar.\n   */\n  month?: Date\n  /**\n   * If `true`, the calendar will be multiple.\n   *\n   * @default false\n   */\n  multiple?: Multiple\n  /**\n   * If `true`, enables date range selection.\n   *\n   * @default false\n   */\n  range?: Range\n  /**\n   * Define the start day of the week.\n   *\n   * @default 'monday'\n   */\n  startDayOfWeek?: StartDayOfWeek\n  /**\n   * If `true`, highlight today.\n   *\n   * @default true\n   */\n  today?: boolean\n  /**\n   * The value of the calendar.\n   */\n  value?: MaybeDateValue<Multiple, Range>\n  /**\n   * Define weekend days.\n   *\n   * @default [0, 6]\n   */\n  weekendDays?: number[]\n  /**\n   * The callback invoked when value state changes.\n   */\n  onChange?: (value: MaybeDateValue<Multiple, Range>) => void\n  /**\n   * The callback invoked when month state changes.\n   */\n  onChangeMonth?: (value: Date) => void\n}\n\nexport const useCalendar = <\n  Multiple extends boolean = false,\n  Range extends boolean = false,\n>({\n  defaultMonth = new Date(),\n  multiple = false as Multiple,\n  range = false as Range,\n  defaultValue = (range\n    ? { end: undefined, start: undefined }\n    : multiple\n      ? []\n      : undefined) as MaybeDateValue<Multiple, Range>,\n  disabled = false,\n  excludeDate,\n  format: formatProp,\n  holidays = DEFAULT_HOLIDAYS,\n  locale: localeProp,\n  max,\n  maxDate = DEFAULT_MAX_DATE,\n  minDate = DEFAULT_MIN_DATE,\n  month: monthProp,\n  startDayOfWeek = DEFAULT_FIRST_DAY_OF_WEEK,\n  today = true,\n  value: valueProp,\n  weekendDays = DEFAULT_WEEKEND_DAYS,\n  onChange: onChangeProp,\n  onChangeMonth: onChangeMonthProp,\n  ...rest\n}: UseCalendarProps<Multiple, Range> = {}) => {\n  if (dayjs(minDate).isAfter(dayjs(maxDate))) maxDate = minDate\n\n  const { locale: defaultLocale, t } = useI18n(\"calendar\")\n  const format = useMemo(\n    () => ({\n      month: t(\"MMM\"),\n      weekday: t(\"dd\"),\n      year: t(\"YYYY\"),\n      ...formatProp,\n    }),\n    [formatProp, t],\n  )\n  const locale = localeProp ?? defaultLocale\n  const descendants = useCalendarDescendants()\n  const monthRef = useRef<HTMLTableElement>(null)\n  const [value, setValue] = useControllableState({\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n  const [month, setMonth] = useControllableState({\n    defaultValue: () => {\n      if (dayjs(minDate).isAfter(dayjs(defaultMonth)))\n        defaultMonth = dayjs(minDate).set(\"date\", 1).toDate()\n\n      if (valueProp) {\n        defaultMonth = getAdjustedMonth(valueProp, defaultMonth)\n      } else if (defaultValue) {\n        defaultMonth = getAdjustedMonth(defaultValue, defaultMonth)\n      }\n\n      return defaultMonth\n    },\n    value: monthProp,\n    onChange: onChangeMonthProp,\n  })\n  const { endOfMonth, startOfMonth } = useMemo(() => {\n    const startOfMonth = dayjs(month).startOf(\"month\").toDate()\n    const endOfMonth = dayjs(month).endOf(\"month\").toDate()\n\n    return { endOfMonth, startOfMonth }\n  }, [month])\n  const weekdays = useMemo(\n    () => getWeekdays(locale, startDayOfWeek, format.weekday),\n    [startDayOfWeek, locale, format],\n  )\n  const monthDays = useMemo(\n    () => getMonthDays(month, startDayOfWeek),\n    [startDayOfWeek, month],\n  )\n  const yearItems = useMemo(() => {\n    const minYear = dayjs(minDate).year()\n    const maxYear = dayjs(maxDate).year()\n    const yearItems: { label: string; value: string }[] = []\n\n    for (let year = minYear; year <= maxYear; year++) {\n      const label = dayjs().locale(locale).set(\"year\", year).format(format.year)\n      const value = year.toString()\n\n      yearItems.push({ label, value })\n    }\n\n    return yearItems\n  }, [format, locale, maxDate, minDate])\n  const monthItems = useMemo(() => {\n    const monthItems: { label: string; value: string }[] = []\n    const date = dayjs(month).toDate()\n\n    for (let month = 0; month < 12; month++) {\n      date.setMonth(month)\n\n      if (isAfterMonth(date, maxDate)) continue\n      if (isBeforeMonth(date, minDate)) continue\n\n      const label = dayjs()\n        .locale(locale)\n        .set(\"month\", month)\n        .format(format.month)\n      const value = month.toString()\n\n      monthItems.push({ label, value })\n    }\n\n    return monthItems\n  }, [month, maxDate, minDate, locale, format])\n\n  const onChange = useCallback(\n    (value: Date) => {\n      if (isBeforeDate(value, minDate)) return\n      if (isAfterDate(value, maxDate)) return\n\n      setValue(\n        (prev) =>\n          updateMaybeDateValue(value, max)(prev) as MaybeDateValue<\n            Multiple,\n            Range\n          >,\n      )\n    },\n    [max, maxDate, minDate, setValue],\n  )\n\n  const onMonthChange = useCallback(\n    (month: Date) => {\n      if (isAfterMonth(month, maxDate)) {\n        setMonth(dayjs(maxDate).set(\"date\", 1).toDate())\n      } else if (isBeforeMonth(month, minDate)) {\n        setMonth(dayjs(minDate).set(\"date\", 1).toDate())\n      } else {\n        setMonth((prev) => {\n          if (isSameMonth(prev, month)) return prev\n\n          return month\n        })\n      }\n    },\n    [maxDate, minDate, setMonth],\n  )\n\n  const onPrevMonth = useCallback(() => {\n    setMonth((prev) => {\n      if (isSameMonth(prev, minDate)) return prev\n\n      return dayjs(prev).subtract(1, \"month\").toDate()\n    })\n  }, [minDate, setMonth])\n\n  const onNextMonth = useCallback(() => {\n    setMonth((prev) => {\n      if (isSameMonth(prev, maxDate)) return prev\n\n      return dayjs(prev).add(1, \"month\").toDate()\n    })\n  }, [maxDate, setMonth])\n\n  const onFocus = useCallback(() => {\n    let index: null | number = null\n    let descendant: Descendant<HTMLTableCellElement> | undefined\n\n    if (value) {\n      if (isDate(value)) {\n        if (isSameMonth(month, new Date())) index = new Date().getDate() - 1\n      } else if (isArray(value)) {\n        const firstValue = value[0]\n\n        if (firstValue && isSameMonth(month, firstValue))\n          index = firstValue.getDate() - 1\n      } else if (isObject(value)) {\n        if (value.start && isSameMonth(month, value.start)) {\n          index = value.start.getDate() - 1\n        } else if (value.end && isSameMonth(month, value.end)) {\n          index = value.end.getDate() - 1\n        }\n      }\n    } else if (isSameMonth(month, new Date())) {\n      index = new Date().getDate() - 1\n    }\n\n    descendant = descendants.value(index)\n\n    if (!descendant) descendant = descendants.enabledFirstValue()\n\n    if (!descendant) return\n\n    descendant.node.focus()\n    descendant.node.tabIndex = 0\n\n    if (monthRef.current) monthRef.current.tabIndex = -1\n  }, [descendants, month, value])\n\n  const onBlur = useCallback((ev: FocusEvent<HTMLTableElement>) => {\n    if (contains(monthRef.current, ev.relatedTarget)) return\n\n    if (monthRef.current) monthRef.current.tabIndex = 0\n  }, [])\n\n  useUpdateEffect(() => {\n    setMonth((prev) => getAdjustedMonth(value, prev))\n  }, [value])\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"data-disabled\": dataAttr(disabled),\n      ...rest,\n      ...props,\n    }),\n    [disabled, rest],\n  )\n\n  const getNavigationProps: PropGetter<\"nav\"> = useCallback(\n    (props = {}) => ({ \"data-disabled\": dataAttr(disabled), ...props }),\n    [disabled],\n  )\n\n  const getYearSelectProps: PropGetter<\n    \"div\",\n    { value?: string; onChange?: (value: string) => void },\n    { value?: string; onChange?: (value: string) => void }\n  > = useCallback(\n    (props = {}) => ({\n      \"aria-label\": t(\"Choose the year\"),\n      disabled,\n      value: dayjs(month).get(\"year\").toString(),\n      ...props,\n      onChange: handlerAll(props.onChange, (value) =>\n        onMonthChange(dayjs(month).set(\"year\", parseInt(value)).toDate()),\n      ),\n    }),\n    [disabled, month, onMonthChange, t],\n  )\n\n  const getMonthSelectProps: PropGetter<\n    \"div\",\n    { value?: string; onChange?: (value: string) => void },\n    { value?: string; onChange?: (value: string) => void }\n  > = useCallback(\n    (props = {}) => ({\n      \"aria-label\": t(\"Choose the month\"),\n      disabled,\n      value: dayjs(month).get(\"month\").toString(),\n      ...props,\n      onChange: handlerAll(props.onChange, (value) =>\n        onMonthChange(dayjs(month).set(\"month\", parseInt(value)).toDate()),\n      ),\n    }),\n    [disabled, month, onMonthChange, t],\n  )\n\n  const getStatusProps: PropGetter = useCallback(\n    (props = {}) => ({\n      style: visuallyHiddenAttributes.style,\n      \"aria-live\": \"polite\",\n      children: dayjs(month).locale(locale).format(t(\"MMMM YYYY\")),\n      role: \"status\",\n      ...props,\n    }),\n    [locale, month, t],\n  )\n\n  const getMonthProps: PropGetter<\"table\"> = useCallback(\n    ({ ref, ...props } = {}) => ({\n      ref: mergeRefs(ref, monthRef),\n      \"aria-label\": dayjs(month).locale(locale).format(t(\"MMMM YYYY\")),\n      \"aria-multiselectable\": ariaAttr(multiple || range),\n      \"data-disabled\": dataAttr(disabled),\n      role: \"grid\",\n      tabIndex: disabled ? -1 : 0,\n      ...props,\n      onBlur: handlerAll(props.onBlur, onBlur),\n      onFocus: handlerAll(props.onFocus, onFocus),\n    }),\n    [disabled, locale, month, multiple, onBlur, onFocus, range, t],\n  )\n\n  const getWeekdayProps: RequiredPropGetter<\"th\", { value: number }> =\n    useCallback(\n      ({ value, ...props }) => ({\n        \"data-disabled\": dataAttr(disabled),\n        \"data-value\": value.toString(),\n        abbr: dayjs().locale(locale).set(\"day\", value).format(\"dddd\"),\n        ...props,\n      }),\n      [disabled, locale],\n    )\n\n  const getButtonProps: PropGetter<\"button\"> = useCallback(\n    (props) => ({\n      type: \"button\",\n      \"data-disabled\": dataAttr(disabled),\n      ...props,\n    }),\n    [disabled],\n  )\n\n  const getPrevButtonProps: PropGetter<\"button\"> = useCallback(\n    (props = {}) =>\n      getButtonProps({\n        \"aria-label\": t(\"Go to the previous month\"),\n        disabled: isSameBeforeMonth(month, minDate),\n        ...props,\n        onClick: handlerAll(props.onClick, onPrevMonth),\n      }),\n    [getButtonProps, minDate, month, onPrevMonth, t],\n  )\n\n  const getNextButtonProps: PropGetter<\"button\"> = useCallback(\n    (props = {}) =>\n      getButtonProps({\n        \"aria-label\": t(\"Go to the next month\"),\n        disabled: isSameAfterMonth(month, maxDate),\n        ...props,\n        onClick: handlerAll(props.onClick, onNextMonth),\n      }),\n    [getButtonProps, maxDate, month, onNextMonth, t],\n  )\n\n  return {\n    descendants,\n    disabled,\n    endOfMonth,\n    excludeDate,\n    holidays,\n    locale,\n    max,\n    maxDate,\n    minDate,\n    month,\n    monthDays,\n    monthItems,\n    multiple,\n    range,\n    startDayOfWeek,\n    startOfMonth,\n    today,\n    value,\n    weekdays,\n    weekendDays,\n    yearItems,\n    getMonthProps,\n    getMonthSelectProps,\n    getNavigationProps,\n    getNextButtonProps,\n    getPrevButtonProps,\n    getRootProps,\n    getStatusProps,\n    getWeekdayProps,\n    getYearSelectProps,\n    onChange,\n    onMonthChange,\n    onNextMonth,\n    onPrevMonth,\n  }\n}\n\nexport type UseCalendarReturn = ReturnType<typeof useCalendar>\n\nexport interface UseCalendarDayProps extends Omit<HTMLProps<\"td\">, \"value\"> {\n  value: Date\n}\n\nexport const useCalendarDay = ({ value, ...rest }: UseCalendarDayProps) => {\n  const { t } = useI18n(\"calendar\")\n  const {\n    disabled: rootDisabled,\n    excludeDate,\n    holidays,\n    locale,\n    max,\n    maxDate,\n    minDate,\n    month,\n    startDayOfWeek,\n    today: highlightToday,\n    value: selectedValue,\n    weekendDays,\n    onChange,\n    onMonthChange,\n    onNextMonth,\n    onPrevMonth,\n  } = useCalendarContext()\n  const cellRef = useRef<HTMLTableCellElement>(null)\n  const outside = useMemo(() => !isSameMonth(month, value), [month, value])\n  const holiday = useMemo(\n    () => holidays.some((holiday) => isSameDate(holiday, value)),\n    [holidays, value],\n  )\n  const weekend = useMemo(\n    () => weekendDays.includes(value.getDay()),\n    [weekendDays, value],\n  )\n  const today = useMemo(\n    () => highlightToday && isSameDate(value, new Date()),\n    [highlightToday, value],\n  )\n  const selected = useMemo(() => {\n    if (isDate(selectedValue)) {\n      return isSameDate(selectedValue, value)\n    } else if (isArray(selectedValue)) {\n      return selectedValue.some((selectedValue) =>\n        isSameDate(selectedValue, value),\n      )\n    } else if (isObject(selectedValue)) {\n      return (\n        isSameDate(selectedValue.start, value) ||\n        isSameDate(selectedValue.end, value)\n      )\n    }\n  }, [selectedValue, value])\n  const disabled = useMemo(() => {\n    if (rootDisabled) return true\n    if (isAfterDate(value, maxDate)) return true\n    if (isBeforeDate(value, minDate)) return true\n    if (excludeDate?.(value)) return true\n    if (\n      isArray(selectedValue) &&\n      isNumber(max) &&\n      selectedValue.length >= max &&\n      !isIncludeDates(value, selectedValue as Date[])\n    )\n      return true\n\n    return false\n  }, [excludeDate, max, maxDate, minDate, rootDisabled, selectedValue, value])\n  const between = useMemo(() => {\n    if (isDate(selectedValue) || isArray(selectedValue)) return false\n\n    return isInRange(value, selectedValue?.start, selectedValue?.end)\n  }, [selectedValue, value])\n  const startValue = useMemo(() => {\n    if (isDate(selectedValue) || isArray(selectedValue)) return false\n\n    const { end, start } = selectedValue ?? {}\n\n    return start && end && isSameDate(value, start)\n  }, [selectedValue, value])\n  const endValue = useMemo(() => {\n    if (isDate(selectedValue) || isArray(selectedValue)) return false\n\n    const { end, start } = selectedValue ?? {}\n\n    return start && end && isSameDate(value, end)\n  }, [selectedValue, value])\n  const { descendants, register } = useCalendarDescendant({\n    disabled: disabled,\n  })\n\n  const onFocusDescendant = useCallback(\n    (descendant?: Descendant<HTMLTableCellElement>) => {\n      if (!descendant) return\n\n      descendant.node.focus()\n      descendant.node.tabIndex = 0\n    },\n    [],\n  )\n\n  const onBlur = useCallback(() => {\n    if (cellRef.current) cellRef.current.tabIndex = -1\n  }, [])\n\n  const onClick = useCallback(() => {\n    if (disabled) return\n\n    onChange(value)\n  }, [disabled, onChange, value])\n\n  const onPrevDate = useCallback(() => {\n    const descendant = descendants.enabledPrevValue(cellRef.current, false)\n\n    if (descendant) {\n      onFocusDescendant(descendant)\n    } else if (!isSameBeforeDate(value, minDate)) {\n      onPrevMonth()\n\n      setTimeout(() => onFocusDescendant(descendants.enabledLastValue()))\n    }\n  }, [descendants, minDate, onFocusDescendant, onPrevMonth, value])\n\n  const onNextDate = useCallback(() => {\n    const descendant = descendants.enabledNextValue(cellRef.current, false)\n\n    if (descendant) {\n      onFocusDescendant(descendant)\n    } else if (!isSameAfterDate(value, maxDate)) {\n      onNextMonth()\n\n      setTimeout(() => onFocusDescendant(descendants.enabledFirstValue()))\n    }\n  }, [descendants, maxDate, onFocusDescendant, onNextMonth, value])\n\n  const onPrevTraverseDate = useCallback(\n    (date: Date) => {\n      onMonthChange(dayjs(date).set(\"date\", 1).toDate())\n\n      setTimeout(() => {\n        const descendant = isBeforeDate(date, minDate)\n          ? descendants.enabledFirstValue()\n          : descendants.value(date.getDate() - 1)\n\n        if (!descendant) return\n\n        if (descendant.disabled) {\n          onFocusDescendant(descendants.enabledNextValue(descendant, false))\n        } else {\n          onFocusDescendant(descendant)\n        }\n      })\n    },\n    [descendants, minDate, onFocusDescendant, onMonthChange],\n  )\n\n  const onNextTraverseDate = useCallback(\n    (date: Date) => {\n      onMonthChange(dayjs(date).set(\"date\", 1).toDate())\n\n      setTimeout(() => {\n        const descendant = isAfterDate(date, maxDate)\n          ? descendants.enabledLastValue()\n          : descendants.value(date.getDate() - 1)\n\n        if (!descendant) return\n\n        if (descendant.disabled) {\n          onFocusDescendant(descendants.enabledPrevValue(descendant, false))\n        } else {\n          onFocusDescendant(descendant)\n        }\n      })\n    },\n    [descendants, maxDate, onFocusDescendant, onMonthChange],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLTableCellElement>) => {\n      runKeyAction(ev, {\n        ArrowDown: () =>\n          onNextTraverseDate(dayjs(value).add(1, \"week\").toDate()),\n        ArrowLeft: onPrevDate,\n        ArrowRight: onNextDate,\n        ArrowUp: () =>\n          onPrevTraverseDate(dayjs(value).subtract(1, \"week\").toDate()),\n        End: () => onNextTraverseDate(getEndOfWeek(value, startDayOfWeek)),\n        Enter: onClick,\n        Home: () => onPrevTraverseDate(getStartOfWeek(value, startDayOfWeek)),\n        PageDown: (ev) => {\n          if (ev.shiftKey) {\n            onNextTraverseDate(dayjs(value).add(1, \"year\").toDate())\n          } else {\n            onNextTraverseDate(dayjs(value).add(1, \"month\").toDate())\n          }\n        },\n        PageUp: (ev) => {\n          if (ev.shiftKey) {\n            onPrevTraverseDate(dayjs(value).subtract(1, \"year\").toDate())\n          } else {\n            onPrevTraverseDate(dayjs(value).subtract(1, \"month\").toDate())\n          }\n        },\n        Space: onClick,\n      })\n    },\n    [\n      onClick,\n      onNextDate,\n      onNextTraverseDate,\n      onPrevDate,\n      onPrevTraverseDate,\n      startDayOfWeek,\n      value,\n    ],\n  )\n\n  const getDayProps: PropGetter<\"td\"> = useCallback(\n    ({ ref, \"aria-label\": ariaLabel, ...props } = {}) => {\n      if (!ariaLabel) {\n        ariaLabel = dayjs(value).locale(locale).format(t(\"dddd, MMMM DD, YYYY\"))\n\n        if (today) ariaLabel = `${t(\"Today\")}, ${ariaLabel}`\n      }\n\n      return {\n        \"aria-disabled\": ariaAttr(disabled),\n        \"aria-label\": ariaLabel,\n        \"aria-selected\": ariaAttr(selected),\n        \"data-between\": dataAttr(between),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-end\": dataAttr(endValue),\n        \"data-holiday\": dataAttr(holiday),\n        \"data-outside\": dataAttr(outside),\n        \"data-selected\": dataAttr(selected),\n        \"data-start\": dataAttr(startValue),\n        \"data-today\": dataAttr(today),\n        \"data-value\": dayjs(value).format(\"YYYY-MM-DD\"),\n        \"data-weekend\": dataAttr(weekend),\n        tabIndex: -1,\n        ...rest,\n        ...props,\n        ref: mergeRefs(ref, cellRef, outside ? null : register),\n        onBlur: handlerAll(props.onBlur, onBlur),\n        onClick: handlerAll(props.onClick, onClick),\n        onFocus: handlerAll(props.onFocus, (ev) => ev.preventDefault()),\n        onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n      }\n    },\n    [\n      between,\n      disabled,\n      endValue,\n      holiday,\n      locale,\n      onBlur,\n      onClick,\n      onKeyDown,\n      outside,\n      register,\n      rest,\n      selected,\n      startValue,\n      t,\n      today,\n      value,\n      weekend,\n    ],\n  )\n\n  return { outside, getDayProps }\n}\n\nexport type UseCalendarDayReturn = ReturnType<typeof useCalendarDay>\n\nconst calendarProps: (keyof UseCalendarProps)[] = [\n  \"defaultMonth\",\n  \"defaultValue\",\n  \"disabled\",\n  \"excludeDate\",\n  \"format\",\n  \"holidays\",\n  \"locale\",\n  \"max\",\n  \"maxDate\",\n  \"minDate\",\n  \"month\",\n  \"range\",\n  \"startDayOfWeek\",\n  \"today\",\n  \"value\",\n  \"weekendDays\",\n  \"onChange\",\n  \"onChangeMonth\",\n]\n\nexport const useCalendarProps = <\n  Y extends boolean = false,\n  M extends boolean = false,\n  D extends Dict = Dict,\n  H extends keyof UseCalendarProps<Y, M> = keyof UseCalendarProps<Y, M>,\n>(\n  props: D,\n  omitKeys?: H[],\n) => {\n  return useSplitProps(\n    props,\n    calendarProps.filter((key) => !omitKeys?.includes(key as H)),\n  ) as unknown as [\n    keyof UseCalendarProps<Y, M> extends H\n      ? UseCalendarProps<Y, M>\n      : Omit<UseCalendarProps<Y, M>, H>,\n    Omit<\n      M,\n      keyof UseCalendarProps<Y, M> extends H\n        ? keyof UseCalendarProps<Y, M>\n        : Exclude<keyof UseCalendarProps<Y, M>, H>\n    >,\n  ]\n}\n"
    }
  ]
}
