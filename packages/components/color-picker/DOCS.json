{
  "AlphaSlider": {
    "color": {
      "type": "string",
      "defaultValue": "#ffffff",
      "description": "The color used for the slider.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultValue": {
      "type": "number",
      "description": "The initial value of the slider.",
      "required": false
    },
    "focusThumbOnChange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `false`, the slider handle will not capture focus when value changes.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLUIProps<\"input\">",
      "description": "Props for slider input element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "max": {
      "type": "number",
      "description": "The maximum allowed value of the slider. Cannot be less than min.",
      "required": false
    },
    "min": {
      "type": "number",
      "description": "The minimum allowed value of the slider. Cannot be greater than max.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name attribute of the hidden `input` field.\nThis is particularly useful in forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: number) => void",
      "description": "Function called whenever the slider value changes.",
      "required": false
    },
    "onChangeEnd": {
      "type": "(value: number) => void",
      "description": "Function called when the user is done selecting a new value.",
      "required": false
    },
    "onChangeStart": {
      "type": "(value: number) => void",
      "description": "Function called when the user starts selecting a new value.",
      "required": false
    },
    "overlays": {
      "type": "HTMLUIProps[]",
      "description": "The overlay used for the slider.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the AlphaSlider.",
      "required": false
    },
    "step": {
      "type": "number",
      "defaultValue": "1",
      "description": "The step in which increments or decrements have to be made.",
      "required": false
    },
    "thumbColor": {
      "type": "UIValue<\"border\" | ({} & string) | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | \"amber.950\" | ... 318 more ... | Background<...>>",
      "description": "The CSS `background` property. Used in `background` of thumb element.",
      "required": false
    },
    "thumbProps": {
      "type": "HTMLUIProps",
      "description": "Props for slider thumb element.",
      "required": false
    },
    "trackProps": {
      "type": "HTMLUIProps",
      "description": "Props for slider track element.",
      "required": false
    },
    "value": {
      "type": "number",
      "description": "The value of the slider.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the AlphaSlider.",
      "required": false
    },
    "withShadow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the slider has an inner `box-shadow`.",
      "required": false
    }
  },
  "ColorPicker": {
    "allowInput": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, allows input.",
      "required": false
    },
    "alphaSliderProps": {
      "type": "Omit<AlphaSliderProps, \"defaultValue\" | \"value\">",
      "description": "Props for the alpha slider component.",
      "required": false
    },
    "alphaSliderRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLInputElement | null) => void)\n  | MutableRefObject<HTMLInputElement | null>",
      "description": "Ref for the alpha slider component.",
      "required": false
    },
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "description": "The animation of the popover.",
      "required": false
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "'clippingParents'",
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier.",
      "required": false
    },
    "channelProps": {
      "type": "Omit<ColorSelectorChannelProps, \"channelLabel\">",
      "description": "Props for the chancel component.",
      "required": false
    },
    "channelsProps": {
      "type": "ColorSelectorChannelsProps",
      "description": "Props for the channels component.",
      "required": false
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to close.",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out.",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you hit the `Esc` key.",
      "required": false
    },
    "closeOnSelectSwatch": {
      "type": "boolean",
      "description": "If `true`, the color swatch will be closed when value is selected.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "colorSelectorColorScheme": {
      "type": "ThemeColorScheme",
      "description": "ColorScheme for the color selector component.",
      "required": false
    },
    "colorSelectorProps": {
      "type": "ColorSelectorProps",
      "description": "Props for color selector component.",
      "required": false
    },
    "colorSelectorSize": {
      "type": "UIValue<\"lg\" | \"md\" | \"sm\" | ({} & string) | \"full\">",
      "description": "Size for the color selector component.",
      "required": false
    },
    "colorSelectorVariant": {
      "type": "UIValue<{} & string>",
      "description": "Variant for the color selector component.",
      "required": false
    },
    "containerProps": {
      "type": "Omit<HTMLUIProps, \"children\">",
      "description": "Props for color picker container element.",
      "required": false
    },
    "defaultColor": {
      "type": "string",
      "description": "The initial value of the color selector.",
      "required": false
    },
    "defaultIsOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be initially opened.",
      "required": false
    },
    "defaultValue": {
      "type": "string",
      "description": "The initial value of the color selector.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "The animation duration.",
      "required": false
    },
    "errorBorderColor": {
      "type": "string",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { resize?: boolean | undefined; scroll?: boolean | undefined }",
      "defaultValue": true,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window.",
      "required": false
    },
    "eyeDropperProps": {
      "type": "ColorPickerEyeDropperProps",
      "description": "Props for color eye dropper component.",
      "required": false
    },
    "fallbackValue": {
      "type": "string",
      "description": "The fallback value returned when color determination fails.",
      "required": false
    },
    "fieldProps": {
      "type": "Omit<ColorPickerFieldProps, \"children\" | \"inputProps\">",
      "description": "Props for color picker field element.",
      "required": false
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area.",
      "required": false
    },
    "focusBorderColor": {
      "type": "string",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "format": {
      "type": "ColorFormat",
      "defaultValue": "hexa",
      "description": "Color format. For example, `hex`, `rgba`, etc.",
      "required": false
    },
    "formatInput": {
      "type": "(value: string) => string",
      "description": "A callback function to format the input entered.",
      "required": false
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.",
      "required": false
    },
    "hueSliderProps": {
      "type": "Omit<HueSliderProps, \"defaultValue\" | \"value\">",
      "description": "Props for the hue slider component.",
      "required": false
    },
    "hueSliderRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLInputElement | null) => void)\n  | MutableRefObject<HTMLInputElement | null>",
      "description": "Ref for the hue slider component.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLUIProps<\"input\">",
      "description": "Props for color picker input element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open.",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be opened.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.",
      "required": false
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns.",
      "required": false
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "required": false,
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "offset": {
      "type": "[number, number]",
      "description": "The main and cross-axis offset to displace popper element from its reference element.",
      "required": false
    },
    "onChange": {
      "type": "(value: string) => void",
      "description": "Function called whenever the color selector value changes.",
      "required": false
    },
    "onChangeEnd": {
      "type": "(value: string) => void",
      "description": "Function called when the user is done selecting a new value.",
      "required": false
    },
    "onChangeStart": {
      "type": "(value: string) => void",
      "description": "Function called when the user starts selecting a new value.",
      "required": false
    },
    "onClose": {
      "type": "() => void",
      "description": "Callback fired when the popover closes.",
      "required": false
    },
    "onOpen": {
      "type": "() => void",
      "description": "Callback fired when the popover opens.",
      "required": false
    },
    "onSwatchClick": {
      "type": "(value: string) => void",
      "description": "Function called whenever the color swatch click.",
      "required": false
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to open.",
      "required": false
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "description": "The placement of the popper relative to its reference.",
      "required": false
    },
    "portalProps": {
      "type": "Omit<PortalProps, \"children\">",
      "defaultValue": "'{ isDisabled: true }'",
      "description": "Props to be forwarded to the portal component.",
      "required": false
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area.",
      "required": false
    },
    "saturationSliderProps": {
      "type": "Omit<SaturationSliderProps, \"defaultValue\" | \"value\">",
      "description": "Props for the saturation slider component.",
      "required": false
    },
    "saturationSliderRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLInputElement | null) => void)\n  | MutableRefObject<HTMLInputElement | null>",
      "description": "Ref for the saturation slider component.",
      "required": false
    },
    "size": {
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the ColorPicker.",
      "required": false
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "'absolute'",
      "description": "The CSS positioning strategy to use.",
      "required": false
    },
    "swatches": {
      "type": "string[]",
      "description": "An array of colors in one of the supported formats.\nUsed to render swatches list below the color selector.",
      "required": false
    },
    "swatchesColumns": {
      "type": "UIValue<number>",
      "defaultValue": "7",
      "description": "Number of swatches grid columns.",
      "required": false
    },
    "swatchesLabel": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The swatches label to use.",
      "required": false
    },
    "swatchesProps": {
      "type": "ColorSelectorSwatchesProps",
      "description": "Props for the swatches component.",
      "required": false
    },
    "swatchProps": {
      "type": "ColorPickerSwatchProps",
      "description": "Props for color swatch component.",
      "required": false
    },
    "value": {
      "type": "string",
      "description": "The value of the color selector.",
      "required": false
    },
    "variant": {
      "type": "\"filled\" | \"flushed\" | \"outline\" | \"unstyled\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the ColorPicker.",
      "required": false
    },
    "withChannel": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the channels component.",
      "required": false
    },
    "withColorSelectorEyeDropper": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true` display the eye dropper component.",
      "required": false
    },
    "withEyeDropper": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the eye dropper component.",
      "required": false
    },
    "withPicker": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the saturation, hue, alpha, channels and eye dropper component.",
      "required": false
    },
    "withResult": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, display the result component.",
      "required": false
    },
    "withSwatch": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the color swatch component.",
      "required": false
    }
  },
  "ColorSelector": {
    "alphaSliderProps": {
      "type": "Omit<AlphaSliderProps, \"defaultValue\" | \"value\">",
      "description": "Props for the alpha slider component.",
      "required": false
    },
    "alphaSliderRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLInputElement | null) => void)\n  | MutableRefObject<HTMLInputElement | null>",
      "description": "Ref for the alpha slider component.",
      "required": false
    },
    "channelProps": {
      "type": "Omit<ColorSelectorChannelProps, \"channelLabel\">",
      "description": "Props for the chancel component.",
      "required": false
    },
    "channelsProps": {
      "type": "ColorSelectorChannelsProps",
      "description": "Props for the channels component.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultValue": {
      "type": "string",
      "description": "The initial value of the color selector.",
      "required": false
    },
    "eyeDropperProps": {
      "type": "ColorSelectorEyeDropperProps",
      "description": "Props for the eye dropper component.",
      "required": false
    },
    "eyeDropperRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLButtonElement | null) => void)\n  | MutableRefObject<HTMLButtonElement | null>",
      "description": "Ref for the eye dropper component.",
      "required": false
    },
    "fallbackValue": {
      "type": "string",
      "description": "The fallback value returned when color determination fails.",
      "required": false
    },
    "format": {
      "type": "ColorFormat",
      "defaultValue": "hexa",
      "description": "Color format. For example, `hex`, `rgba`, etc.",
      "required": false
    },
    "hueSliderProps": {
      "type": "Omit<HueSliderProps, \"defaultValue\" | \"value\">",
      "description": "Props for the hue slider component.",
      "required": false
    },
    "hueSliderRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLInputElement | null) => void)\n  | MutableRefObject<HTMLInputElement | null>",
      "description": "Ref for the hue slider component.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLUIProps<\"input\">",
      "description": "Props for the color selector input element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name attribute of the hidden `input` field.\nThis is particularly useful in forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: string) => void",
      "description": "Function called whenever the color selector value changes.",
      "required": false
    },
    "onChangeEnd": {
      "type": "(value: string) => void",
      "description": "Function called when the user is done selecting a new value.",
      "required": false
    },
    "onChangeStart": {
      "type": "(value: string) => void",
      "description": "Function called when the user starts selecting a new value.",
      "required": false
    },
    "onSwatchClick": {
      "type": "(value: string) => void",
      "description": "Function called whenever the color swatch click.",
      "required": false
    },
    "saturationSliderProps": {
      "type": "Omit<SaturationSliderProps, \"defaultValue\" | \"value\">",
      "description": "Props for the saturation slider component.",
      "required": false
    },
    "saturationSliderRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLInputElement | null) => void)\n  | MutableRefObject<HTMLInputElement | null>",
      "description": "Ref for the saturation slider component.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\" | \"full\"",
      "defaultValue": "\"md\"",
      "description": "The size of the ColorSelector.",
      "required": false
    },
    "swatches": {
      "type": "string[]",
      "description": "An array of colors in one of the supported formats.\nUsed to render swatches list below the color selector.",
      "required": false
    },
    "swatchesColumns": {
      "type": "UIValue<number>",
      "defaultValue": "7",
      "description": "Number of swatches grid columns.",
      "required": false
    },
    "swatchesLabel": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The swatches label to use.",
      "required": false
    },
    "swatchesProps": {
      "type": "ColorSelectorSwatchesProps",
      "description": "Props for the swatches component.",
      "required": false
    },
    "swatchProps": {
      "type": "ColorSwatchProps",
      "description": "Props for the color swatch component.",
      "required": false
    },
    "value": {
      "type": "string",
      "description": "The value of the color selector.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the ColorSelector.",
      "required": false
    },
    "withChannel": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the channels component.",
      "required": false
    },
    "withEyeDropper": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true` display the eye dropper component.",
      "required": false
    },
    "withPicker": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the saturation, hue, alpha, channels and eye dropper component.",
      "required": false
    },
    "withResult": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the result component.",
      "required": false
    }
  },
  "ColorSwatch": {
    "color": {
      "type": "UIValue<\"border\" | Color | ({} & string) | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | ... 318 more ... | \"yellow.950\">",
      "defaultValue": "#ffffff00",
      "description": "The color used for the swatch element.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "isRounded": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the color swatch will be perfectly round. Else, it'll be slightly round.",
      "required": false
    },
    "overlays": {
      "type": "HTMLUIProps[]",
      "description": "The overlay used for the swatch element.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the ColorSwatch.",
      "required": false
    },
    "variant": {
      "type": "\"basic\" | \"rounded\"",
      "defaultValue": "\"basic\"",
      "description": "The variant of the ColorSwatch.",
      "required": false
    },
    "withShadow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the swatch element has an inner `box-shadow`.",
      "required": false
    }
  },
  "HueSlider": {
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultValue": {
      "type": "number",
      "description": "The initial value of the slider.",
      "required": false
    },
    "focusThumbOnChange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `false`, the slider handle will not capture focus when value changes.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLUIProps<\"input\">",
      "description": "Props for slider input element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "max": {
      "type": "number",
      "description": "The maximum allowed value of the slider. Cannot be less than min.",
      "required": false
    },
    "min": {
      "type": "number",
      "description": "The minimum allowed value of the slider. Cannot be greater than max.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name attribute of the hidden `input` field.\nThis is particularly useful in forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: number) => void",
      "description": "Function called whenever the slider value changes.",
      "required": false
    },
    "onChangeEnd": {
      "type": "(value: number) => void",
      "description": "Function called when the user is done selecting a new value.",
      "required": false
    },
    "onChangeStart": {
      "type": "(value: number) => void",
      "description": "Function called when the user starts selecting a new value.",
      "required": false
    },
    "overlays": {
      "type": "HTMLUIProps[]",
      "description": "The overlay used for the slider.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the HueSlider.",
      "required": false
    },
    "step": {
      "type": "number",
      "defaultValue": "1",
      "description": "The step in which increments or decrements have to be made.",
      "required": false
    },
    "thumbColor": {
      "type": "UIValue<\"border\" | ({} & string) | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | \"amber.950\" | ... 318 more ... | Background<...>>",
      "description": "The CSS `background` property. Used in `background` of thumb element.",
      "required": false
    },
    "thumbProps": {
      "type": "HTMLUIProps",
      "description": "Props for slider thumb element.",
      "required": false
    },
    "trackProps": {
      "type": "HTMLUIProps",
      "description": "Props for slider track element.",
      "required": false
    },
    "value": {
      "type": "number",
      "description": "The value of the slider.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the HueSlider.",
      "required": false
    },
    "withShadow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the slider has an inner `box-shadow`.",
      "required": false
    }
  },
  "SaturationSlider": {
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultValue": {
      "type": "Hsv",
      "defaultValue": "[0, 0, 1]",
      "description": "The initial value of the saturation slider.",
      "required": false
    },
    "focusThumbOnChange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `false`, the saturation slider handle will not capture focus when value changes.",
      "required": false
    },
    "innerProps": {
      "type": "HTMLUIProps",
      "description": "Props for saturation slider inner element.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLUIProps<\"input\">",
      "description": "Props for saturation slider input element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name attribute of the hidden `input` field.\nThis is particularly useful in forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: Hsv) => void",
      "description": "Function called whenever the saturation slider value changes.",
      "required": false
    },
    "onChangeEnd": {
      "type": "(value: Hsv) => void",
      "description": "Function called when the user is done selecting a new value.",
      "required": false
    },
    "onChangeStart": {
      "type": "(value: Hsv) => void",
      "description": "Function called when the user starts selecting a new value.",
      "required": false
    },
    "overlays": {
      "type": "Overlay[]",
      "description": "The overlay used for the saturation slider.",
      "required": false
    },
    "ratio": {
      "type": "UIValue<number>",
      "defaultValue": "'16 / 9'",
      "description": "The aspect ratio of the saturation slider.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\" | \"full\"",
      "defaultValue": "\"md\"",
      "description": "The size of the SaturationSlider.",
      "required": false
    },
    "step": {
      "type": "number",
      "defaultValue": "0.01",
      "description": "The step in which increments or decrements have to be made.",
      "required": false
    },
    "thumbColor": {
      "type": "UIValue<\"border\" | ({} & string) | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | \"amber.950\" | ... 318 more ... | Background<...>>",
      "description": "The CSS `background` property. Used in `background` of thumb element.",
      "required": false
    },
    "thumbProps": {
      "type": "HTMLUIProps",
      "description": "Props for saturation slider thumb element.",
      "required": false
    },
    "trackProps": {
      "type": "HTMLUIProps",
      "description": "Props for saturation slider track element.",
      "required": false
    },
    "value": {
      "type": "Hsv",
      "description": "The value of the saturation slider.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the SaturationSlider.",
      "required": false
    },
    "withShadow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the slider has an inner `box-shadow`.",
      "required": false
    }
  }
}
