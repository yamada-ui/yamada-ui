{
  "Rating": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | ({ _peerAccept?: \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | (... & { base?: \"lg\" | ... 6 more ... | undefined; ... 4 more ...; xl?: \"lg\" | ... 6 more ... | undefined; }), \"lg\" | ... 4 more ... | (... & { ...; })] | { ....",
      "description": "The size of the component.",
      "required": false
    },
    "color": {
      "type": "\"link\" | \"amber\" | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | \"amber.950\" | \"amber.bg\" | ... 664 more ... | ((props: number) => \"link\" | ... 677 more ... | undefined)",
      "description": "The color of the filled icons.",
      "required": false
    },
    "count": {
      "type": "number",
      "defaultValue": "5",
      "description": "Number of controls that should be rendered.",
      "required": false
    },
    "defaultValue": {
      "type": "number",
      "defaultValue": "0",
      "description": "The initial value of the rating.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be disabled.",
      "required": false
    },
    "emptyIcon": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...> | ((props: number) => ReactNode)",
      "description": "The empty icon for the rating.",
      "required": false
    },
    "filledIcon": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...> | ((props: number) => ReactNode)",
      "description": "The filled icon for the rating.",
      "required": false
    },
    "fractions": {
      "type": "number",
      "defaultValue": "1",
      "description": "Number of fractions each item can be divided into,",
      "required": false
    },
    "groupProps": {
      "type": "FunctionOrValue<number, RatingGroupProps>",
      "description": "Props for the rating group.",
      "required": false
    },
    "highlightSelectedOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, only the selected icons will be filled.",
      "required": false
    },
    "iconProps": {
      "type": "FunctionOrValue<number, RatingIconProps>",
      "description": "Props for the rating item.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "The top-level id string that will be applied to the rating.\nThe index of the rating item will be appended to this top-level id.",
      "required": false
    },
    "inputProps": {
      "type": "FunctionOrValue<number, HTMLStyledProps<\"input\">>",
      "description": "Props for the input element.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be invalid.",
      "required": false
    },
    "itemProps": {
      "type": "FunctionOrValue<number, RatingItemProps>",
      "description": "Props for the rating item.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name of the input element.",
      "required": false
    },
    "onChange": {
      "type": "(value: number) => void",
      "description": "The callback invoked when value state changes.",
      "required": false
    },
    "onHover": {
      "type": "(value: number) => void",
      "description": "The callback invoked when hovering over the rating.",
      "required": false
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be readonly.",
      "required": false
    },
    "required": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be required.",
      "required": false
    },
    "value": {
      "type": "number",
      "description": "The value of the rating.",
      "required": false
    }
  }
}
