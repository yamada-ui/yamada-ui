{
  "$schema": "https://yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["button", "input", "group", "icon", "field"],
    "externals": [],
    "hooks": ["use-controllable-state"],
    "providers": ["i18n-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./password-input.style\"\nexport * from \"./strength-meter.style\"\nexport {\n  PasswordInput,\n  PasswordInputPropsContext,\n  usePasswordInputPropsContext,\n} from \"./password-input\"\nexport type { PasswordInputProps } from \"./password-input\"\nexport {\n  StrengthMeter,\n  StrengthMeterPropsContext,\n  useStrengthMeterPropsContext,\n} from \"./strength-meter\"\nexport type { StrengthMeterProps } from \"./strength-meter\"\nexport * from \"./use-password-input\"\nexport * from \"./use-strength-meter\"\n"
    },
    {
      "name": "password-input.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { buttonStyle } from \"../button\"\nimport {\n  getInputHeightStyle,\n  getInputPaddingResetStyle,\n  inputStyle,\n} from \"../input\"\n\nexport const passwordInputStyle = defineComponentSlotStyle({\n  base: {\n    button: {\n      ...buttonStyle.base,\n      rounded: \"l1\",\n      _readOnly: { cursor: \"pointer\" },\n    },\n    field: inputStyle.base,\n    root: {},\n  },\n\n  variants: {\n    base: {\n      button: {\n        layerStyle: \"ghost\",\n        focusVisibleRing: \"none\",\n        _hover: {\n          layerStyle: \"ghost.hover\",\n        },\n        _focusVisible: {\n          layerStyle: \"ghost.hover\",\n        },\n      },\n    },\n\n    filled: {\n      field: inputStyle.variants?.filled,\n    },\n    flushed: {\n      field: inputStyle.variants?.flushed,\n      root: getInputPaddingResetStyle(\"& > input\"),\n    },\n    outline: {\n      field: inputStyle.variants?.outline,\n    },\n    plain: {\n      field: inputStyle.variants?.plain,\n    },\n  },\n\n  sizes: {\n    xs: {\n      button: {\n        boxSize: `calc({--height} - {spaces.2})`,\n        fontSize: inputStyle.sizes?.xs.fontSize,\n      },\n      field: inputStyle.sizes?.xs,\n      root: getInputHeightStyle(inputStyle.sizes?.xs.minH, \"& > input\"),\n    },\n    sm: {\n      button: {\n        boxSize: `calc({--height} - {spaces.2})`,\n        fontSize: inputStyle.sizes?.sm.fontSize,\n      },\n      field: inputStyle.sizes?.sm,\n      root: getInputHeightStyle(inputStyle.sizes?.sm.minH, \"& > input\"),\n    },\n    md: {\n      button: {\n        boxSize: `calc({--height} - {spaces.2})`,\n        fontSize: inputStyle.sizes?.md.fontSize,\n      },\n      field: inputStyle.sizes?.md,\n      root: getInputHeightStyle(inputStyle.sizes?.md.minH, \"& > input\"),\n    },\n    lg: {\n      button: {\n        boxSize: `calc({--height} - {spaces.2.5})`,\n        fontSize: inputStyle.sizes?.lg.fontSize,\n      },\n      field: inputStyle.sizes?.lg,\n      root: getInputHeightStyle(inputStyle.sizes?.lg.minH, \"& > input\"),\n    },\n    xl: {\n      button: {\n        boxSize: `calc({--height} - {spaces.3})`,\n        fontSize: inputStyle.sizes?.xl.fontSize,\n      },\n      field: inputStyle.sizes?.xl,\n      root: getInputHeightStyle(inputStyle.sizes?.xl.minH, \"& > input\"),\n    },\n    \"2xl\": {\n      button: {\n        boxSize: `calc({--height} - {spaces.3})`,\n        fontSize: inputStyle.sizes?.[\"2xl\"].fontSize,\n      },\n      field: inputStyle.sizes?.[\"2xl\"],\n      root: getInputHeightStyle(inputStyle.sizes?.[\"2xl\"]?.minH, \"& > input\"),\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n  },\n})\n\nexport type PasswordInputStyle = typeof passwordInputStyle\n"
    },
    {
      "name": "password-input.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type {\n  HTMLStyledProps,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { InputProps } from \"../input\"\nimport type { PasswordInputStyle } from \"./password-input.style\"\nimport type { UsePasswordInputProps } from \"./use-password-input\"\nimport { createSlotComponent } from \"@yamada-ui/react\"\nimport { useGroupItemProps } from \"../group\"\nimport { EyeIcon, EyeOffIcon } from \"../icon\"\nimport { Input, InputGroup, useInputPropsContext } from \"../input\"\nimport { passwordInputStyle } from \"./password-input.style\"\nimport { usePasswordInput } from \"./use-password-input\"\n\nexport interface PasswordInputProps\n  extends WithoutThemeProps<InputProps, PasswordInputStyle>,\n    ThemeProps<PasswordInputStyle>,\n    UsePasswordInputProps {\n  /**\n   * The icons to be used for the visibility toggle.\n   */\n  visibilityIcon?: { off: ReactNode; on: ReactNode }\n  /**\n   * The props for the button element.\n   */\n  buttonProps?: PasswordInputButtonProps\n  /**\n   * The props for the end element.\n   */\n  elementProps?: InputGroup.ElementProps\n  /**\n   * The props for the root element.\n   */\n  rootProps?: InputGroup.RootProps\n}\n\nconst {\n  PropsContext: PasswordInputPropsContext,\n  usePropsContext: usePasswordInputPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<PasswordInputProps, PasswordInputStyle>(\n  \"password-input\",\n  passwordInputStyle,\n)\n\nexport { PasswordInputPropsContext, usePasswordInputPropsContext }\n\n/**\n * `PasswordInput` is a component that allows users to input passwords with a visibility toggle.\n *\n * @see https://yamada-ui.com/docs/components/password-input\n */\nexport const PasswordInput = withProvider<\"input\", PasswordInputProps>(\n  ({\n    className,\n    css,\n    colorScheme,\n    visibilityIcon = { off: <EyeOffIcon />, on: <EyeIcon /> },\n    buttonProps,\n    elementProps,\n    rootProps,\n    ...props\n  }) => {\n    const [groupItemProps, rest] = useGroupItemProps(props)\n    const { visible, getButtonProps, getInputProps } = usePasswordInput(rest)\n\n    return (\n      <InputGroup.Root\n        className={className}\n        css={css}\n        colorScheme={colorScheme}\n        {...groupItemProps}\n        {...rootProps}\n      >\n        <PasswordInputField {...getInputProps()} />\n\n        <InputGroup.Element clickable {...elementProps}>\n          <PasswordInputButton {...getButtonProps(buttonProps)}>\n            {visible ? visibilityIcon.off : visibilityIcon.on}\n          </PasswordInputButton>\n        </InputGroup.Element>\n      </InputGroup.Root>\n    )\n  },\n  \"root\",\n)((props) => {\n  const context = useInputPropsContext()\n\n  return { ...context, ...props }\n})\n\ninterface PasswordInputFieldProps extends InputProps {}\n\nconst PasswordInputField = withContext<\"input\", PasswordInputFieldProps>(\n  Input,\n  \"field\",\n)({ \"data-group-propagate\": \"\" })\n\ninterface PasswordInputButtonProps extends HTMLStyledProps<\"button\"> {}\n\nconst PasswordInputButton = withContext<\"button\", PasswordInputButtonProps>(\n  \"button\",\n  \"button\",\n)()\n"
    },
    {
      "name": "strength-meter.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const strengthMeterStyle = defineComponentSlotStyle({\n  base: {\n    indicator: {\n      bg: \"bg.subtle\",\n      flex: \"1\",\n      h: \"1\",\n      rounded: \"l1\",\n    },\n    indicators: {\n      display: \"flex\",\n      gap: \"sm\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n      w: \"full\",\n    },\n    label: {\n      color: \"fg.muted\",\n      fontSize: \"xs\",\n    },\n    root: {\n      alignItems: \"end\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"xs\",\n      w: \"full\",\n    },\n  },\n})\n\nexport type StrengthMeterStyle = typeof strengthMeterStyle\n"
    },
    {
      "name": "strength-meter.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps } from \"@yamada-ui/react\"\nimport type { StrengthMeterStyle } from \"./strength-meter.style\"\nimport type { UseStrengthMeterProps } from \"./use-strength-meter\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { strengthMeterStyle } from \"./strength-meter.style\"\nimport { useStrengthMeter } from \"./use-strength-meter\"\n\ninterface IndicatorProps extends HTMLStyledProps {\n  label?: ReactNode\n}\n\nexport interface StrengthMeterProps\n  extends HTMLStyledProps,\n    UseStrengthMeterProps {\n  /**\n   * If `true`, the password strength meter will display the label.\n   *\n   * @default true\n   */\n  withLabel?: boolean\n  /**\n   * The props of the password strength meter indicator.\n   */\n  getIndicatorProps?: (percent: number) => IndicatorProps\n}\n\nconst {\n  PropsContext: StrengthMeterPropsContext,\n  usePropsContext: useStrengthMeterPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<StrengthMeterProps, StrengthMeterStyle>(\n  \"strength-meter\",\n  strengthMeterStyle,\n)\n\nexport { StrengthMeterPropsContext, useStrengthMeterPropsContext }\n\nexport const StrengthMeter = withProvider<\"div\", StrengthMeterProps>(\n  ({\n    max = 4,\n    value,\n    withLabel = true,\n    getIndicatorProps: getCustomIndicatorProps,\n    ...rest\n  }) => {\n    const percent = (value / max) * 100\n\n    const getDefaultIndicatorProps = (percent: number): IndicatorProps => {\n      switch (true) {\n        case percent < 33:\n          return { label: \"Low\", _selected: { bg: \"red.500\" } }\n        case percent < 66:\n          return { label: \"Medium\", _selected: { bg: \"orange.500\" } }\n        default:\n          return { label: \"High\", _selected: { bg: \"green.500\" } }\n      }\n    }\n\n    getCustomIndicatorProps ??= getDefaultIndicatorProps\n\n    const { label, ...indicatorProps } = getCustomIndicatorProps(percent)\n\n    const { getIndicatorProps, getRootProps } = useStrengthMeter({\n      max,\n      value,\n      ...rest,\n    })\n\n    return (\n      <styled.div {...getRootProps()}>\n        <StrengthMeterIndicators>\n          {Array.from({ length: max }).map((_, index) => (\n            <StrengthMeterIndicator\n              key={index}\n              {...getIndicatorProps({ index, ...indicatorProps })}\n            />\n          ))}\n        </StrengthMeterIndicators>\n\n        {withLabel && label ? (\n          <StrengthMeterLabel>{label}</StrengthMeterLabel>\n        ) : null}\n      </styled.div>\n    )\n  },\n  \"root\",\n)()\n\ninterface StrengthMeterIndicatorsProps extends HTMLStyledProps {}\n\nconst StrengthMeterIndicators = withContext<\n  \"div\",\n  StrengthMeterIndicatorsProps\n>(\"div\", \"indicators\")()\n\ninterface StrengthMeterIndicatorProps extends HTMLStyledProps {}\n\nconst StrengthMeterIndicator = withContext<\"div\", StrengthMeterIndicatorProps>(\n  \"div\",\n  \"indicator\",\n)()\n\ninterface StrengthMeterLabelProps extends HTMLStyledProps<\"span\"> {}\n\nconst StrengthMeterLabel = withContext<\"span\", StrengthMeterLabelProps>(\n  \"span\",\n  \"label\",\n)()\n"
    },
    {
      "name": "use-password-input.tsx",
      "content": "\"use client\"\n\nimport type { MouseEvent } from \"react\"\nimport type { HTMLProps, PropGetter } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport { useCallback } from \"react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { handlerAll, mergeRefs } from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\n\nexport interface UsePasswordInputProps extends HTMLProps<\"input\">, FieldProps {\n  /**\n   * Determines whether the password input is visible by default.\n   *\n   * @default false\n   */\n  defaultVisible?: boolean\n  /**\n   * Determines the visibility of the password input.\n   *\n   * @default false\n   */\n  visible?: boolean\n  /**\n   * Callback function that is triggered when the visibility of the password input changes.\n   */\n  onVisibleChange?: (visible: boolean) => void\n}\n\nexport const usePasswordInput = (props: UsePasswordInputProps = {}) => {\n  const {\n    props: {\n      defaultVisible,\n      disabled,\n      visible: visibleProp,\n      onVisibleChange,\n      ...rest\n    },\n    ariaProps,\n    dataProps,\n    eventProps,\n  } = useFieldProps(props)\n  const [visible, setVisible] = useControllableState({\n    defaultValue: defaultVisible,\n    value: visibleProp,\n    onChange: onVisibleChange,\n  })\n  const { t } = useI18n(\"passwordInput\")\n\n  const onChangeVisibility = useCallback(\n    (ev: MouseEvent<HTMLButtonElement>) => {\n      if (disabled || ev.button !== 0) return\n\n      ev.preventDefault()\n\n      setVisible((prev) => !prev)\n    },\n    [disabled, setVisible],\n  )\n\n  const getInputProps: PropGetter<\"input\"> = useCallback(\n    ({ ref, ...props } = {}) => ({\n      type: visible ? \"text\" : \"password\",\n      disabled,\n      ...ariaProps,\n      ...dataProps,\n      ...rest,\n      ...props,\n      ref: mergeRefs(ref, rest.ref),\n      onBlur: handlerAll(eventProps.onBlur, props.onBlur),\n      onFocus: handlerAll(eventProps.onFocus, props.onFocus),\n    }),\n    [visible, rest, disabled, dataProps, eventProps, ariaProps],\n  )\n\n  const getButtonProps: PropGetter<\"button\"> = useCallback(\n    (props = {}) => ({\n      type: \"button\",\n      \"aria-label\": t(\"Toggle password visibility\"),\n      disabled,\n      ...dataProps,\n      ...props,\n      onClick: handlerAll(props.onClick, onChangeVisibility),\n    }),\n    [onChangeVisibility, dataProps, disabled, t],\n  )\n\n  return {\n    setVisible,\n    visible,\n    getButtonProps,\n    getInputProps,\n  }\n}\n\nexport type UsePasswordInputReturn = ReturnType<typeof usePasswordInput>\n"
    },
    {
      "name": "use-strength-meter.ts",
      "content": "\"use client\"\n\nimport type {\n  HTMLProps,\n  PropGetter,\n  RequiredPropGetter,\n} from \"@yamada-ui/react\"\nimport { useCallback } from \"react\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { dataAttr } from \"@yamada-ui/react\"\n\nexport interface UseStrengthMeterProps extends HTMLProps {\n  /**\n   * The value of the password strength meter.\n   */\n  value: number\n  /**\n   * The maximum value of the password strength meter.\n   *\n   * @default 4\n   */\n  max?: number\n}\n\nexport const useStrengthMeter = ({\n  max = 4,\n  value,\n  ...rest\n}: UseStrengthMeterProps) => {\n  const { t } = useI18n(\"passwordInput\")\n\n  const getRootProps: PropGetter = useCallback(\n    (props) => ({\n      \"aria-label\": t(\"Password strength meter\"),\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": value,\n      role: \"meter\",\n      ...rest,\n      ...props,\n    }),\n    [max, rest, value, t],\n  )\n\n  const getIndicatorProps: RequiredPropGetter<\"div\", { index: number }> =\n    useCallback(\n      ({ index, ...props }) => ({\n        \"data-selected\": dataAttr(index < value),\n        ...props,\n      }),\n      [value],\n    )\n\n  return { getIndicatorProps, getRootProps }\n}\n\nexport type UseStrengthMeterReturn = ReturnType<typeof useStrengthMeter>\n"
    }
  ]
}
