{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon", "loading", "status"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": { "components": ["snacks"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "alert.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const alertStyle = defineComponentSlotStyle({\n  base: {\n    description: {\n      lineHeight: \"shorter\",\n    },\n    icon: {\n      boxSize: \"5\",\n      flexShrink: 0,\n      fontSize: \"xl\",\n      me: \"3\",\n    },\n    loading: {\n      flexShrink: 0,\n      fontSize: \"xl\",\n      me: \"3\",\n    },\n    root: {\n      alignItems: \"start\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      position: \"relative\",\n      px: \"4\",\n      py: \"3\",\n      rounded: \"l2\",\n      w: \"full\",\n    },\n    title: {\n      display: \"block\",\n      lineHeight: \"shorter\",\n      me: \"2\",\n    },\n  },\n\n  variants: {\n    island: {\n      description: {\n        color: \"fg.muted\",\n      },\n      icon: { color: \"colorScheme.solid\" },\n      root: {\n        layerStyle: \"panel\",\n        pl: 7,\n        _before: {\n          bg: \"colorScheme.solid\",\n          h: \"calc(100% - {sizes.5})\",\n          left: \"3\",\n          position: \"absolute\",\n          rounded: \"full\",\n          top: \"50%\",\n          transform: \"translateY(-50%)\",\n          w: 1,\n        },\n      },\n    },\n    plain: {\n      description: {\n        color: \"fg.muted\",\n      },\n      icon: {\n        color: \"colorScheme.solid\",\n      },\n      root: {\n        layerStyle: \"panel\",\n      },\n    },\n    solid: {\n      icon: {\n        textStyle: \"solid\",\n      },\n      root: {\n        layerStyle: \"solid\",\n      },\n    },\n    subtle: {\n      icon: {\n        textStyle: \"subtle\",\n      },\n      root: {\n        layerStyle: \"subtle\",\n      },\n    },\n    surface: {\n      icon: {\n        textStyle: \"surface\",\n      },\n      root: {\n        layerStyle: \"surface\",\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        icon: {\n          color: [\"colorScheme.600\", \"colorScheme.400\"],\n        },\n      },\n      colorScheme: [\"secondary\", \"gray\"],\n      variant: \"plain\",\n    },\n  ],\n\n  defaultProps: {\n    variant: \"plain\",\n  },\n})\n\nexport type AlertStyle = typeof alertStyle\n"
    },
    {
      "name": "alert.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { IconProps } from \"../icon\"\nimport type { Loading } from \"../loading\"\nimport type { StatusScheme } from \"../status\"\nimport type { AlertStyle } from \"./alert.style\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport {\n  CircleCheckBigIcon,\n  InfoIcon,\n  OctagonAlertIcon,\n  TriangleAlertIcon,\n} from \"../icon\"\nimport { useLoadingComponent } from \"../loading\"\nimport { alertStyle } from \"./alert.style\"\n\nconst icons = {\n  error: OctagonAlertIcon,\n  info: InfoIcon,\n  success: CircleCheckBigIcon,\n  warning: TriangleAlertIcon,\n} as const\n\ninterface ComponentContext {\n  status: StatusScheme\n}\n\nexport interface AlertRootProps\n  extends HTMLStyledProps,\n    ThemeProps<AlertStyle> {\n  /**\n   * The status of the alert.\n   *\n   * @default 'info'\n   */\n  status?: StatusScheme\n}\n\nconst {\n  ComponentContext,\n  PropsContext: AlertPropsContext,\n  useComponentContext,\n  usePropsContext: useAlertPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<AlertRootProps, AlertStyle, ComponentContext>(\n  \"alert\",\n  alertStyle,\n)\n\nexport { AlertPropsContext, useAlertPropsContext }\n\n/**\n * `Alert` is a component that conveys information to the user.\n *\n * @see https://yamada-ui.com/components/alert\n */\nexport const AlertRoot = withProvider<\"div\", AlertRootProps>(\n  ({ status, colorScheme = status, ...props }) => {\n    const context = useMemo(() => ({ status: status! }), [status])\n\n    return (\n      <ComponentContext value={context}>\n        <styled.div colorScheme={colorScheme} role=\"alert\" {...props} />\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)({ status: \"info\" })\n\nexport interface AlertIconProps extends IconProps {}\n\nexport const AlertIcon = withContext<\"svg\", AlertIconProps>(\n  ({ as, ...rest }) => {\n    const { status } = useComponentContext()\n    const Icon = as || icons[status]\n\n    return <Icon {...rest} />\n  },\n  \"icon\",\n)()\n\nexport interface AlertLoadingProps extends Loading.Props {\n  /**\n   * The loading scheme.\n   *\n   * @default 'oval'\n   */\n  loadingScheme?: Loading.Scheme\n}\n\nexport const AlertLoading = withContext<\"svg\", AlertLoadingProps>(\n  ({ loadingScheme = \"oval\", ...rest }) => {\n    const Component = useLoadingComponent(loadingScheme)\n\n    return <Component {...rest} />\n  },\n  [\"icon\", \"loading\"],\n)()\n\nexport interface AlertTitleProps extends HTMLStyledProps<\"p\"> {}\n\nexport const AlertTitle = withContext<\"p\", AlertTitleProps>(\"p\", \"title\")()\n\nexport interface AlertDescriptionProps extends HTMLStyledProps<\"span\"> {}\n\nexport const AlertDescription = withContext<\"span\", AlertDescriptionProps>(\n  \"span\",\n  \"description\",\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./alert.style\"\nexport {\n  AlertDescription,\n  AlertIcon,\n  AlertLoading,\n  AlertPropsContext,\n  AlertRoot,\n  AlertTitle,\n  useAlertPropsContext,\n} from \"./alert\"\nexport type {\n  AlertDescriptionProps,\n  AlertIconProps,\n  AlertLoadingProps,\n  AlertRootProps,\n  AlertTitleProps,\n} from \"./alert\"\nexport * as Alert from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  AlertDescription as Description,\n  AlertIcon as Icon,\n  AlertLoading as Loading,\n  AlertPropsContext as PropsContext,\n  AlertRoot as Root,\n  AlertTitle as Title,\n  useAlertPropsContext as usePropsContext,\n} from \"./alert\"\nexport type {\n  AlertDescriptionProps as DescriptionProps,\n  AlertIconProps as IconProps,\n  AlertLoadingProps as LoadingProps,\n  AlertRootProps as RootProps,\n  AlertTitleProps as TitleProps,\n} from \"./alert\"\n"
    }
  ]
}
