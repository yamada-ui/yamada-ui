{
  "Modal": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the open will be opened."
    },
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom or pinch gestures on iOS devices when scroll locking is enabled."
    },
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "required": false,
      "description": "The animation of the tooltip."
    },
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"g\" | \"p\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"style\" | \"animate\" | \"section\" | \"a\" | \"abbr\" | \"address\" | ... 148 more ... | \"textPath\"",
      "required": false
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed."
    },
    "closeOnOverlay": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked."
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"neutral\" | \"red\" | \"danger\" | \"rose\" | \"pink\" | \"flashy\" | \"orange\" | \"warning\" | \"amber\" | \"yellow\" | \"lime\" | \"green\" | \"success\" | \"emerald\" | \"teal\" | \"cyan\" | \"sky\" | \"blue\" | \"primary\" | \"info\" | \"link\" | \"indigo\" | \"violet\" | \"secondary\" | \"purple\" | \"fuchsia\"",
      "required": false,
      "description": "The visual color appearance of the component."
    },
    "containerProps": {
      "type": "HTMLUIProps<\"div\">",
      "required": false,
      "description": "Props for modal container element."
    },
    "duration": {
      "type": "number | Partial<Record<\"exit\" | \"enter\", number>>",
      "required": false,
      "description": "The animation duration."
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "`ref` of the element to return focus to when `FocusLock` unmounts."
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "`ref` of the element to receive focus initially."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active.\n- If `false`:  allows focus to move outside of iframe."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked to close the modal."
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Callback function to run side effects after the modal has closed."
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal."
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "outside": {
      "type": "UIValue<number | (string & {}) | \"px\" | \"initial\" | \"inherit\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | ... 96 more ... | \"-4xl\">",
      "required": false,
      "description": "The CSS `padding` property."
    },
    "placement": {
      "type": "UIValue<\n  | \"bottom\"\n  | \"left\"\n  | \"right\"\n  | \"top\"\n  | \"center\"\n  | \"top-left\"\n  | \"top-right\"\n  | \"bottom-left\"\n  | \"bottom-right\"\n>",
      "defaultValue": "'center'",
      "required": false,
      "description": "The placement of the modal."
    },
    "portalProps": {
      "type": "Omit<PortalProps, \"children\">",
      "required": false,
      "description": "Props to be forwarded to the portal component."
    },
    "restoreFocus": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, focus will be restored to the element that triggered the `FocusLock` once it unmounts."
    },
    "scrollBehavior": {
      "type": "\"outside\" | \"inside\"",
      "defaultValue": "'inside'",
      "required": false,
      "description": "Where scroll behavior should originate.\n\n- `inside`: scroll only occurs within the `ModalBody`.\n- `outside`: the entire `ModalContent` will scroll within the viewport."
    },
    "size": {
      "defaultValue": "md",
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\" | \"5xl\" | \"6xl\" | \"full\"",
      "required": false,
      "description": "The size of the Modal."
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the Modal."
    },
    "withCloseButton": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the modal close button."
    },
    "withOverlay": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the modal overlay."
    }
  },
  "ModalOverlay": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"g\" | \"p\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"style\" | \"animate\" | \"section\" | \"a\" | \"abbr\" | \"address\" | ... 148 more ... | \"textPath\"",
      "required": false
    }
  },
  "ModalCloseButton": {
    "disableRipple": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, disable ripple effects when pressing a element."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button is disabled."
    },
    "isRounded": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If true, the button is full rounded."
    }
  },
  "ModalHeader": {},
  "ModalBody": {},
  "ModalFooter": {},
  "Dialog": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the open will be opened."
    },
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom or pinch gestures on iOS devices when scroll locking is enabled."
    },
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "required": false,
      "description": "The animation of the tooltip."
    },
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"g\" | \"p\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"style\" | \"animate\" | \"section\" | \"a\" | \"abbr\" | \"address\" | ... 148 more ... | \"textPath\"",
      "required": false
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "cancel": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | ButtonProps",
      "required": false,
      "description": "The dialog cancel to use."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed."
    },
    "closeOnOverlay": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked."
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"neutral\" | \"red\" | \"danger\" | \"rose\" | \"pink\" | \"flashy\" | \"orange\" | \"warning\" | \"amber\" | \"yellow\" | \"lime\" | \"green\" | \"success\" | \"emerald\" | \"teal\" | \"cyan\" | \"sky\" | \"blue\" | \"primary\" | \"info\" | \"link\" | \"indigo\" | \"violet\" | \"secondary\" | \"purple\" | \"fuchsia\"",
      "required": false,
      "description": "The visual color appearance of the component."
    },
    "containerProps": {
      "type": "HTMLUIProps<\"div\">",
      "required": false,
      "description": "Props for modal container element."
    },
    "duration": {
      "type": "number | Partial<Record<\"exit\" | \"enter\", number>>",
      "required": false,
      "description": "The animation duration."
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "`ref` of the element to return focus to when `FocusLock` unmounts."
    },
    "footer": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "required": false,
      "description": "The dialog footer to use."
    },
    "header": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "required": false,
      "description": "The dialog header to use."
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "`ref` of the element to receive focus initially."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active.\n- If `false`:  allows focus to move outside of iframe."
    },
    "onCancel": {
      "type": "(onClose: (() => void) | undefined) => void",
      "required": false,
      "description": "The callback invoked when cancel button clicked."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked to close the modal."
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Callback function to run side effects after the modal has closed."
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal."
    },
    "onOther": {
      "type": "(onClose: (() => void) | undefined) => void",
      "required": false,
      "description": "The callback invoked when other button clicked."
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "onSuccess": {
      "type": "(onClose: (() => void) | undefined) => void",
      "required": false,
      "description": "The callback invoked when success button clicked."
    },
    "other": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | ButtonProps",
      "required": false,
      "description": "The dialog other to use."
    },
    "outside": {
      "type": "UIValue<number | (string & {}) | \"px\" | \"initial\" | \"inherit\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | ... 96 more ... | \"-4xl\">",
      "required": false,
      "description": "The CSS `padding` property."
    },
    "placement": {
      "type": "UIValue<\n  | \"bottom\"\n  | \"left\"\n  | \"right\"\n  | \"top\"\n  | \"center\"\n  | \"top-left\"\n  | \"top-right\"\n  | \"bottom-left\"\n  | \"bottom-right\"\n>",
      "defaultValue": "'center'",
      "required": false,
      "description": "The placement of the modal."
    },
    "portalProps": {
      "type": "Omit<PortalProps, \"children\">",
      "required": false,
      "description": "Props to be forwarded to the portal component."
    },
    "restoreFocus": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, focus will be restored to the element that triggered the `FocusLock` once it unmounts."
    },
    "scrollBehavior": {
      "type": "\"outside\" | \"inside\"",
      "defaultValue": "'inside'",
      "required": false,
      "description": "Where scroll behavior should originate.\n\n- `inside`: scroll only occurs within the `ModalBody`.\n- `outside`: the entire `ModalContent` will scroll within the viewport."
    },
    "size": {
      "defaultValue": "md",
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\" | \"5xl\" | \"6xl\" | \"full\"",
      "required": false,
      "description": "The size of the Dialog."
    },
    "success": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | ButtonProps",
      "required": false,
      "description": "The dialog success to use."
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the Dialog."
    },
    "withCloseButton": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the modal close button."
    },
    "withOverlay": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the modal overlay."
    }
  },
  "DialogOverlay": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"g\" | \"p\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"style\" | \"animate\" | \"section\" | \"a\" | \"abbr\" | \"address\" | ... 148 more ... | \"textPath\"",
      "required": false
    }
  },
  "DialogCloseButton": {
    "disableRipple": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, disable ripple effects when pressing a element."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button is disabled."
    },
    "isRounded": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If true, the button is full rounded."
    }
  },
  "DialogHeader": {},
  "DialogBody": {},
  "DialogFooter": {},
  "Drawer": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the open will be opened."
    },
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom or pinch gestures on iOS devices when scroll locking is enabled."
    },
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"g\" | \"p\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"style\" | \"animate\" | \"section\" | \"a\" | \"abbr\" | \"address\" | ... 148 more ... | \"textPath\"",
      "required": false
    },
    "blankForDragProps": {
      "type": "CSSUIObject",
      "required": false,
      "description": "Props for the blank area when `closeOnDrag` is `true`."
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "closeOnDrag": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, then the drawer will close on drag."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed."
    },
    "closeOnOverlay": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked."
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"neutral\" | \"red\" | \"danger\" | \"rose\" | \"pink\" | \"flashy\" | \"orange\" | \"warning\" | \"amber\" | \"yellow\" | \"lime\" | \"green\" | \"success\" | \"emerald\" | \"teal\" | \"cyan\" | \"sky\" | \"blue\" | \"primary\" | \"info\" | \"link\" | \"indigo\" | \"violet\" | \"secondary\" | \"purple\" | \"fuchsia\"",
      "required": false,
      "description": "The visual color appearance of the component."
    },
    "containerProps": {
      "type": "HTMLUIProps<\"div\">",
      "required": false,
      "description": "Props for modal container element."
    },
    "dragConstraints": {
      "type": "number",
      "defaultValue": "0",
      "required": false,
      "description": "Applies constraints on the permitted draggable area."
    },
    "dragElastic": {
      "type": "number",
      "defaultValue": "0.1",
      "required": false,
      "description": "The degree of movement allowed outside constraints. 0 = no movement, 1 = full movement."
    },
    "dragOffset": {
      "type": "number",
      "defaultValue": "80",
      "required": false,
      "description": "Offset from being dragged to closing."
    },
    "dragVelocity": {
      "type": "number",
      "defaultValue": "100",
      "required": false,
      "description": "Velocity of the drag that triggers close."
    },
    "duration": {
      "type": "number | Partial<Record<\"exit\" | \"enter\", number>>",
      "required": false,
      "description": "The animation duration."
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "`ref` of the element to return focus to when `FocusLock` unmounts."
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "`ref` of the element to receive focus initially."
    },
    "isFullHeight": {
      "type": "boolean",
      "required": false,
      "description": "If `true` and drawer's placement is `top` or `bottom`, the drawer will occupy the viewport height (100dvh)."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active.\n- If `false`:  allows focus to move outside of iframe."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked to close the modal."
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Callback function to run side effects after the modal has closed."
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal."
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "placement": {
      "type": "UIValue<\"bottom\" | \"left\" | \"right\" | \"top\">",
      "defaultValue": "'right'",
      "required": false,
      "description": "The placement of the drawer."
    },
    "portalProps": {
      "type": "Omit<PortalProps, \"children\">",
      "required": false,
      "description": "Props to be forwarded to the portal component."
    },
    "restoreFocus": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, focus will be restored to the element that triggered the `FocusLock` once it unmounts."
    },
    "size": {
      "defaultValue": "md",
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\"",
      "required": false,
      "description": "The size of the Drawer."
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the Drawer."
    },
    "withCloseButton": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the modal close button."
    },
    "withDragBar": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the drag bar when `closeOnDrag` is `true`."
    },
    "withOverlay": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, display the modal overlay."
    }
  },
  "DrawerOverlay": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"g\" | \"p\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"style\" | \"animate\" | \"section\" | \"a\" | \"abbr\" | \"address\" | ... 148 more ... | \"textPath\"",
      "required": false
    }
  },
  "DrawerCloseButton": {
    "disableRipple": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, disable ripple effects when pressing a element."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button is disabled."
    },
    "isRounded": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If true, the button is full rounded."
    }
  },
  "DrawerHeader": {},
  "DrawerBody": {},
  "DrawerFooter": {}
}
