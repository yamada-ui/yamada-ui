{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export { Slot as Root, Slot, Slottable } from \"./slot\"\nexport type { SlotProps } from \"./slot\"\n"
    },
    {
      "name": "slot.tsx",
      "content": "import type {\n  FC,\n  HTMLAttributes,\n  PropsWithChildren,\n  RefAttributes,\n} from \"react\"\nimport { Children, cloneElement, isValidElement } from \"react\"\nimport { mergeProps, useFindChild, useValidChildren } from \"@yamada-ui/react\"\n\nexport interface SlotProps\n  extends HTMLAttributes<HTMLElement>,\n    RefAttributes<HTMLElement>,\n    PropsWithChildren {}\n\n/**\n * `Slot` is a component that merges its props onto its immediate child.\n *\n * @see https://yamada-ui.com/components/slot\n */\nexport const Slot: FC<SlotProps> = ({ children, ...rest }) => {\n  const validChildren = useValidChildren(children)\n  const slottable = useFindChild(validChildren, Slottable)\n\n  if (slottable) {\n    const newElement = slottable.props.children\n\n    const newChildren = validChildren.map((child) => {\n      if (child === slottable) {\n        if (Children.count(newElement) > 1) return Children.only(null)\n        return isValidElement<PropsWithChildren>(newElement)\n          ? newElement.props.children\n          : null\n      } else {\n        return child\n      }\n    })\n\n    return (\n      <SlotClone {...rest}>\n        {isValidElement(newElement)\n          ? cloneElement(newElement, undefined, newChildren)\n          : null}\n      </SlotClone>\n    )\n  }\n\n  return <SlotClone {...rest}>{children}</SlotClone>\n}\n\ninterface SlotCloneProps\n  extends RefAttributes<HTMLElement>,\n    PropsWithChildren {}\n\nconst SlotClone: FC<SlotCloneProps> = ({ children, ...rest }) => {\n  if (isValidElement<RefAttributes<HTMLElement>>(children))\n    return cloneElement(children, mergeProps(rest, children.props)())\n\n  return Children.count(children) > 1 ? Children.only(null) : null\n}\n\nexport const Slottable: FC<PropsWithChildren> = ({ children }) => {\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return <>{children}</>\n}\n"
    }
  ]
}
