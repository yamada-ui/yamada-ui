{
  "Checkbox": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "\"amber\" | \"black\" | \"blackAlpha\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"lg\" | \"md\" | \"sm\"",
      "defaultValue": "\"md\"",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"outline\" | \"solid\" | \"subtle\" | \"surface\"",
      "defaultValue": "\"solid\"",
      "description": "The variant of the component.",
      "required": false
    },
    "checked": {
      "type": "boolean",
      "description": "If `true`, the checkbox will be checked.",
      "required": false
    },
    "checkedIcon": {
      "type": "ReactNode",
      "description": "The icon to display in the checkbox when it is checked.",
      "required": false
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the checkbox will be initially checked.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be disabled.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "focusBorderColor": {
      "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "id assigned to input.",
      "required": false
    },
    "indeterminate": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the checkbox will be indeterminate.",
      "required": false
    },
    "indeterminateIcon": {
      "type": "ReactNode",
      "description": "The icon to display in the checkbox when it is indeterminate.",
      "required": false
    },
    "indicatorProps": {
      "type": "CheckboxIndicatorProps",
      "description": "Props for the indicator component.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLStyledProps<\"input\">",
      "description": "Props for the input element.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be invalid.",
      "required": false
    },
    "labelProps": {
      "type": "CheckboxLabelProps",
      "description": "Props for the label component.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name of the input field in a checkbox.",
      "required": false
    },
    "onBlur": {
      "type": "FocusEventHandler<HTMLInputElement>",
      "description": "The callback invoked when the checkbox is blurred.",
      "required": false
    },
    "onChange": {
      "type": "ChangeEventHandler<HTMLInputElement>",
      "description": "The callback invoked when the checked state changes.",
      "required": false
    },
    "onFocus": {
      "type": "FocusEventHandler<HTMLInputElement>",
      "description": "The callback invoked when the checkbox is focused.",
      "required": false
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be readonly.",
      "required": false
    },
    "required": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be required.",
      "required": false
    },
    "rootProps": {
      "type": "HTMLStyledProps<\"label\">",
      "description": "Props for the label element.",
      "required": false
    },
    "shape": {
      "type": "\"rounded\" | \"square\"",
      "defaultValue": "\"rounded\"",
      "description": "The shape of the component",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value of the checkbox.",
      "required": false
    }
  },
  "CheckboxGroup": {
    "Item": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "\"amber\" | \"black\" | \"blackAlpha\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"lg\" | \"md\" | \"sm\"",
        "defaultValue": "\"md\"",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"outline\" | \"solid\" | \"subtle\" | \"surface\"",
        "defaultValue": "\"solid\"",
        "description": "The variant of the component.",
        "required": false
      },
      "checked": {
        "type": "boolean",
        "description": "If `true`, the checkbox will be checked.",
        "required": false
      },
      "checkedIcon": {
        "type": "ReactNode",
        "description": "The icon to display in the checkbox when it is checked.",
        "required": false
      },
      "defaultChecked": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the checkbox will be initially checked.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be disabled.",
        "required": false
      },
      "errorBorderColor": {
        "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
        "description": "The border color when the input is invalid.",
        "required": false
      },
      "focusBorderColor": {
        "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
        "description": "The border color when the input is focused.",
        "required": false
      },
      "id": {
        "type": "string",
        "description": "id assigned to input.",
        "required": false
      },
      "indeterminate": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the checkbox will be indeterminate.",
        "required": false
      },
      "indeterminateIcon": {
        "type": "ReactNode",
        "description": "The icon to display in the checkbox when it is indeterminate.",
        "required": false
      },
      "indicatorProps": {
        "type": "CheckboxIndicatorProps",
        "description": "Props for the indicator component.",
        "required": false
      },
      "inputProps": {
        "type": "HTMLStyledProps<\"input\">",
        "description": "Props for the input element.",
        "required": false
      },
      "invalid": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be invalid.",
        "required": false
      },
      "labelProps": {
        "type": "CheckboxLabelProps",
        "description": "Props for the label component.",
        "required": false
      },
      "name": {
        "type": "string",
        "description": "The name of the input field in a checkbox.",
        "required": false
      },
      "onBlur": {
        "type": "FocusEventHandler<HTMLInputElement>",
        "description": "The callback invoked when the checkbox is blurred.",
        "required": false
      },
      "onChange": {
        "type": "ChangeEventHandler<HTMLInputElement>",
        "description": "The callback invoked when the checked state changes.",
        "required": false
      },
      "onFocus": {
        "type": "FocusEventHandler<HTMLInputElement>",
        "description": "The callback invoked when the checkbox is focused.",
        "required": false
      },
      "readOnly": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be readonly.",
        "required": false
      },
      "required": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be required.",
        "required": false
      },
      "rootProps": {
        "type": "HTMLStyledProps<\"label\">",
        "description": "Props for the label element.",
        "required": false
      },
      "shape": {
        "type": "\"rounded\" | \"square\"",
        "defaultValue": "\"rounded\"",
        "description": "The shape of the component",
        "required": false
      },
      "value": {
        "type": "Y",
        "description": "The value of the checkbox.",
        "required": false
      }
    },
    "Root": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "\"amber\" | \"black\" | \"blackAlpha\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"lg\" | \"md\" | \"sm\"",
        "defaultValue": "\"md\"",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"outline\" | \"solid\" | \"subtle\" | \"surface\"",
        "defaultValue": "\"solid\"",
        "description": "The variant of the component.",
        "required": false
      },
      "align": {
        "type": "\"-moz-initial\" | \"baseline\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"inherit\" | \"initial\" | \"normal\" | \"revert-layer\" ...",
        "description": "The CSS `align-items` property.",
        "required": false
      },
      "attached": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the borderRadius of button that are direct children will be altered to look flushed together.",
        "required": false
      },
      "basis": {
        "type": "\"-moz-fit-content\" | \"-moz-initial\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-auto\" | \"0.5\" | \"1.5\" | \"1\" | \"1/12\" | \"1/2\" ...",
        "description": "The CSS `flex-basis` property.",
        "required": false
      },
      "checkedIcon": {
        "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
        "description": "The icon to display in the checkbox when it is checked.",
        "required": false
      },
      "defaultValue": {
        "type": "Y[]",
        "defaultValue": "[]",
        "description": "The initial value of the checkbox group.",
        "required": false
      },
      "direction": {
        "type": "\"-moz-initial\" | \"column-reverse\" | \"column\" | \"inherit\" | \"initial\" | \"revert-layer\" | \"revert\" | \"row-reverse\" | \"row\" | \"unset\" ...",
        "description": "The CSS `flex-direction` property.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be disabled.",
        "required": false
      },
      "errorBorderColor": {
        "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
        "description": "The border color when the input is invalid.",
        "required": false
      },
      "focusBorderColor": {
        "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
        "description": "The border color when the input is focused.",
        "required": false
      },
      "grow": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the children will grow to fill the available space.",
        "required": false
      },
      "invalid": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be invalid.",
        "required": false
      },
      "items": {
        "type": "CheckboxItem<Y>[]",
        "defaultValue": "[]",
        "description": "If provided, generate options based on items.",
        "required": false
      },
      "justify": {
        "type": "\"-moz-initial\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"inherit\" | \"initial\" | \"left\" | \"normal\" | \"revert-layer\" ...",
        "description": "The CSS `justify-content` property.",
        "required": false
      },
      "max": {
        "type": "number",
        "description": "The maximum number of checkboxes that can be checked.",
        "required": false
      },
      "onChange": {
        "type": "(value: Y[]) => void",
        "description": "The callback fired when any children checkbox is checked or unchecked.",
        "required": false
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "defaultValue": "\"horizontal\"",
        "description": "The orientation of the group.",
        "required": false
      },
      "readOnly": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be readonly.",
        "required": false
      },
      "required": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be required.",
        "required": false
      },
      "shape": {
        "type": "\"rounded\" | \"square\"",
        "defaultValue": "\"rounded\"",
        "description": "The shape of the component",
        "required": false
      },
      "shrink": {
        "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"revert-layer\" | \"revert\" | \"unset\" | number & {} ...",
        "description": "The CSS `flex-shrink` property.",
        "required": false
      },
      "stacking": {
        "type": "\"first-on-top\" | \"last-on-top\"",
        "description": "The stacking order of the group.",
        "required": false
      },
      "value": {
        "type": "Y[]",
        "description": "The value of the checkbox group.",
        "required": false
      },
      "wrap": {
        "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"nowrap\" | \"revert-layer\" | \"revert\" | \"unset\" | \"wrap-reverse\" | \"wrap\" ...",
        "description": "The CSS `flex-wrap` property.",
        "required": false
      }
    }
  },
  "CheckboxGroupRoot": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "\"amber\" | \"black\" | \"blackAlpha\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"lg\" | \"md\" | \"sm\"",
      "defaultValue": "\"md\"",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"outline\" | \"solid\" | \"subtle\" | \"surface\"",
      "defaultValue": "\"solid\"",
      "description": "The variant of the component.",
      "required": false
    },
    "align": {
      "type": "\"-moz-initial\" | \"baseline\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"inherit\" | \"initial\" | \"normal\" | \"revert-layer\" ...",
      "description": "The CSS `align-items` property.",
      "required": false
    },
    "attached": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the borderRadius of button that are direct children will be altered to look flushed together.",
      "required": false
    },
    "basis": {
      "type": "\"-moz-fit-content\" | \"-moz-initial\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-auto\" | \"0.5\" | \"1.5\" | \"1\" | \"1/12\" | \"1/2\" ...",
      "description": "The CSS `flex-basis` property.",
      "required": false
    },
    "checkedIcon": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
      "description": "The icon to display in the checkbox when it is checked.",
      "required": false
    },
    "defaultValue": {
      "type": "Y[]",
      "defaultValue": "[]",
      "description": "The initial value of the checkbox group.",
      "required": false
    },
    "direction": {
      "type": "\"-moz-initial\" | \"column-reverse\" | \"column\" | \"inherit\" | \"initial\" | \"revert-layer\" | \"revert\" | \"row-reverse\" | \"row\" | \"unset\" ...",
      "description": "The CSS `flex-direction` property.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be disabled.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "focusBorderColor": {
      "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "grow": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the children will grow to fill the available space.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be invalid.",
      "required": false
    },
    "items": {
      "type": "CheckboxItem<Y>[]",
      "defaultValue": "[]",
      "description": "If provided, generate options based on items.",
      "required": false
    },
    "justify": {
      "type": "\"-moz-initial\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"inherit\" | \"initial\" | \"left\" | \"normal\" | \"revert-layer\" ...",
      "description": "The CSS `justify-content` property.",
      "required": false
    },
    "max": {
      "type": "number",
      "description": "The maximum number of checkboxes that can be checked.",
      "required": false
    },
    "onChange": {
      "type": "(value: Y[]) => void",
      "description": "The callback fired when any children checkbox is checked or unchecked.",
      "required": false
    },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "\"horizontal\"",
      "description": "The orientation of the group.",
      "required": false
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be readonly.",
      "required": false
    },
    "required": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be required.",
      "required": false
    },
    "shape": {
      "type": "\"rounded\" | \"square\"",
      "defaultValue": "\"rounded\"",
      "description": "The shape of the component",
      "required": false
    },
    "shrink": {
      "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"revert-layer\" | \"revert\" | \"unset\" | number & {} ...",
      "description": "The CSS `flex-shrink` property.",
      "required": false
    },
    "stacking": {
      "type": "\"first-on-top\" | \"last-on-top\"",
      "description": "The stacking order of the group.",
      "required": false
    },
    "value": {
      "type": "Y[]",
      "description": "The value of the checkbox group.",
      "required": false
    },
    "wrap": {
      "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"nowrap\" | \"revert-layer\" | \"revert\" | \"unset\" | \"wrap-reverse\" | \"wrap\" ...",
      "description": "The CSS `flex-wrap` property.",
      "required": false
    }
  }
}
