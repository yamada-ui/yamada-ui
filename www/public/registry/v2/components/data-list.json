{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "data-list.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const dataListStyle = defineComponentSlotStyle({\n  base: {\n    description: {},\n    item: {},\n    root: {\n      display: \"grid\",\n      w: \"fit-content\",\n    },\n    term: {},\n  },\n\n  props: {\n    /**\n     * The orientation of the data list.\n     *\n     * @default 'horizontal'\n     */\n    orientation: {\n      horizontal: {\n        item: {\n          display: \"contents\",\n        },\n        root: {\n          gridTemplateColumns: \"repeat({--col}, auto)\",\n        },\n      },\n      vertical: {\n        item: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"xs\",\n        },\n        root: {\n          gridTemplateColumns: \"auto\",\n        },\n      },\n    },\n  },\n\n  variants: {\n    bold: {\n      description: {\n        color: \"fg.muted\",\n      },\n      term: {\n        fontWeight: \"semibold\",\n      },\n    },\n    grid: {\n      root: {\n        borderWidth: \"1px\",\n        gap: \"0\",\n        rounded: \"l2\",\n      },\n      term: { color: \"fg.muted\" },\n    },\n    subtle: {\n      term: { color: \"fg.muted\" },\n    },\n  },\n\n  sizes: {\n    sm: {\n      root: {\n        fontSize: \"xs\",\n        gap: \"2\",\n      },\n    },\n    md: {\n      root: {\n        fontSize: \"sm\",\n        gap: \"4\",\n      },\n    },\n    lg: {\n      root: {\n        fontSize: \"md\",\n        gap: \"6\",\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        item: {\n          _notFirst: {\n            _child: {\n              borderTopWidth: \"1px\",\n            },\n          },\n          _notFirstChild: {\n            borderLeftWidth: \"1px\",\n          },\n        },\n      },\n      variant: \"grid\",\n      orientation: \"horizontal\",\n    },\n    {\n      css: {\n        item: {\n          gap: \"0\",\n          _notFirst: {\n            borderTopWidth: \"1px\",\n          },\n          _notFirstChild: {\n            borderTopWidth: \"1px\",\n          },\n        },\n      },\n      variant: \"grid\",\n      orientation: \"vertical\",\n    },\n    {\n      css: {\n        description: {\n          lineHeight: \"shorter\",\n          px: \"2\",\n          py: \"1\",\n        },\n        term: {\n          lineHeight: \"shorter\",\n          px: \"2\",\n          py: \"1\",\n        },\n      },\n      size: \"sm\",\n      variant: \"grid\",\n    },\n    {\n      css: {\n        description: {\n          lineHeight: \"shorter\",\n          px: \"3\",\n          py: \"2\",\n        },\n        term: {\n          lineHeight: \"shorter\",\n          px: \"3\",\n          py: \"2\",\n        },\n      },\n      size: \"md\",\n      variant: \"grid\",\n    },\n    {\n      css: {\n        description: {\n          lineHeight: \"moderate\",\n          px: \"4\",\n          py: \"3\",\n        },\n        term: {\n          lineHeight: \"moderate\",\n          px: \"4\",\n          py: \"3\",\n        },\n      },\n      size: \"lg\",\n      variant: \"grid\",\n    },\n  ],\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"subtle\",\n    orientation: \"horizontal\",\n  },\n})\n\nexport type DataListStyle = typeof dataListStyle\n"
    },
    {
      "name": "data-list.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { DataListStyle } from \"./data-list.style\"\nimport { useMemo } from \"react\"\nimport {\n  createSlotComponent,\n  styled,\n  getValidChildren,\n  isArray,\n  isEmpty,\n  omitChildren,\n  pickChildren,\n} from \"@yamada-ui/react\"\nimport { dataListStyle } from \"./data-list.style\"\n\nexport interface DataListRootProps\n  extends HTMLStyledProps<\"dl\">,\n    ThemeProps<DataListStyle> {\n  /**\n   * If provided, generate elements based on items.\n   */\n  items?: DataListItemProps[]\n  /**\n   * The props for the data list description component.\n   */\n  descriptionProps?: DataListDescriptionProps\n  /**\n   * The props for the data list term component.\n   */\n  termProps?: DataListTermProps\n}\n\ninterface ComponentContext\n  extends Pick<DataListRootProps, \"descriptionProps\" | \"termProps\"> {}\n\nconst {\n  ComponentContext,\n  PropsContext: DataListPropsContext,\n  useComponentContext,\n  usePropsContext: useDataListPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<DataListRootProps, DataListStyle, ComponentContext>(\n  \"data-list\",\n  dataListStyle,\n)\n\nexport { DataListPropsContext, useDataListPropsContext }\n\n/**\n * `DataList` is used to display a list of data items.\n *\n * @see https://yamada-ui.com/components/data-list\n */\nexport const DataListRoot = withProvider<\"dl\", DataListRootProps>(\n  ({ style, children, items = [], descriptionProps, termProps, ...rest }) => {\n    const col = useMemo(() => {\n      let col = 0\n\n      if (children) {\n        const validChildren = getValidChildren(children)\n        const dataListItems = pickChildren(validChildren, DataListItem)\n\n        dataListItems.forEach(({ props }) => {\n          const validChildren = getValidChildren(props.children)\n          const pickedChildren = pickChildren(\n            validChildren,\n            DataListTerm,\n            DataListDescription,\n          )\n\n          col = Math.max(col, pickedChildren.length)\n        })\n      } else {\n        items.forEach(({ description, term }) => {\n          const termCount = !term ? 0 : isArray(term) ? term.length : 1\n          const descriptionCount = !description\n            ? 0\n            : isArray(description)\n              ? description.length\n              : 1\n\n          col = Math.max(col, termCount + descriptionCount)\n        })\n      }\n\n      return col\n    }, [children, items])\n    const computedChildren = useMemo(\n      () =>\n        items.map((props, index) => <DataListItem key={index} {...props} />),\n      [items],\n    )\n    const context = useMemo(\n      () => ({\n        descriptionProps,\n        termProps,\n      }),\n      [descriptionProps, termProps],\n    )\n\n    return (\n      <ComponentContext value={context}>\n        <styled.dl style={{ \"--col\": col, ...style }} {...rest}>\n          {children ?? computedChildren}\n        </styled.dl>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)()\n\nexport interface DataListItemProps extends HTMLStyledProps {\n  /**\n   * The data list description to use.\n   */\n  description?: ReactNode | ReactNode[]\n  /**\n   * The data list term to use.\n   */\n  term?: ReactNode | ReactNode[]\n  /**\n   * The props for the data list description component.\n   */\n  descriptionProps?: DataListDescriptionProps\n  /**\n   * The props for the data list term component.\n   */\n  termProps?: DataListTermProps\n}\n\nexport const DataListItem = withContext<\"div\", DataListItemProps>(\n  ({\n    children,\n    description,\n    term,\n    descriptionProps: customDescriptionProps,\n    termProps: customTermProps,\n    ...rest\n  }) => {\n    const { descriptionProps, termProps } = useComponentContext()\n\n    const [omittedChildren, customTerms, customDescriptions] = useMemo(() => {\n      const validChildren = getValidChildren(children)\n\n      if (isEmpty(validChildren)) return [children]\n\n      const customTerms = pickChildren(validChildren, DataListTerm)\n      const customDescriptions = pickChildren(\n        validChildren,\n        DataListDescription,\n      )\n      const omittedChildren = omitChildren(\n        validChildren,\n        DataListTerm,\n        DataListDescription,\n      )\n\n      return [omittedChildren, customTerms, customDescriptions] as const\n    }, [children])\n\n    return (\n      <styled.div {...rest}>\n        {!isEmpty(customTerms) ? (\n          customTerms\n        ) : isArray(term) ? (\n          term.map((item, index) => (\n            <DataListTerm key={index} {...termProps} {...customTermProps}>\n              {item}\n            </DataListTerm>\n          ))\n        ) : (\n          <DataListTerm {...termProps} {...customTermProps}>\n            {term}\n          </DataListTerm>\n        )}\n\n        {!isEmpty(customDescriptions) ? (\n          customDescriptions\n        ) : isArray(description) ? (\n          description.map((item, index) => (\n            <DataListDescription\n              key={index}\n              {...descriptionProps}\n              {...customDescriptionProps}\n            >\n              {item}\n            </DataListDescription>\n          ))\n        ) : (\n          <DataListDescription\n            {...descriptionProps}\n            {...customDescriptionProps}\n          >\n            {description}\n          </DataListDescription>\n        )}\n\n        {omittedChildren}\n      </styled.div>\n    )\n  },\n  \"item\",\n)()\n\nexport interface DataListTermProps extends HTMLStyledProps<\"dt\"> {}\n\nexport const DataListTerm = withContext<\"dt\", DataListTermProps>(\"dt\", \"term\")()\n\nexport interface DataListDescriptionProps extends HTMLStyledProps<\"dd\"> {}\n\nexport const DataListDescription = withContext<\"dd\", DataListDescriptionProps>(\n  \"dd\",\n  \"description\",\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./data-list.style\"\nexport type {\n  DataListDescriptionProps,\n  DataListItemProps,\n  DataListRootProps,\n  DataListTermProps,\n} from \"./data-list\"\nexport {\n  DataListDescription,\n  DataListItem,\n  DataListPropsContext,\n  DataListRoot,\n  DataListTerm,\n  useDataListPropsContext,\n} from \"./data-list\"\nexport * as DataList from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  DataListDescription as Description,\n  DataListItem as Item,\n  DataListPropsContext as PropsContext,\n  DataListRoot as Root,\n  DataListTerm as Term,\n  useDataListPropsContext as usePropsContext,\n} from \"./data-list\"\nexport type {\n  DataListDescriptionProps as DescriptionProps,\n  DataListItemProps as ItemProps,\n  DataListRootProps as RootProps,\n  DataListTermProps as TermProps,\n} from \"./data-list\"\n"
    }
  ]
}
