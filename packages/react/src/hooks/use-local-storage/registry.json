{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": ["use-window-event"],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useState } from \"react\"\nimport { isFunction } from \"@yamada-ui/react\"\nimport { useWindowEvent } from \"../use-window-event\"\n\nexport type StorageType = \"localStorage\" | \"sessionStorage\"\n\nexport interface StorageProps<Y> {\n  key: string\n  defaultValue?: Y\n  deserialize?: (value: string | undefined) => Y\n  getInitialValueInEffect?: boolean\n  serialize?: (value: Y) => string\n}\n\nconst serializeJSON = <Y,>(value: Y, name: string) => {\n  try {\n    return JSON.stringify(value)\n  } catch {\n    throw new Error(`useLocalStorage ${name}: Failed to serialize the value`)\n  }\n}\n\nconst deserializeJSON = (value: string | undefined) => {\n  if (!value) return value\n\n  try {\n    return JSON.parse(value)\n  } catch {\n    return value\n  }\n}\n\nexport const createStorage = <Y,>(type: StorageType, name: string) => {\n  const eventName =\n    type === \"localStorage\" ? \"local-storage\" : \"session-storage\"\n\n  return ({\n    key,\n    defaultValue = undefined,\n    deserialize = deserializeJSON,\n    getInitialValueInEffect = true,\n    serialize = (value: Y) => serializeJSON(value, name),\n  }: StorageProps<Y>) => {\n    const readStorageValue = useCallback(\n      (skipStorage?: boolean): Y => {\n        if (\n          typeof window === \"undefined\" ||\n          !(type in window) ||\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          window[type] == null ||\n          skipStorage\n        ) {\n          return (defaultValue ?? \"\") as Y\n        }\n\n        const storageValue = window[type].getItem(key)\n\n        return storageValue !== null\n          ? deserialize(storageValue)\n          : ((defaultValue ?? \"\") as Y)\n      },\n      [key, deserialize, defaultValue],\n    )\n\n    const [value, setValue] = useState<Y>(\n      readStorageValue(getInitialValueInEffect),\n    )\n\n    const setStorageValue = useCallback(\n      (valOrFn: ((prevState: Y) => Y) | Y) => {\n        if (isFunction(valOrFn)) {\n          setValue((current) => {\n            const result = valOrFn(current)\n\n            window[type].setItem(key, serialize(result))\n            window.dispatchEvent(\n              new CustomEvent(eventName, {\n                detail: { key, value: valOrFn(current) },\n              }),\n            )\n\n            return result\n          })\n        } else {\n          window[type].setItem(key, serialize(valOrFn))\n          window.dispatchEvent(\n            new CustomEvent(eventName, { detail: { key, value: valOrFn } }),\n          )\n\n          setValue(valOrFn)\n        }\n      },\n      [key, serialize],\n    )\n\n    const removeStorageValue = useCallback(() => {\n      window[type].removeItem(key)\n      setValue(defaultValue as Y)\n    }, [defaultValue, key])\n\n    useWindowEvent(\"storage\", (ev) => {\n      if (ev.storageArea === window[type] && ev.key === key)\n        setValue(deserialize(ev.newValue ?? undefined))\n    })\n\n    useWindowEvent(eventName, (ev) => {\n      if (ev.detail.key === key) setValue(ev.detail.value)\n    })\n\n    useEffect(() => {\n      if (defaultValue !== undefined && value === undefined)\n        setStorageValue(defaultValue)\n    }, [defaultValue, value, setStorageValue])\n\n    useEffect(() => {\n      if (getInitialValueInEffect) setValue(readStorageValue())\n    }, [getInitialValueInEffect, readStorageValue])\n\n    return [\n      value === undefined ? defaultValue : value,\n      setStorageValue,\n      removeStorageValue,\n    ] as const\n  }\n}\n\n/**\n * `useLocalStorage` is a custom hook for storing, updating, and retrieving values in local storage.\n *\n * @see https://yamada-ui.com/hooks/use-local-storage\n */\nexport const useLocalStorage = <Y = string,>(props: StorageProps<Y>) =>\n  createStorage<Y>(\"localStorage\", \"use-local-storage\")(props)\n"
    }
  ]
}
