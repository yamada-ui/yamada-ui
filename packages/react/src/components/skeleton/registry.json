{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": ["use-value"],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./skeleton.style\"\nexport {\n  Skeleton,\n  SkeletonPropsContext,\n  useSkeletonPropsContext,\n} from \"./skeleton\"\nexport type { SkeletonProps } from \"./skeleton\"\nexport { SkeletonCircle } from \"./skeleton-circle\"\nexport type { SkeletonCircleProps } from \"./skeleton-circle\"\nexport { SkeletonText } from \"./skeleton-text\"\nexport type { SkeletonTextProps } from \"./skeleton-text\"\n"
    },
    {
      "name": "skeleton-circle.tsx",
      "content": "import type { Component } from \"@yamada-ui/react\"\nimport type { SkeletonProps } from \"./skeleton\"\nimport { mergeCSS } from \"@yamada-ui/react\"\nimport { Skeleton } from \"./skeleton\"\n\nexport interface SkeletonCircleProps extends SkeletonProps {}\n\nexport const SkeletonCircle = (({ css, ...rest }: SkeletonCircleProps) => {\n  return (\n    <Skeleton\n      css={mergeCSS(css, { \"--height\": \"sizes.10\", \"--width\": \"sizes.10\" })}\n      _loading={{ rounded: \"full\" }}\n      {...rest}\n    />\n  )\n}) as Component<\"div\", SkeletonCircleProps>\n"
    },
    {
      "name": "skeleton-text.tsx",
      "content": "\"use client\"\n\nimport type { Component, HTMLStyledProps, StyleValue } from \"@yamada-ui/react\"\nimport type { SkeletonProps } from \"./skeleton\"\nimport { mergeCSS, styled } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { Skeleton } from \"./skeleton\"\n\nexport interface SkeletonTextProps extends Omit<SkeletonProps, \"lineClamp\"> {\n  /**\n   * The number of lines to display.\n   */\n  lineClamp?: StyleValue<number>\n  /**\n   * Props for the root element.\n   */\n  rootProps?: HTMLStyledProps\n}\n\nexport const SkeletonText = (({\n  css,\n  children,\n  gap = \"2\",\n  lineClamp: lineClampProp = 3,\n  loading = true,\n  _loading,\n  _notFirst,\n  rootProps,\n  ...rest\n}: SkeletonTextProps) => {\n  const lineClamp = useValue(lineClampProp)\n\n  return (\n    <styled.div w=\"full\" {...rootProps}>\n      {Array.from({ length: lineClamp }).map((_, index) => {\n        if (!loading && index > 0) return null\n\n        return (\n          <Skeleton\n            key={index}\n            css={mergeCSS(css, { \"--height\": \"sizes.4\" })}\n            loading={loading}\n            _loading={{\n              _last: { maxW: lineClamp > 1 ? \"80%\" : \"100%\" },\n              ..._loading,\n            }}\n            _notFirst={{ mt: gap, ..._notFirst }}\n            {...rest}\n          >\n            {!loading && index === 0 ? children : undefined}\n          </Skeleton>\n        )\n      })}\n    </styled.div>\n  )\n}) as Component<\"div\", SkeletonTextProps>\n"
    },
    {
      "name": "skeleton.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const skeletonStyle = defineComponentStyle({\n  base: {},\n\n  props: {\n    /**\n     * If `false`, it'll render its children with a nice fade transition.\n     *\n     * @default true\n     */\n    loading: {\n      false: {\n        animationDuration: \"{fade-duration, 0.1s}\",\n        animationIterationCount: \"1\",\n        animationName: \"fade-in\",\n        animationTimingFunction: \"ease-out\",\n        bg: \"unset\",\n      },\n      true: {\n        \"&::before, &::after, *\": {\n          visibility: \"hidden\",\n        },\n        \"--height\": \"sizes.6\",\n        \"--width\": \"sizes.full\",\n        bgClip: \"padding-box\",\n        boxShadow: \"none\",\n        color: \"transparent\",\n        cursor: \"default\",\n        flexShrink: \"0\",\n        h: \"{height}\",\n        maxW: \"full\",\n        pointerEvents: \"none\",\n        rounded: \"l1\",\n        userSelect: \"none\",\n        w: \"{width}\",\n      },\n    },\n  },\n\n  variants: {\n    none: {\n      animation: \"none\",\n    },\n    pulse: {\n      animationDuration: \"{duration, 1.2s}\",\n      animationIterationCount: \"infinite\",\n      animationName: \"pulse\",\n      bg: \"bg.muted\",\n    },\n    shine: {\n      \"--animation-from\": \"200%\",\n      \"--animation-to\": \"-200%\",\n      \"--end-color\": \"colors.bg.muted\",\n      \"--start-color\": \"colors.bg.subtle\",\n      animationDuration: \"{duration, 5s}\",\n      animationIterationCount: \"infinite\",\n      animationName: \"bg-position\",\n      animationTimingFunction: \"ease-in-out\",\n      bgImage:\n        \"linear-gradient(270deg, {start-color}, {end-color}, {end-color}, {start-color})\",\n      bgSize: \"400% 100%\",\n    },\n  },\n\n  defaultProps: {\n    variant: \"pulse\",\n    loading: true,\n  },\n})\n\nexport type SkeletonStyle = typeof skeletonStyle\n"
    },
    {
      "name": "skeleton.tsx",
      "content": "\"use client\"\n\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { SkeletonStyle } from \"./skeleton.style\"\nimport {\n  createComponent,\n  varAttr,\n  dataAttr,\n  isNumber,\n  useValidChildren,\n} from \"@yamada-ui/react\"\nimport { skeletonStyle } from \"./skeleton.style\"\n\nexport interface SkeletonProps\n  extends HTMLStyledProps,\n    ThemeProps<SkeletonStyle> {\n  /**\n   * The animation duration in seconds.\n   */\n  duration?: number | string\n  /**\n   * The color at the animation end.\n   */\n  endColor?: CSSProps[\"color\"]\n  /**\n   * The fade in duration in seconds. Requires `loaded` toggled to `true` in order to see the transition.\n   */\n  fadeDuration?: number | string\n  /**\n   * If `true`, the skeleton will take the width of it's children.\n   *\n   * @default false\n   */\n  fitContent?: boolean\n  /**\n   * The color at the animation start.\n   */\n  startColor?: CSSProps[\"color\"]\n}\n\nconst {\n  PropsContext: SkeletonPropsContext,\n  usePropsContext: useSkeletonPropsContext,\n  withContext,\n} = createComponent<SkeletonProps, SkeletonStyle>(\"skeleton\", skeletonStyle)\n\nexport { SkeletonPropsContext, useSkeletonPropsContext }\n\n/**\n * `Skeleton` is a component that acts as a placeholder until content is loaded.\n *\n * @see https://yamada-ui.com/components/skeleton\n */\nexport const Skeleton = withContext(\"div\", { transferProps: [\"loading\"] })(\n  undefined,\n  ({\n    children,\n    duration,\n    endColor,\n    fadeDuration,\n    fitContent,\n    loading,\n    startColor,\n    ...rest\n  }) => {\n    const validChildren = useValidChildren(children)\n    const hasChildren = !!validChildren.length\n\n    fitContent ??= hasChildren\n\n    return {\n      \"aria-busy\": loading,\n      \"data-loaded\": dataAttr(!loading),\n      \"data-loading\": dataAttr(loading),\n      \"--duration\": isNumber(duration) ? `${duration}s` : duration,\n      \"--end-color\": varAttr(endColor, \"colors\"),\n      \"--fade-duration\": isNumber(fadeDuration)\n        ? `${fadeDuration}s`\n        : fadeDuration,\n      \"--height\": fitContent ? \"fit-content\" : undefined,\n      \"--start-color\": varAttr(startColor, \"colors\"),\n      \"--width\": fitContent ? \"fit-content\" : undefined,\n      children,\n      ...rest,\n    }\n  },\n)\n"
    }
  ]
}
