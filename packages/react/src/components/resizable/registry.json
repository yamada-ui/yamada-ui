{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": ["react-resizable-panels@^3.0.4"],
    "hooks": ["use-value"],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./resizable.style\"\nexport * as Resizable from \"./namespace\"\nexport {\n  ResizableItem,\n  ResizablePropsContext,\n  ResizableRoot,\n  ResizableTrigger,\n  useResizablePropsContext,\n} from \"./resizable\"\nexport type {\n  ResizableItemProps,\n  ResizableRootProps,\n  ResizableTriggerProps,\n} from \"./resizable\"\nexport * from \"./use-resizable\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  ResizableItem as Item,\n  ResizablePropsContext as PropsContext,\n  ResizableRoot as Root,\n  ResizableTrigger as Trigger,\n  useResizablePropsContext as usePropsContext,\n} from \"./resizable\"\nexport type {\n  ResizableItemProps as ItemProps,\n  ResizableRootProps as RootProps,\n  ResizableTriggerProps as TriggerProps,\n} from \"./resizable\"\nexport {\n  ResizableContext as Context,\n  useResizableContext as useContext,\n} from \"./use-resizable\"\nexport type {\n  ResizableGroupControl as GroupControl,\n  ResizableItemControl as ItemControl,\n  ResizableStorage as Storage,\n} from \"./use-resizable\"\n"
    },
    {
      "name": "resizable.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const resizableStyle = defineComponentSlotStyle({\n  base: {\n    icon: {\n      alignItems: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      left: \"50%\",\n      position: \"absolute\",\n      top: \"50%\",\n      translateX: \"-50%\",\n      translateY: \"-50%\",\n    },\n    item: {\n      boxSize: \"full\",\n    },\n    root: {\n      boxSize: \"full\",\n    },\n    trigger: {\n      position: \"relative\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n      _after: {\n        transitionDuration: \"moderate\",\n        transitionProperty: \"common\",\n      },\n    },\n  },\n\n  variants: {\n    border: {\n      icon: {\n        bg: \"colorScheme.muted\",\n        color: \"colorScheme.fg\",\n        py: \"1\",\n        rounded: \"l1\",\n      },\n      trigger: {\n        bg: \"colorScheme.muted\",\n        focusVisibleRing: \"none\",\n        _after: {\n          position: \"absolute\",\n        },\n        _hover: {\n          bg: \"colorScheme.emphasized\",\n        },\n        _focusVisible: {\n          bg: \"colorScheme.emphasized\",\n        },\n      },\n    },\n    plain: {\n      trigger: {\n        focusVisibleRing: \"none\",\n        _after: {\n          position: \"absolute\",\n        },\n      },\n    },\n    spacer: {\n      icon: {\n        color: \"colorScheme.fg\",\n        transitionDuration: \"moderate\",\n        transitionProperty: \"common\",\n        _active: {\n          color: \"transparent\",\n        },\n      },\n      trigger: {\n        focusVisibleRing: \"none\",\n        p: \"1\",\n        _after: {\n          bg: \"transparent\",\n          display: \"block\",\n          rounded: \"full\",\n        },\n        _hover: {\n          _after: {\n            bg: \"colorScheme.bg\",\n          },\n          _icon: {\n            color: \"transparent\",\n          },\n        },\n        _focusVisible: {\n          _after: {\n            bg: \"colorScheme.bg\",\n          },\n          _icon: {\n            color: \"transparent\",\n          },\n        },\n      },\n    },\n  },\n\n  props: {\n    /**\n     * The orientation of the resizable.\n     *\n     * @default 'horizontal'\n     */\n    orientation: {\n      horizontal: {\n        icon: {\n          transform: \"translate(-50%, -50%) rotate(0deg)\",\n        },\n      },\n      vertical: {\n        icon: {\n          transform: \"translate(-50%, -50%) rotate(90deg)\",\n        },\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        trigger: {\n          h: \"px\",\n          _after: {\n            h: \"2\",\n            left: \"0\",\n            right: \"0\",\n            transform: \"translateY(-50%)\",\n          },\n        },\n      },\n      variant: \"border\",\n      orientation: \"vertical\",\n    },\n    {\n      css: {\n        trigger: {\n          w: \"px\",\n          _after: {\n            bottom: \"0\",\n            top: \"0\",\n            transform: \"translateX(-50%)\",\n            w: \"2\",\n          },\n        },\n      },\n      variant: \"border\",\n      orientation: \"horizontal\",\n    },\n    {\n      css: {\n        trigger: {\n          _after: { h: \"2\", w: \"full\" },\n        },\n      },\n      variant: \"spacer\",\n      orientation: \"vertical\",\n    },\n    {\n      css: {\n        trigger: {\n          _after: { h: \"full\", w: \"2\" },\n        },\n      },\n      variant: \"spacer\",\n      orientation: \"horizontal\",\n    },\n    {\n      css: {\n        trigger: {\n          _after: {\n            h: \"2\",\n            left: \"0\",\n            right: \"0\",\n            transform: \"translateY(-50%)\",\n          },\n        },\n      },\n      variant: \"plain\",\n      orientation: \"vertical\",\n    },\n    {\n      css: {\n        trigger: {\n          _after: {\n            bottom: \"0\",\n            top: \"0\",\n            transform: \"translateX(-50%)\",\n            w: \"2\",\n          },\n        },\n      },\n      variant: \"plain\",\n      orientation: \"horizontal\",\n    },\n  ],\n\n  defaultProps: {\n    variant: \"border\",\n    orientation: \"horizontal\",\n  },\n})\n\nexport type ResizableStyle = typeof resizableStyle\n"
    },
    {
      "name": "resizable.tsx",
      "content": "\"use client\"\n\nimport type { ForwardedRef, ReactElement } from \"react\"\nimport type {\n  HTMLStyledProps,\n  HTMLStyledPropsWithoutAs,\n  ThemeProps,\n} from \"@yamada-ui/react\"\nimport type { ResizableStyle } from \"./resizable.style\"\nimport type {\n  UseResizableItemProps,\n  UseResizableProps,\n  UseResizableTriggerProps,\n} from \"./use-resizable\"\nimport { useMemo } from \"react\"\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { resizableStyle } from \"./resizable.style\"\nimport {\n  ResizableContext,\n  useResizable,\n  useResizableItem,\n  useResizableTrigger,\n} from \"./use-resizable\"\n\n/**\n * `Resizable` is accessible resizable panel groups and layouts with keyboard support.\n *\n * @see https://yamada-ui.com/components/resizable\n */\nexport interface ResizableRootProps\n  extends HTMLStyledProps,\n    ThemeProps<ResizableStyle>,\n    Omit<UseResizableProps, \"orientation\"> {\n  /**\n   * Ref for resizable root element.\n   */\n  rootRef?: ForwardedRef<HTMLDivElement>\n}\n\nconst {\n  PropsContext: ResizablePropsContext,\n  usePropsContext: useResizablePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<ResizableRootProps, ResizableStyle>(\n  \"resizable\",\n  resizableStyle,\n)\n\nexport { ResizablePropsContext, useResizablePropsContext }\n\nexport const ResizableRoot = withProvider<\n  \"div\",\n  ResizableRootProps,\n  \"orientation\"\n>(\n  ({ children, orientation: orientationProp, rootRef, ...rest }) => {\n    const computedOrientation = useValue(orientationProp)\n    const { controlRef, disabled, orientation, getGroupProps, getRootProps } =\n      useResizable({\n        ...rest,\n        orientation: computedOrientation,\n      })\n\n    const context = useMemo(\n      () => ({ controlRef, disabled, orientation }),\n      [disabled, orientation, controlRef],\n    )\n\n    return (\n      <ResizableContext value={context}>\n        <styled.div {...getRootProps({ ref: rootRef })}>\n          <PanelGroup {...getGroupProps()}>{children}</PanelGroup>\n        </styled.div>\n      </ResizableContext>\n    )\n  },\n  \"root\",\n  { transferProps: [\"orientation\"] },\n)()\n\nconst StyledPanel = styled(Panel, { forwardProps: [\"order\"] })\n\nexport interface ResizableItemProps\n  extends Omit<HTMLStyledPropsWithoutAs, \"order\">,\n    UseResizableItemProps {}\n\nexport const ResizableItem = withContext<\"div\", ResizableItemProps>((props) => {\n  const { getItemProps } = useResizableItem(props)\n\n  return <StyledPanel {...getItemProps()} />\n}, \"item\")()\n\nexport interface ResizableTriggerProps\n  extends HTMLStyledPropsWithoutAs,\n    UseResizableTriggerProps {\n  /**\n   * The resizable trigger icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * Props for resizable trigger icon component.\n   */\n  iconProps?: HTMLStyledProps\n}\n\nexport const ResizableTrigger = withContext<\"div\", ResizableTriggerProps>(\n  ({ children, icon, iconProps, ...rest }) => {\n    const { getIconProps, getTriggerProps } = useResizableTrigger(rest)\n\n    return (\n      <styled.div as={PanelResizeHandle} {...getTriggerProps()}>\n        {icon ? (\n          <ResizableIcon {...getIconProps(iconProps)}>{icon}</ResizableIcon>\n        ) : null}\n\n        {children}\n      </styled.div>\n    )\n  },\n  \"trigger\",\n)()\n\ninterface ResizableIconProps extends HTMLStyledProps {}\n\nconst ResizableIcon = withContext<\"div\", ResizableIconProps>(\"div\", \"icon\")()\n"
    },
    {
      "name": "use-resizable.ts",
      "content": "\"use client\"\n\nimport type { MouseEvent, MouseEventHandler, RefObject } from \"react\"\nimport type {\n  ImperativePanelGroupHandle,\n  ImperativePanelHandle,\n  PanelGroupOnLayout,\n  PanelGroupProps,\n  PanelGroupStorage,\n  PanelProps,\n  PanelResizeHandleProps,\n} from \"react-resizable-panels\"\nimport type {\n  HTMLProps,\n  HTMLRefAttributes,\n  Orientation,\n  PropGetter,\n} from \"@yamada-ui/react\"\nimport { useCallback, useId, useLayoutEffect, useRef, useState } from \"react\"\nimport {\n  getPanelElement,\n  getPanelGroupElement,\n  getResizeHandleElement,\n} from \"react-resizable-panels\"\nimport {\n  assignRef,\n  createContext,\n  dataAttr,\n  fnAll,\n  handlerAll,\n  mergeRefs,\n} from \"@yamada-ui/react\"\n\ninterface ResizableContext\n  extends Omit<UseResizableReturn, \"getGroupProps\" | \"getRootProps\"> {}\n\nconst [ResizableContext, useResizableContext] = createContext<ResizableContext>(\n  {\n    name: \"ResizableContext\",\n  },\n)\n\nexport { ResizableContext, useResizableContext }\n\nexport interface ResizableStorage extends PanelGroupStorage {}\nexport interface ResizableGroupControl extends ImperativePanelGroupHandle {}\nexport interface ResizableItemControl extends ImperativePanelHandle {}\n\ninterface ResizableGroupProps\n  extends Omit<Partial<PanelGroupProps>, \"tagName\"> {\n  /**\n   * Ref of the resizable group callback.\n   */\n  ref?: RefObject<ResizableGroupControl>\n  /**\n   * The HTML element to render.\n   */\n  as?: keyof HTMLElementTagNameMap\n}\ninterface ResizableItemProps extends Omit<PanelProps, \"tagName\"> {\n  /**\n   * Ref of the resizable item callback.\n   */\n  ref?: RefObject<ResizableItemControl>\n  /**\n   * The HTML element to render.\n   */\n  as?: keyof HTMLElementTagNameMap\n}\ninterface ResizableTriggerProps\n  extends Omit<PanelResizeHandleProps, \"tagName\">,\n    HTMLRefAttributes {\n  /**\n   * The HTML element to render.\n   */\n  as?: keyof HTMLElementTagNameMap\n}\n\nexport interface UseResizableProps extends HTMLProps {\n  /**\n   * Ref of the resizable item callback.\n   */\n  controlRef?: RefObject<null | ResizableGroupControl>\n  /**\n   * If `true`, the resizable trigger will be disabled.\n   */\n  disabled?: boolean\n  /**\n   * Unit to resize by keyboard operation.\n   *\n   * @default 10\n   */\n  keyboardStep?: number\n  /**\n   * The orientation of the resizable.\n   *\n   * @default \"horizontal\"\n   */\n  orientation?: Orientation\n  /**\n   * A callback that gets and sets a value in custom storage.\n   */\n  storage?: PanelGroupStorage\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  storageKey?: string\n  /**\n   * Props for resizable component.\n   */\n  groupProps?: ResizableGroupProps\n  /**\n   * The callback invoked when resizable items are resized.\n   */\n  onLayout?: PanelGroupOnLayout\n}\n\nexport const useResizable = ({\n  id,\n  ref,\n\n  controlRef: controlRefProp,\n  disabled,\n  keyboardStep,\n  orientation = \"horizontal\",\n  storage,\n  storageKey,\n  groupProps = {},\n  onLayout,\n  ...rest\n}: UseResizableProps = {}) => {\n  const controlRef = useRef<ResizableGroupControl>(null)\n  const uuid = useId()\n\n  id ??= uuid\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}) => ({ ...rest, ...props }),\n    [rest],\n  )\n\n  const getGroupProps: PropGetter<\n    ResizableGroupProps,\n    undefined,\n    PanelGroupProps\n  > = useCallback(\n    ({ ref, ...props } = {}) => ({\n      id,\n      autoSaveId: storageKey,\n      direction: orientation,\n      keyboardResizeBy: keyboardStep,\n      storage,\n      ...groupProps,\n      ...props,\n      ref: mergeRefs(ref, controlRefProp, controlRef),\n      tagName: props.as ?? groupProps.as,\n      onLayout: fnAll(props.onLayout, groupProps.onLayout, onLayout),\n    }),\n    [\n      id,\n      orientation,\n      groupProps,\n      controlRefProp,\n      storageKey,\n      keyboardStep,\n      onLayout,\n      storage,\n    ],\n  )\n\n  useLayoutEffect(() => {\n    const el = getPanelGroupElement(id) as HTMLDivElement | null\n\n    assignRef(ref, el)\n  }, [ref, id])\n\n  return {\n    controlRef,\n    disabled,\n    orientation,\n    getGroupProps,\n    getRootProps,\n  }\n}\n\nexport type UseResizableReturn = ReturnType<typeof useResizable>\n\nexport interface UseResizableItemProps\n  extends HTMLProps,\n    Pick<ResizableItemProps, \"as\"> {\n  /**\n   * The collapsed size of the resizable item.\n   */\n  collapsedSize?: number\n  /**\n   * If `true`, the resizable item can be collapsed.\n   *\n   * @default false\n   */\n  collapsible?: boolean\n  /**\n   * Ref of the resizable item callback.\n   */\n  controlRef?: RefObject<null | ResizableItemControl>\n  /**\n   * The initial size of the resizable item.\n   */\n  defaultSize?: number\n  /**\n   * The maximum allowed value of the resizable item.\n   */\n  maxSize?: number\n  /**\n   * The minimum allowed value of the resizable item.\n   */\n  minSize?: number\n  /**\n   * Order for the resizable item.\n   */\n  order?: number\n  /**\n   * The callback invoked when resizable item are collapsed.\n   */\n  onCollapse?: () => void\n  /**\n   * The callback invoked when resizable item are expanded.\n   */\n  onExpand?: () => void\n  /**\n   * The callback invoked when resizable item are resized.\n   */\n  onResize?: (size: number, prevSize: number | undefined) => void\n}\n\nexport const useResizableItem = ({\n  id,\n  ref,\n  as,\n  controlRef,\n  onCollapse,\n  onExpand,\n  onResize,\n  ...rest\n}: UseResizableItemProps) => {\n  const uuid = useId()\n\n  id ??= uuid\n\n  const getItemProps: PropGetter<ResizableItemProps, undefined, PanelProps> =\n    useCallback(\n      ({ ref, ...props } = {}) => ({\n        id,\n        ref: mergeRefs(ref, controlRef),\n        tagName: props.as ?? as,\n        ...props,\n        ...rest,\n        onCollapse: fnAll(props.onCollapse, onCollapse),\n        onExpand: fnAll(props.onExpand, onExpand),\n        onResize: fnAll(props.onResize, onResize),\n      }),\n      [as, controlRef, id, onCollapse, onExpand, onResize, rest],\n    )\n\n  useLayoutEffect(() => {\n    const el = getPanelElement(id) as HTMLDivElement | null\n\n    assignRef(ref, el)\n  }, [ref, id])\n\n  return {\n    getItemProps,\n  }\n}\n\nexport type UseResizableItemReturn = ReturnType<typeof useResizableItem>\n\nexport interface UseResizableTriggerProps\n  extends HTMLProps,\n    Pick<ResizableTriggerProps, \"as\"> {\n  /**\n   * If `true`, the resizable trigger will be disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * The callback invoked when resizable trigger are dragged.\n   */\n  onDragging?: (dragging: boolean) => void\n}\n\nexport const useResizableTrigger = ({\n  id,\n  ref,\n  as,\n  disabled,\n  onDragging,\n  ...rest\n}: UseResizableTriggerProps) => {\n  const uuid = useId()\n  const {\n    controlRef,\n    disabled: groupDisabled,\n    orientation,\n  } = useResizableContext()\n  const [active, setActive] = useState<boolean>(false)\n  const trulyDisabled = disabled || groupDisabled\n\n  id ??= uuid\n\n  const onDoubleClick = useCallback(\n    (ev: MouseEvent<HTMLDivElement>) => {\n      ev.preventDefault()\n\n      const layout = controlRef.current?.getLayout()\n\n      if (!layout) return\n\n      const count = layout.length\n      const size = 100 / count\n      const nextLayout = layout.map(() => size)\n\n      controlRef.current?.setLayout(nextLayout)\n    },\n    [controlRef],\n  )\n\n  const getTriggerProps: PropGetter<\n    ResizableTriggerProps,\n    undefined,\n    PanelResizeHandleProps\n  > = useCallback(\n    (props = {}) =>\n      ({\n        id,\n        \"aria-orientation\": orientation,\n        \"data-active\": dataAttr(active),\n        disabled: trulyDisabled,\n        tagName: props.as ?? as,\n        ...rest,\n        ...props,\n        onDoubleClick: handlerAll(\n          props.onDoubleClick as MouseEventHandler<HTMLDivElement> | undefined,\n          rest.onDoubleClick,\n          onDoubleClick,\n        ),\n        onDragging: fnAll(props.onDragging, onDragging, setActive),\n      }) as unknown as PanelResizeHandleProps,\n    [\n      id,\n      as,\n      orientation,\n      trulyDisabled,\n      rest,\n      onDoubleClick,\n      onDragging,\n      active,\n    ],\n  )\n\n  const getIconProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"data-active\": dataAttr(active),\n      \"data-icon\": \"\",\n      ...props,\n    }),\n    [active],\n  )\n\n  useLayoutEffect(() => {\n    const el = getResizeHandleElement(id) as HTMLDivElement | null\n\n    assignRef(ref, el)\n  }, [ref, id])\n\n  return {\n    getIconProps,\n    getTriggerProps,\n  }\n}\n\nexport type UseResizableTriggerReturn = ReturnType<typeof useResizableTrigger>\n"
    }
  ]
}
