{
  "Menu": {
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "required": false,
      "description": "The animation of the popover."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be transferred to the first interactive element when the popover opens."
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "'clippingParents'",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier."
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The number of delay time to close."
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you hit the `Esc` key."
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the list element will be closed when value is selected."
    },
    "defaultIsOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be initially opened."
    },
    "duration": {
      "type": "number | Partial<Record<\"exit\" | \"enter\", number>>",
      "required": false,
      "description": "The animation duration."
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area."
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier."
    },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open."
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be opened."
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "required": false,
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element from its reference element."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover closes."
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover opens."
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The number of delay time to open."
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area."
    },
    "restoreFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be returned to the element that triggers the popover when it closes."
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "'absolute'",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "trigger": {
      "type": "\"click\" | \"hover\" | \"never\" | \"contextmenu\"",
      "defaultValue": "'click'",
      "required": false,
      "description": "The interaction that triggers the popover.\n\n- `hover`: means the popover will open when you hover with mouse or focus with keyboard on the popover trigger.\n- `click`: means the popover will open on click or press `Enter` to `Space` on keyboard."
    }
  },
  "MenuButton": {},
  "MenuItemButton": {
    "icon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "required": false
    },
    "iconProps": { "type": "MenuIconProps", "required": false },
    "innerProps": { "type": "HTMLUIProps<\"span\">", "required": false }
  },
  "MenuList": {
    "contentProps": { "type": "MotionPropsWithoutChildren", "required": false }
  },
  "MenuItem": {
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the list element will be closed when selected."
    },
    "command": {
      "type": "string",
      "required": false,
      "description": "Right-aligned label text content, useful for displaying hotkeys."
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "The menu item icon to use."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the menu item will be disabled."
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the menu item will be focusable."
    }
  },
  "MenuOptionItem": {
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the list element will be closed when selected."
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "The menu option item icon to use."
    },
    "isChecked": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox or radio will be checked."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the menu item will be disabled."
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the menu item will be focusable."
    },
    "type": {
      "type": "\"checkbox\" | \"radio\"",
      "required": false,
      "description": "The type of the menu option item."
    }
  },
  "MenuIcon": {},
  "MenuCommand": {},
  "MenuGroup": {
    "label": {
      "type": "string",
      "required": false,
      "description": "The label of the group."
    },
    "labelProps": {
      "type": "HTMLUIProps<\"span\">",
      "required": false,
      "description": "Props for menu group element."
    }
  },
  "MenuOptionGroup": {
    "defaultValue": {
      "type": "Y",
      "required": false,
      "description": "The initial value of the menu item group."
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The label of the group."
    },
    "labelProps": {
      "type": "HTMLUIProps<\"span\">",
      "required": false,
      "description": "Props for menu group element."
    },
    "onChange": {
      "type": "(value: Y) => void",
      "required": false,
      "description": "The callback fired when any children checkbox is checked or unchecked."
    },
    "type": {
      "type": "\"checkbox\" | \"radio\"",
      "defaultValue": "'checkbox'",
      "required": false,
      "description": "The type of the menu option group."
    },
    "value": {
      "type": "Y",
      "required": false,
      "description": "The value of the menu item group."
    }
  },
  "MenuDivider": {},
  "ContextMenu": {
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "required": false,
      "description": "The animation of the popover."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be transferred to the first interactive element when the popover opens."
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "'clippingParents'",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier."
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The number of delay time to close."
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you hit the `Esc` key."
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the list element will be closed when value is selected."
    },
    "defaultIsOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be initially opened."
    },
    "duration": {
      "type": "number | Partial<Record<\"exit\" | \"enter\", number>>",
      "required": false,
      "description": "The animation duration."
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area."
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier."
    },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open."
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be opened."
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "required": false,
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element from its reference element."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover closes."
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover opens."
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The number of delay time to open."
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area."
    },
    "restoreFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be returned to the element that triggers the popover when it closes."
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "'absolute'",
      "required": false,
      "description": "The CSS positioning strategy to use."
    }
  },
  "ContextMenuTrigger": {}
}
