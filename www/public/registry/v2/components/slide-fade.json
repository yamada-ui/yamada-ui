{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["motion"],
    "externals": ["motion@12.18.1"],
    "hooks": ["use-value"],
    "providers": []
  },
  "dependents": { "components": ["popover"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./slide-fade.style\"\nexport {\n  SlideFade,\n  SlideFadePropsContext,\n  slideFadeVariants,\n  useSlideFadePropsContext,\n} from \"./slide-fade\"\nexport type { SlideFadeProps } from \"./slide-fade\"\n"
    },
    {
      "name": "slide-fade.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const slideFadeStyle = defineComponentStyle({\n  base: {\n    w: \"full\",\n  },\n})\n\nexport type SlideFadeStyle = typeof slideFadeStyle\n"
    },
    {
      "name": "slide-fade.tsx",
      "content": "\"use client\"\n\nimport type { Variants } from \"motion/react\"\nimport type { StyleValue, ThemeProps } from \"@yamada-ui/react\"\nimport type {\n  HTMLMotionProps,\n  MotionTransitionVariants,\n  WithTransitionProps,\n} from \"../motion\"\nimport type { SlideFadeStyle } from \"./slide-fade.style\"\nimport { AnimatePresence } from \"motion/react\"\nimport { useMemo } from \"react\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { createTransition, motion } from \"../motion\"\nimport { slideFadeStyle } from \"./slide-fade.style\"\n\nexport const slideFadeVariants: Variants = {\n  enter: ({ delay, duration, enter, transition, transitionEnd } = {}) => ({\n    opacity: 1,\n    transition: createTransition.enter(transition?.enter)(delay, duration),\n    transitionEnd: transitionEnd?.enter,\n    x: 0,\n    y: 0,\n    ...enter,\n  }),\n  exit: ({\n    delay,\n    duration,\n    exit,\n    offsetX,\n    offsetY,\n    reverse,\n    transition,\n    transitionEnd,\n  } = {}) => ({\n    opacity: 0,\n    transition: createTransition.exit(transition?.exit)(delay, duration),\n    ...(reverse\n      ? { transitionEnd: transitionEnd?.exit, x: offsetX, y: offsetY }\n      : { transitionEnd: { x: offsetX, y: offsetY, ...transitionEnd?.exit } }),\n    ...exit,\n  }),\n  initial: ({\n    delay,\n    duration,\n    initial,\n    offsetX,\n    offsetY,\n    transition,\n    transitionEnd,\n  }) => ({\n    opacity: 0,\n    transition: createTransition.exit(transition?.exit)(delay, duration),\n    transitionEnd: transitionEnd?.exit,\n    x: offsetX,\n    y: offsetY,\n    ...initial,\n  }),\n} satisfies MotionTransitionVariants\n\nexport interface SlideFadeProps\n  extends WithTransitionProps<HTMLMotionProps>,\n    ThemeProps<SlideFadeStyle> {\n  /**\n   * The offset on the horizontal or `x` axis.\n   *\n   * @default 0\n   */\n  offsetX?: StyleValue<number | string>\n  /**\n   * The offset on the vertical or `y` axis.\n   *\n   * @default 8\n   */\n  offsetY?: StyleValue<number | string>\n  /**\n   * If `true`, the element will be transitioned back to the offset when it leaves. Otherwise, it'll only fade out.\n   *\n   * @default true\n   */\n  reverse?: boolean\n}\n\nconst {\n  PropsContext: SlideFadePropsContext,\n  usePropsContext: useSlideFadePropsContext,\n  withContext,\n} = createComponent<SlideFadeProps, SlideFadeStyle>(\n  \"slide-fade\",\n  slideFadeStyle,\n)\n\nexport { SlideFadePropsContext, useSlideFadePropsContext }\n\n/**\n * `SlideFade` is a component that gradually shows or hides an element while moving it from a specified position.\n *\n * @see https://yamada-ui.com/components/slide-fade\n */\nexport const SlideFade = withContext<\"div\", SlideFadeProps>(\n  ({\n    delay,\n    duration,\n    offsetX: offsetXProp = 0,\n    offsetY: offsetYProp = 8,\n    open: openProp,\n    reverse = true,\n    transition,\n    transitionEnd,\n    unmountOnExit,\n    ...rest\n  }) => {\n    const animate = openProp || unmountOnExit ? \"enter\" : \"exit\"\n    const open = unmountOnExit ? openProp && unmountOnExit : true\n    const offsetX = useValue(offsetXProp)\n    const offsetY = useValue(offsetYProp)\n\n    const custom = useMemo(\n      () => ({\n        delay,\n        duration,\n        offsetX,\n        offsetY,\n        reverse,\n        transition,\n        transitionEnd,\n      }),\n      [delay, duration, offsetX, offsetY, reverse, transition, transitionEnd],\n    )\n\n    return (\n      <AnimatePresence custom={custom}>\n        {open ? (\n          <motion.div\n            animate={animate}\n            custom={custom}\n            exit=\"exit\"\n            initial=\"exit\"\n            variants={slideFadeVariants}\n            {...rest}\n          />\n        ) : null}\n      </AnimatePresence>\n    )\n  },\n)()\n"
    }
  ]
}
