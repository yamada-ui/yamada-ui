{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["image"],
    "externals": [],
    "hooks": ["use-token"],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export { Picture, Source } from \"./picture\"\nexport type { PictureProps, PictureSource, SourceProps } from \"./picture\"\n"
    },
    {
      "name": "picture.tsx",
      "content": "import type { FC } from \"react\"\nimport type { HTMLStyledProps, ThemeTokens, AnyString } from \"@yamada-ui/react\"\nimport type { ImageProps } from \"../image\"\nimport { useCallback, useMemo } from \"react\"\nimport {\n  styled,\n  useSystem,\n  useTheme,\n  getPx,\n  isUndefined,\n} from \"@yamada-ui/react\"\nimport { getToken } from \"../../hooks/use-token\"\nimport { Image } from \"../image\"\n\nconst createQuery = (\n  minW: number | string | undefined,\n  maxW: number | string | undefined,\n) => {\n  let media = \"\"\n\n  if (minW) {\n    media = `(min-width: ${minW}px)`\n\n    if (maxW) media += ` and (max-width: ${maxW}px)`\n  } else {\n    media = `(max-width: ${maxW}px)`\n  }\n\n  return media\n}\n\nexport interface PictureSource extends SourceProps {\n  /**\n   * The source set for the source element.\n   */\n  srcSet?: string\n  /**\n   * The maximum width for the source.\n   *\n   * If media is set, media takes precedence.\n   */\n  maxW?: AnyString | number | ThemeTokens[\"sizes\"]\n  /**\n   * The minimum width for the source.\n   *\n   * If media is set, media takes precedence.\n   */\n  minW?: AnyString | number | ThemeTokens[\"sizes\"]\n}\n\nexport interface PictureProps extends ImageProps {\n  /**\n   * If `true`, the sources will be sorted by the `minW` and `maxW` properties.\n   *\n   * @default true\n   */\n  enableSorting?: boolean\n  /**\n   * The sources for the picture element.\n   */\n  sources?: PictureSource[]\n  /**\n   * The props for the picture element.\n   */\n  pictureProps?: HTMLStyledProps<\"picture\">\n}\n\n/**\n * `Picture` is a component that uses the `picture` element to provide alternative images for different display or device scenarios.\n *\n * @see https://yamada-ui.com/components/picture\n */\nexport const Picture: FC<PictureProps> = ({\n  children,\n  enableSorting = true,\n  sources: sourcesProp = [],\n  pictureProps,\n  ...rest\n}) => {\n  const { breakpoints, config } = useSystem()\n  const { theme } = useTheme()\n  const { queriesObj } = breakpoints\n  const { direction = \"down\", identifier = \"@media screen\" } =\n    config.breakpoint ?? {}\n  const searchValue =\n    identifier === \"@media screen\" ? \"@media screen and \" : `${identifier} `\n\n  const compareSources = useCallback(\n    (a: PictureSource, b: PictureSource) => {\n      const k = direction === \"down\" ? \"maxW\" : \"minW\"\n\n      if (isUndefined(a[k]) && !isUndefined(b[k])) return -1\n\n      if (!isUndefined(a[k]) && isUndefined(b[k])) return 1\n\n      return direction === \"down\"\n        ? Number(a.maxW) - Number(b.maxW)\n        : Number(b.minW) - Number(a.minW)\n    },\n    [direction],\n  )\n\n  const sources = useMemo(() => {\n    const computedSources = sourcesProp.map(\n      ({ maxW, media, minW, ...rest }) => {\n        if (!media) {\n          if (minW)\n            minW = getPx(\n              getToken(\"sizes\", minW as ThemeTokens[\"sizes\"])(theme) ?? minW,\n            )\n          if (maxW)\n            maxW = getPx(\n              getToken(\"sizes\", maxW as ThemeTokens[\"sizes\"])(theme) ?? maxW,\n            )\n\n          media = createQuery(minW, maxW)\n\n          return { ...rest, maxW, media, minW }\n        } else {\n          const { maxW, minW, query } = queriesObj[media] ?? {}\n\n          if (query) media = query.replace(searchValue, \"\")\n\n          return { ...rest, maxW, media, minW }\n        }\n      },\n    )\n\n    if (enableSorting) {\n      return computedSources.sort(compareSources)\n    } else {\n      return computedSources\n    }\n  }, [\n    queriesObj,\n    searchValue,\n    sourcesProp,\n    compareSources,\n    enableSorting,\n    theme,\n  ])\n\n  const sourceElements = useMemo(\n    () =>\n      sources.map(({ maxW: _maxW, minW: _minW, ...rest }, index) => (\n        <styled.source key={index} {...rest} />\n      )),\n    [sources],\n  )\n\n  return (\n    <styled.picture {...pictureProps}>\n      {children ?? (\n        <>\n          {sourceElements}\n\n          <Image {...rest} />\n        </>\n      )}\n    </styled.picture>\n  )\n}\n\nexport interface SourceProps extends HTMLStyledProps<\"source\"> {\n  /**\n   * The media query for the source.\n   */\n  media?: AnyString | ThemeTokens[\"breakpoints\"]\n}\n\nexport const Source: FC<SourceProps> = ({ media, ...rest }) => {\n  const { breakpoints, config } = useSystem()\n  const { queriesObj } = breakpoints\n  const { identifier = \"@media screen\" } = config.breakpoint ?? {}\n  const searchValue =\n    identifier === \"@media screen\" ? \"@media screen and \" : `${identifier} `\n\n  const { query } = media ? (queriesObj[media] ?? {}) : {}\n\n  if (query) media = query.replace(searchValue, \"\")\n\n  return <styled.source media={media} {...rest} />\n}\n"
    }
  ]
}
