{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["button", "input", "portal", "field", "file-input"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "file-button.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\nimport { buttonStyle } from \"../button\"\n\nexport const fileButtonStyle = defineComponentStyle({\n  base: {\n    \"--error-border-color\": \"colors.border.error\",\n  },\n\n  variants: {\n    ghost: {\n      ...buttonStyle.variants?.ghost,\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        borderWidth: \"1px\",\n      },\n    },\n    outline: {\n      ...buttonStyle.variants?.outline,\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n      },\n    },\n    solid: {\n      ...buttonStyle.variants?.solid,\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        borderWidth: \"1px\",\n      },\n    },\n    subtle: {\n      ...buttonStyle.variants?.subtle,\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        borderWidth: \"1px\",\n      },\n    },\n    surface: {\n      ...buttonStyle.variants?.surface,\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n      },\n    },\n  },\n\n  defaultProps: {\n    variant: \"solid\",\n  },\n})\n\nexport type FileButtonStyle = typeof fileButtonStyle\n"
    },
    {
      "name": "file-button.tsx",
      "content": "\"use client\"\n\nimport type { ThemeProps } from \"@yamada-ui/react\"\nimport type { ButtonProps } from \"../button\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { FileButtonStyle } from \"./file-button.style\"\nimport type { UseFileButtonProps } from \"./use-file-button\"\nimport { createComponent, styled } from \"@yamada-ui/react\"\nimport { Button } from \"../button\"\nimport { useInputBorder } from \"../input\"\nimport { Portal } from \"../portal\"\nimport { fileButtonStyle } from \"./file-button.style\"\nimport { useFileButton } from \"./use-file-button\"\n\nexport interface FileButtonProps\n  extends Omit<ButtonProps, \"defaultValue\" | \"onChange\" | \"ref\" | \"value\">,\n    UseFileButtonProps,\n    Pick<UseInputBorderProps, \"errorBorderColor\">,\n    ThemeProps<FileButtonStyle> {}\n\nconst {\n  PropsContext: FileButtonPropsContext,\n  usePropsContext: useFileButtonPropsContext,\n  withContext,\n} = createComponent<FileButtonProps, FileButtonStyle>(\n  \"file-button\",\n  fileButtonStyle,\n)\n\nexport { FileButtonPropsContext, useFileButtonPropsContext }\n\n/**\n * `FileButton` is a button component used for users to select files.\n *\n * @see https://yamada-ui.com/components/file-button\n */\nexport const FileButton = withContext<\"button\", FileButtonProps>(\n  ({ as: As = Button, children, errorBorderColor, ...rest }) => {\n    const { getButtonProps, getInputProps } = useFileButton(rest)\n    const varProps = useInputBorder({ errorBorderColor })\n\n    return (\n      <>\n        <Portal>\n          <styled.input {...getInputProps()} />\n        </Portal>\n\n        <As {...varProps} {...getButtonProps()}>\n          {children}\n        </As>\n      </>\n    )\n  },\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./file-button.style\"\nexport {\n  FileButton,\n  FileButtonPropsContext,\n  useFileButtonPropsContext,\n} from \"./file-button\"\nexport type { FileButtonProps } from \"./file-button\"\nexport * from \"./use-file-button\"\n"
    },
    {
      "name": "use-file-button.ts",
      "content": "\"use client\"\n\nimport type { PropGetter } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport type { UseFileInputProps } from \"../file-input\"\nimport { useCallback } from \"react\"\nimport { ariaAttr } from \"@yamada-ui/react\"\nimport { useFileInput } from \"../file-input\"\n\nexport interface UseFileButtonProps\n  extends UseFileInputProps<\"button\">,\n    FieldProps {}\n\nexport const useFileButton = (props: UseFileButtonProps = {}) => {\n  const { interactive, clickableProps, getInputProps } =\n    useFileInput<\"button\">(props)\n\n  const getButtonProps: PropGetter<\"button\"> = useCallback(\n    (props) => ({\n      ...clickableProps,\n      \"aria-disabled\": ariaAttr(!interactive),\n      tabIndex: interactive ? clickableProps.tabIndex : -1,\n      ...props,\n    }),\n    [clickableProps, interactive],\n  )\n\n  return {\n    clickableProps,\n    getButtonProps,\n    getInputProps,\n  }\n}\n\nexport type UseFileButtonReturn = ReturnType<typeof useFileButton>\n"
    }
  ]
}
