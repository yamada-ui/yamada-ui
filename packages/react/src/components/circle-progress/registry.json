{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["progress"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "circle-progress.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const circleProgressStyle = defineComponentSlotStyle({\n  base: {\n    circle: {\n      \"--c\": \"calc(2 * 3.14159 * {r})\",\n      \"--cx\": \"calc({size} / 2)\",\n      \"--cy\": \"calc({size} / 2)\",\n      \"--r\": \"calc({size} / 2 - {thickness} / 2)\",\n      boxSize: \"{size}\",\n      _indeterminate: {\n        animationDuration: \"2s\",\n        animationIterationCount: \"infinite\",\n        animationName: \"spin\",\n        animationTimingFunction: \"linear\",\n      },\n    },\n    label: {\n      fontWeight: \"medium\",\n      left: \"50%\",\n      letterSpacing: \"tight\",\n      lineHeight: \"1\",\n      position: \"absolute\",\n      textAlign: \"center\",\n      top: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n    range: {\n      cx: \"{cx}\",\n      cy: \"{cy}\",\n      fill: \"transparent\",\n      r: \"{r}\",\n      strokeDasharray: \"{c}\",\n      strokeDashoffset: \"calc({c} * ((100 - {percent}) / 100))\",\n      strokeWidth: \"{thickness}\",\n      transform: \"rotate(-90deg)\",\n      transformOrigin: \"center center\",\n      transitionDuration: \"slow\",\n      transitionProperty: \"stroke-dashoffset, stroke-dasharray\",\n      _indeterminate: {\n        animationDuration: \"{duration, 1.5s}\",\n        animationIterationCount: \"infinite\",\n        animationTimingFunction: \"linear\",\n        keyframes: {\n          \"0%\": {\n            strokeDasharray: \"1, 400\",\n            strokeDashoffset: \"0\",\n          },\n          \"50%\": {\n            strokeDasharray: \"400, 400\",\n            strokeDashoffset: \"-100%\",\n          },\n          \"100%\": {\n            strokeDasharray: \"400, 400\",\n            strokeDashoffset: \"-260%\",\n          },\n        },\n      },\n    },\n    root: {\n      display: \"inline-flex\",\n      position: \"relative\",\n    },\n    track: {\n      cx: \"{cx}\",\n      cy: \"{cy}\",\n      fill: \"transparent\",\n      r: \"{r}\",\n      strokeWidth: \"{thickness}\",\n    },\n  },\n\n  props: {\n    /**\n     * The shape of the progress bar.\n     *\n     * @default rounded\n     */\n    shape: {\n      rounded: {\n        range: {\n          strokeLinecap: \"round\",\n          _indeterminate: { strokeLinecap: \"butt\" },\n        },\n      },\n      square: {\n        range: { strokeLinecap: \"butt\" },\n      },\n    },\n  },\n\n  variants: {\n    outline: {\n      range: {\n        stroke: \"colorScheme.solid\",\n      },\n      track: {\n        stroke: \"bg.subtle\",\n      },\n    },\n    subtle: {\n      range: {\n        stroke: \"colorScheme.solid/80\",\n      },\n      track: {\n        stroke: [\"colorScheme.muted\", \"colorScheme.subtle\"],\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      label: { fontSize: \"2xs\" },\n      root: {\n        \"--size\": \"{sizes.6}\",\n        \"--thickness\": \"{sizes.1}\",\n      },\n    },\n    sm: {\n      label: { fontSize: \"2xs\" },\n      root: {\n        \"--size\": \"{sizes.8}\",\n        \"--thickness\": \"{sizes.1.5}\",\n      },\n    },\n    md: {\n      label: { fontSize: \"2xs\" },\n      root: {\n        \"--size\": \"{sizes.10}\",\n        \"--thickness\": \"{sizes.1.5}\",\n      },\n    },\n    lg: {\n      label: { fontSize: \"xs\" },\n      root: {\n        \"--size\": \"{sizes.12}\",\n        \"--thickness\": \"{sizes.2}\",\n      },\n    },\n    xl: {\n      label: { fontSize: \"sm\" },\n      root: {\n        \"--size\": \"{sizes.14}\",\n        \"--thickness\": \"{sizes.2}\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n    shape: \"rounded\",\n  },\n})\n\nexport type CircleProgressStyle = typeof circleProgressStyle\n"
    },
    {
      "name": "circle-progress.tsx",
      "content": "\"use client\"\n\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { UseProgressProps } from \"../progress\"\nimport type { CircleProgressStyle } from \"./circle-progress.style\"\nimport {\n  createSlotComponent,\n  mergeCSS,\n  styled,\n  varAttr,\n  isNumber,\n} from \"@yamada-ui/react\"\nimport { useProgress } from \"../progress\"\nimport { circleProgressStyle } from \"./circle-progress.style\"\n\nexport interface CircleProgressRootProps\n  extends HTMLStyledProps,\n    UseProgressProps,\n    ThemeProps<CircleProgressStyle> {\n  /**\n   * The animation duration in seconds.\n   */\n  duration?: number | string\n  /**\n   * The color of the progress range.\n   */\n  rangeColor?: CSSProps[\"color\"]\n  /**\n   * The thickness of the progress bar.\n   */\n  thickness?: CSSProps[\"width\"]\n  /**\n   * The color of the progress track.\n   */\n  trackColor?: CSSProps[\"color\"]\n  /**\n   * Props for the progress circle element.\n   */\n  circleProps?: CircleProgressCircleProps\n  /**\n   * Props for the progress range element.\n   */\n  rangeProps?: CircleProgressRangeProps\n  /**\n   * Props for the progress track element.\n   */\n  trackProps?: CircleProgressTrackProps\n}\n\nconst {\n  PropsContext: CircleProgressPropsContext,\n  usePropsContext: useCircleProgressPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<CircleProgressRootProps, CircleProgressStyle>(\n  \"circle-progress\",\n  circleProgressStyle,\n)\n\nexport { CircleProgressPropsContext, useCircleProgressPropsContext }\n\n/**\n * `CircleProgress` is a component that displays progress in a circular progress bar.\n *\n * @see https://yamada-ui.com/components/circle-progress\n */\nexport const CircleProgressRoot = withProvider<\"div\", CircleProgressRootProps>(\n  ({\n    css,\n    children,\n    max,\n    min,\n    rangeColor,\n    trackColor,\n    value,\n    circleProps,\n    rangeProps,\n    trackProps,\n    ...rest\n  }) => {\n    const { percent, getRangeProps, getRootProps, getTrackProps } =\n      useProgress<\"svg\">({ max, min, value })\n\n    return (\n      <styled.div css={mergeCSS(css, { \"--percent\": percent })} {...rest}>\n        <CircleProgressCircle {...getRootProps(circleProps)}>\n          <CircleProgressTrack\n            stroke={trackColor}\n            {...getTrackProps(trackProps)}\n          />\n          <CircleProgressRange\n            stroke={rangeColor}\n            {...getRangeProps(rangeProps)}\n          />\n        </CircleProgressCircle>\n\n        {children}\n      </styled.div>\n    )\n  },\n  \"root\",\n)(({ boxSize, duration, thickness, ...rest }) => ({\n  \"--duration\": isNumber(duration) ? `${duration}s` : duration,\n  \"--size\": varAttr(boxSize, \"sizes\"),\n  \"--thickness\": varAttr(thickness, \"sizes\"),\n  ...rest,\n}))\n\ninterface CircleProgressCircleProps extends HTMLStyledProps<\"svg\"> {}\n\nconst CircleProgressCircle = withContext<\"svg\", CircleProgressCircleProps>(\n  \"svg\",\n  \"circle\",\n)()\n\ninterface CircleProgressTrackProps extends HTMLStyledProps<\"circle\"> {}\n\nconst CircleProgressTrack = withContext<\"circle\", CircleProgressTrackProps>(\n  \"circle\",\n  \"track\",\n)()\n\ninterface CircleProgressRangeProps extends HTMLStyledProps<\"circle\"> {}\n\nconst CircleProgressRange = withContext<\"circle\", CircleProgressRangeProps>(\n  \"circle\",\n  \"range\",\n)()\n\nexport interface CircleProgressLabelProps extends HTMLStyledProps<\"span\"> {}\n\nexport const CircleProgressLabel = withContext<\n  \"span\",\n  CircleProgressLabelProps\n>(\"span\", \"label\")()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./circle-progress.style\"\nexport {\n  CircleProgressLabel,\n  CircleProgressPropsContext,\n  CircleProgressRoot,\n  useCircleProgressPropsContext,\n} from \"./circle-progress\"\nexport type {\n  CircleProgressLabelProps,\n  CircleProgressRootProps,\n} from \"./circle-progress\"\nexport * as CircleProgress from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  CircleProgressLabel as Label,\n  CircleProgressPropsContext as PropsContext,\n  CircleProgressRoot as Root,\n  useCircleProgressPropsContext as usePropsContext,\n} from \"./circle-progress\"\nexport type {\n  CircleProgressLabelProps as LabelProps,\n  CircleProgressRootProps as RootProps,\n} from \"./circle-progress\"\n"
    }
  ]
}
