{
  "Pagination": {
    "EndTrigger": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      }
    },
    "Item": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"2xs\" | [\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"2xs\" | ({ _peerAccept?: \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"2xs\" | [\"2xl\" | ... 6 more ... | (... & { ...; }), \"2xl\" | ... 6 more ... | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: \"2xl...",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" | [\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" | ({ _peerAccept?: \"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" | [...] | { ...; } | undefined; ... 178 more ...; _selection?: \"ghost\" | ... 6 more ... | undefined; } & { ...; }), \"ghost\" | ... 4 more...",
        "description": "The variant of the component.",
        "required": false
      },
      "active": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the button is represented as active.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the button is disabled.",
        "required": false
      },
      "disableRipple": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, disable ripple effects when pressing a element.",
        "required": false
      },
      "fullRounded": {
        "type": "StyleValue<boolean>",
        "defaultValue": "false",
        "description": "If `true`, the button is full rounded. Else, it'll be slightly round.",
        "required": false
      },
      "icon": {
        "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
        "description": "The icon to be used in the button.",
        "required": false
      },
      "loading": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the loading state of the button is represented.",
        "required": false
      },
      "type": {
        "type": "\"button\" | \"submit\" | \"reset\"",
        "defaultValue": "\"button\"",
        "description": "The type of button. Accepts `button`, `reset`, or `submit`.",
        "required": false
      }
    },
    "Items": {
      "children": {
        "type": "(page: Page) => ReactNode",
        "description": "The function used to generate children.\nit will be called with page number or `\"ellipsis\"`.",
        "required": false
      },
      "render": {
        "type": "(page: Page) => ReactNode",
        "description": "The function used to generate children.\nit will be called with page number or `\"ellipsis\"`.",
        "required": false
      }
    },
    "NextTrigger": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      }
    },
    "PrevTrigger": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      }
    },
    "Root": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | ({ _peerAccept?: \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | (... & { ...; }), \"2xl\" | ... 5 more ... | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: \"2xl\" | .....",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"outline\" | \"solid\" | \"subtle\" | \"surface\" | [\"outline\" | \"solid\" | \"subtle\" | \"surface\" | ({ _peerAccept?: \"outline\" | \"solid\" | \"subtle\" | \"surface\" | [\"outline\" | \"solid\" | \"subtle\" | \"surface\" | (... & { ...; }), \"outline\" | ... 3 more ... | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?...",
        "description": "The variant of the component.",
        "required": false
      },
      "total": {
        "type": "number",
        "description": "The total number of pages in pagination.",
        "required": true
      },
      "align": {
        "type": "AlignItems | [AlignItems | ({ _peerAccept?: AlignItems | [AlignItems | (... & { base?: AlignItems | [AlignItems | (... & ...), AlignItems | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: AlignItems | ... 2 more ... | undefined; }), AlignItems | (... & { ...; })] | { ...; } | undefined; ... 178 more ......",
        "description": "The CSS `align-items` property.",
        "required": false
      },
      "attached": {
        "type": "StyleValue<boolean>",
        "defaultValue": "false",
        "description": "If `true`, the borderRadius of button that are direct children will be altered to look flushed together.",
        "required": false
      },
      "basis": {
        "type": "number | \"1\" | (string & {}) | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"3xl\" | \"4xl\" | \"xs\" | \"2xs\" | \"5xl\" | \"6xl\" | \"7xl\" | \"8xl\" | \"9xl\" | \"full\" | \"0.5\" | \"1.5\" | \"1/2\" | \"1/3\" | \"1/4\" | ... 98 more ... | ({ ...; } & { ...; })",
        "description": "The CSS `flex-basis` property.",
        "required": false
      },
      "boundaries": {
        "type": "StyleValue<number>",
        "defaultValue": "1",
        "description": "Number of elements visible on the left/right edges.",
        "required": false
      },
      "controlNextProps": {
        "type": "PaginationItemProps",
        "description": "Props for next of the control button element.",
        "required": false
      },
      "controlPrevProps": {
        "type": "PaginationItemProps",
        "description": "Props for previous of the control button element.",
        "required": false
      },
      "controlProps": {
        "type": "PaginationItemProps",
        "description": "Props for control button element.",
        "required": false
      },
      "defaultPage": {
        "type": "number",
        "defaultValue": "1",
        "description": "The initial page of the pagination.\nShould be less than `total` and greater than `1`.",
        "required": false
      },
      "direction": {
        "type": "FlexDirection | [FlexDirection | ({ _peerAccept?: FlexDirection | [FlexDirection | (... & { base?: FlexDirection | [...] | (... & ...) | undefined; ... 4 more ...; xl?: FlexDirection | ... 2 more ... | undefined; }), FlexDirection | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: FlexDirecti...",
        "description": "The CSS `flex-direction` property.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, all wrapped button will be disabled.",
        "required": false
      },
      "edgeEndProps": {
        "type": "PaginationItemProps",
        "description": "Props for end of the edge button element.",
        "required": false
      },
      "edgeProps": {
        "type": "PaginationItemProps",
        "description": "Props for edge button element.",
        "required": false
      },
      "edgeStartProps": {
        "type": "PaginationItemProps",
        "description": "Props for start of the edge button element.",
        "required": false
      },
      "ellipsisProps": {
        "type": "PaginationItemProps",
        "description": "Props for ellipsis of the element.",
        "required": false
      },
      "fullRounded": {
        "type": "StyleValue<boolean>",
        "defaultValue": "false",
        "description": "If `true`, the button is full rounded. Else, it'll be slightly round.",
        "required": false
      },
      "grow": {
        "type": "StyleValue<boolean>",
        "defaultValue": "false",
        "description": "If `true`, the children will grow to fill the available space.",
        "required": false
      },
      "itemProps": {
        "type": "PaginationItemProps",
        "description": "Props for item of the button element.",
        "required": false
      },
      "justify": {
        "type": "JustifyContent | [JustifyContent | ({ _peerAccept?: JustifyContent | [JustifyContent | (... & { ...; }), JustifyContent | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: JustifyContent | ... 2 more ... | undefined; } & { ...; }), JustifyContent | ({ ...; } & { ...; })] | ({ ...; } & { ...; })",
        "description": "The CSS `justify-content` property.",
        "required": false
      },
      "onChange": {
        "type": "(page: number) => void",
        "description": "The callback invoked when the page changes.",
        "required": false
      },
      "orientation": {
        "type": "StyleValue<\"horizontal\" | \"vertical\">",
        "defaultValue": "\"horizontal\"",
        "description": "The orientation of the group.",
        "required": false
      },
      "page": {
        "type": "number",
        "description": "The page of the pagination.\nShould be less than `total` and greater than `1`.",
        "required": false
      },
      "shrink": {
        "type": "FlexShrink | [FlexShrink | ({ _peerAccept?: FlexShrink | [FlexShrink | (... & { base?: FlexShrink | [FlexShrink | (... & ...), FlexShrink | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: FlexShrink | ... 2 more ... | undefined; }), FlexShrink | (... & { ...; })] | { ...; } | undefined; ... 178 more ......",
        "description": "The CSS `flex-shrink` property.",
        "required": false
      },
      "siblings": {
        "type": "StyleValue<number>",
        "defaultValue": "1",
        "description": "Number of siblings displayed on the left/right side of selected page.",
        "required": false
      },
      "stacking": {
        "type": "StyleValue<\"first-on-top\" | \"last-on-top\">",
        "description": "The stacking order of the group.",
        "required": false
      },
      "withControls": {
        "type": "StyleValue<boolean>",
        "defaultValue": "true",
        "description": "If `true`, display the control buttons.",
        "required": false
      },
      "withEdges": {
        "type": "StyleValue<boolean>",
        "defaultValue": "false",
        "description": "If `true`, display the edge buttons.",
        "required": false
      },
      "wrap": {
        "type": "FlexWrap | [FlexWrap | ({ _peerAccept?: FlexWrap | [FlexWrap | (... & { base?: FlexWrap | [FlexWrap | (... & ...), FlexWrap | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: FlexWrap | ... 2 more ... | undefined; }), FlexWrap | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: Fle...",
        "description": "The CSS `flex-wrap` property.",
        "required": false
      }
    },
    "StartTrigger": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      }
    },
    "Text": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "children": {
        "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...> | ((props: { ...; }) => ReactNode)",
        "description": "The children of the text.\nif function, it will be called with `{ page: number; total: number }`.",
        "required": false
      },
      "format": {
        "type": "\"short\" | \"compact\"",
        "defaultValue": "\"compact\"",
        "description": "The format of the text.",
        "required": false
      }
    }
  },
  "PaginationEndTrigger": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    }
  },
  "PaginationItem": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"2xs\" | [\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"2xs\" | ({ _peerAccept?: \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"2xs\" | [\"2xl\" | ... 6 more ... | (... & { ...; }), \"2xl\" | ... 6 more ... | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: \"2xl...",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" | [\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" | ({ _peerAccept?: \"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" | [...] | { ...; } | undefined; ... 178 more ...; _selection?: \"ghost\" | ... 6 more ... | undefined; } & { ...; }), \"ghost\" | ... 4 more...",
      "description": "The variant of the component.",
      "required": false
    },
    "active": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the button is represented as active.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the button is disabled.",
      "required": false
    },
    "disableRipple": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, disable ripple effects when pressing a element.",
      "required": false
    },
    "fullRounded": {
      "type": "StyleValue<boolean>",
      "defaultValue": "false",
      "description": "If `true`, the button is full rounded. Else, it'll be slightly round.",
      "required": false
    },
    "icon": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
      "description": "The icon to be used in the button.",
      "required": false
    },
    "loading": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the loading state of the button is represented.",
      "required": false
    },
    "type": {
      "type": "\"button\" | \"submit\" | \"reset\"",
      "defaultValue": "\"button\"",
      "description": "The type of button. Accepts `button`, `reset`, or `submit`.",
      "required": false
    }
  },
  "PaginationItems": {
    "children": {
      "type": "(page: Page) => ReactNode",
      "description": "The function used to generate children.\nit will be called with page number or `\"ellipsis\"`.",
      "required": false
    },
    "render": {
      "type": "(page: Page) => ReactNode",
      "description": "The function used to generate children.\nit will be called with page number or `\"ellipsis\"`.",
      "required": false
    }
  },
  "PaginationNextTrigger": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    }
  },
  "PaginationPrevTrigger": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    }
  },
  "PaginationRoot": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | ({ _peerAccept?: \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | (... & { ...; }), \"2xl\" | ... 5 more ... | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: \"2xl\" | .....",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"outline\" | \"solid\" | \"subtle\" | \"surface\" | [\"outline\" | \"solid\" | \"subtle\" | \"surface\" | ({ _peerAccept?: \"outline\" | \"solid\" | \"subtle\" | \"surface\" | [\"outline\" | \"solid\" | \"subtle\" | \"surface\" | (... & { ...; }), \"outline\" | ... 3 more ... | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?...",
      "description": "The variant of the component.",
      "required": false
    },
    "total": {
      "type": "number",
      "description": "The total number of pages in pagination.",
      "required": true
    },
    "align": {
      "type": "AlignItems | [AlignItems | ({ _peerAccept?: AlignItems | [AlignItems | (... & { base?: AlignItems | [AlignItems | (... & ...), AlignItems | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: AlignItems | ... 2 more ... | undefined; }), AlignItems | (... & { ...; })] | { ...; } | undefined; ... 178 more ......",
      "description": "The CSS `align-items` property.",
      "required": false
    },
    "attached": {
      "type": "StyleValue<boolean>",
      "defaultValue": "false",
      "description": "If `true`, the borderRadius of button that are direct children will be altered to look flushed together.",
      "required": false
    },
    "basis": {
      "type": "number | \"1\" | (string & {}) | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"3xl\" | \"4xl\" | \"xs\" | \"2xs\" | \"5xl\" | \"6xl\" | \"7xl\" | \"8xl\" | \"9xl\" | \"full\" | \"0.5\" | \"1.5\" | \"1/2\" | \"1/3\" | \"1/4\" | ... 98 more ... | ({ ...; } & { ...; })",
      "description": "The CSS `flex-basis` property.",
      "required": false
    },
    "boundaries": {
      "type": "StyleValue<number>",
      "defaultValue": "1",
      "description": "Number of elements visible on the left/right edges.",
      "required": false
    },
    "controlNextProps": {
      "type": "PaginationItemProps",
      "description": "Props for next of the control button element.",
      "required": false
    },
    "controlPrevProps": {
      "type": "PaginationItemProps",
      "description": "Props for previous of the control button element.",
      "required": false
    },
    "controlProps": {
      "type": "PaginationItemProps",
      "description": "Props for control button element.",
      "required": false
    },
    "defaultPage": {
      "type": "number",
      "defaultValue": "1",
      "description": "The initial page of the pagination.\nShould be less than `total` and greater than `1`.",
      "required": false
    },
    "direction": {
      "type": "FlexDirection | [FlexDirection | ({ _peerAccept?: FlexDirection | [FlexDirection | (... & { base?: FlexDirection | [...] | (... & ...) | undefined; ... 4 more ...; xl?: FlexDirection | ... 2 more ... | undefined; }), FlexDirection | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: FlexDirecti...",
      "description": "The CSS `flex-direction` property.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, all wrapped button will be disabled.",
      "required": false
    },
    "edgeEndProps": {
      "type": "PaginationItemProps",
      "description": "Props for end of the edge button element.",
      "required": false
    },
    "edgeProps": {
      "type": "PaginationItemProps",
      "description": "Props for edge button element.",
      "required": false
    },
    "edgeStartProps": {
      "type": "PaginationItemProps",
      "description": "Props for start of the edge button element.",
      "required": false
    },
    "ellipsisProps": {
      "type": "PaginationItemProps",
      "description": "Props for ellipsis of the element.",
      "required": false
    },
    "fullRounded": {
      "type": "StyleValue<boolean>",
      "defaultValue": "false",
      "description": "If `true`, the button is full rounded. Else, it'll be slightly round.",
      "required": false
    },
    "grow": {
      "type": "StyleValue<boolean>",
      "defaultValue": "false",
      "description": "If `true`, the children will grow to fill the available space.",
      "required": false
    },
    "itemProps": {
      "type": "PaginationItemProps",
      "description": "Props for item of the button element.",
      "required": false
    },
    "justify": {
      "type": "JustifyContent | [JustifyContent | ({ _peerAccept?: JustifyContent | [JustifyContent | (... & { ...; }), JustifyContent | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: JustifyContent | ... 2 more ... | undefined; } & { ...; }), JustifyContent | ({ ...; } & { ...; })] | ({ ...; } & { ...; })",
      "description": "The CSS `justify-content` property.",
      "required": false
    },
    "onChange": {
      "type": "(page: number) => void",
      "description": "The callback invoked when the page changes.",
      "required": false
    },
    "orientation": {
      "type": "StyleValue<\"horizontal\" | \"vertical\">",
      "defaultValue": "\"horizontal\"",
      "description": "The orientation of the group.",
      "required": false
    },
    "page": {
      "type": "number",
      "description": "The page of the pagination.\nShould be less than `total` and greater than `1`.",
      "required": false
    },
    "shrink": {
      "type": "FlexShrink | [FlexShrink | ({ _peerAccept?: FlexShrink | [FlexShrink | (... & { base?: FlexShrink | [FlexShrink | (... & ...), FlexShrink | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: FlexShrink | ... 2 more ... | undefined; }), FlexShrink | (... & { ...; })] | { ...; } | undefined; ... 178 more ......",
      "description": "The CSS `flex-shrink` property.",
      "required": false
    },
    "siblings": {
      "type": "StyleValue<number>",
      "defaultValue": "1",
      "description": "Number of siblings displayed on the left/right side of selected page.",
      "required": false
    },
    "stacking": {
      "type": "StyleValue<\"first-on-top\" | \"last-on-top\">",
      "description": "The stacking order of the group.",
      "required": false
    },
    "withControls": {
      "type": "StyleValue<boolean>",
      "defaultValue": "true",
      "description": "If `true`, display the control buttons.",
      "required": false
    },
    "withEdges": {
      "type": "StyleValue<boolean>",
      "defaultValue": "false",
      "description": "If `true`, display the edge buttons.",
      "required": false
    },
    "wrap": {
      "type": "FlexWrap | [FlexWrap | ({ _peerAccept?: FlexWrap | [FlexWrap | (... & { base?: FlexWrap | [FlexWrap | (... & ...), FlexWrap | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: FlexWrap | ... 2 more ... | undefined; }), FlexWrap | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: Fle...",
      "description": "The CSS `flex-wrap` property.",
      "required": false
    }
  },
  "PaginationStartTrigger": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    }
  },
  "PaginationText": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "children": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...> | ((props: { ...; }) => ReactNode)",
      "description": "The children of the text.\nif function, it will be called with `{ page: number; total: number }`.",
      "required": false
    },
    "format": {
      "type": "\"short\" | \"compact\"",
      "defaultValue": "\"compact\"",
      "description": "The format of the text.",
      "required": false
    }
  }
}
