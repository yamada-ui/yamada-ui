{
  "$schema": "https://yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["float"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./indicator.style\"\nexport {\n  Indicator,\n  IndicatorPropsContext,\n  useIndicatorPropsContext,\n} from \"./indicator\"\nexport type { IndicatorProps } from \"./indicator\"\n"
    },
    {
      "name": "indicator.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const indicatorStyle = defineComponentSlotStyle({\n  base: {\n    float: {\n      zIndex: \"yamcha\",\n    },\n    label: {\n      alignItems: \"center\",\n      display: \"inline-flex\",\n      rounded: \"full\",\n      verticalAlign: \"middle\",\n      whiteSpace: \"nowrap\",\n      _numeric: {\n        fontWeight: \"medium\",\n      },\n    },\n    root: {\n      position: \"relative\",\n    },\n  },\n\n  props: {\n    /**\n     * If `true`, set the indicator as an inline element.\n     *\n     * @default false\n     * */\n    inline: {\n      false: {\n        root: {\n          display: \"block\",\n        },\n      },\n      true: {\n        root: {\n          display: \"inline-block\",\n        },\n      },\n    },\n    /**\n     * If `true`, make an element scale and fade like a radar ping or ripple of water.\n     *\n     * @default false\n     */\n    ping: {\n      true: {\n        label: {\n          _before: {\n            animationDuration: \"{duration, 1.4s}\",\n            animationFillMode: \"forwards\",\n            animationIterationCount: \"{iteration-count, infinite}\",\n            animationName: \"ping\",\n            animationTimingFunction:\n              \"{timing-function, cubic-bezier(0, 0, 0.2, 1)}\",\n            bg: \"{ping-color}\",\n            boxSize: \"100%\",\n            inset: \"0\",\n            opacity: 0.7,\n            position: \"absolute\",\n            rounded: \"full\",\n            zIndex: -1,\n          },\n        },\n        root: {\n          \"--animation-scale\": \"1.8\",\n        },\n      },\n    },\n    /**\n     * If `true`, display the border of the indicator.\n     *\n     * @default false\n     */\n    withBorder: {\n      true: {\n        label: {\n          borderColor: [\"white\", \"black\"],\n          borderWidth: \"0.2em\",\n        },\n      },\n    },\n  },\n\n  variants: {\n    solid: {\n      label: {\n        layerStyle: \"solid\",\n        \"--ping-color\": \"colorScheme.outline\",\n      },\n    },\n    subtle: {\n      label: {\n        layerStyle: \"subtle\",\n        \"--ping-color\": \"colorScheme.outline\",\n      },\n    },\n    surface: {\n      label: {\n        layerStyle: \"surface\",\n        \"--ping-color\": \"colorScheme.outline\",\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      label: {\n        fontSize: \"xs\",\n        minBoxSize: \"3\",\n        _notEmpty: { px: \"1.5\" },\n      },\n    },\n    md: {\n      label: {\n        fontSize: \"sm\",\n        minBoxSize: \"4\",\n        _notEmpty: { px: \"2\" },\n      },\n    },\n    lg: {\n      label: {\n        fontSize: \"md\",\n        minBoxSize: \"5\",\n        _notEmpty: { px: \"2.5\" },\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"sm\",\n    variant: \"solid\",\n    ping: false,\n  },\n})\n\nexport type IndicatorStyle = typeof indicatorStyle\n"
    },
    {
      "name": "indicator.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FloatProps } from \"../float\"\nimport type { IndicatorStyle } from \"./indicator.style\"\nimport { useMemo } from \"react\"\nimport {\n  createSlotComponent,\n  styled,\n  dataAttr,\n  isNumber,\n  isObject,\n} from \"@yamada-ui/react\"\nimport { Float } from \"../float\"\nimport { indicatorStyle } from \"./indicator.style\"\n\ninterface PingOptions {\n  /**\n   * It is used for the color of the ping animation.\n   */\n  color?: CSSProps[\"backgroundColor\"]\n  /**\n   * It is used for the duration of the ping animation.\n   */\n  duration?: CSSProps[\"animationDuration\"]\n  /**\n   * It is used for the count of the ping animation.\n   */\n  iterationCount?: CSSProps[\"animationIterationCount\"]\n  /**\n   * It is used for the scale of the ping animation.\n   */\n  scale?: CSSProps[\"scale\"]\n  /**\n   * It is used for the timing function of the ping animation.\n   */\n  timingFunction?: CSSProps[\"animationTimingFunction\"]\n}\n\nexport interface IndicatorProps\n  extends Omit<HTMLStyledProps, \"offset\">,\n    Omit<ThemeProps<IndicatorStyle>, \"ping\">,\n    Pick<FloatProps, \"offset\" | \"placement\"> {\n  /**\n   * If `true`, the indicator will be disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * The indicator label to use.\n   */\n  label?: ReactNode\n  /**\n   * If `label` is of type number, the maximum number displayed.\n   *\n   * @default 99\n   */\n  overflowCount?: number\n  /**\n   * If `true`, make an element scale and fade like a radar ping or ripple of water.\n   *\n   * @default false\n   */\n  ping?: boolean | PingOptions\n  /**\n   * If `true`, display 0.\n   *\n   * @default true\n   */\n  showZero?: boolean\n  /**\n   * Props for the float element.\n   */\n  floatProps?: IndicatorFloatProps\n  /**\n   * Props for the label element.\n   */\n  labelProps?: IndicatorLabelProps\n}\n\nconst {\n  PropsContext: IndicatorPropsContext,\n  usePropsContext: useIndicatorPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<IndicatorProps, IndicatorStyle>(\n  \"indicator\",\n  indicatorStyle,\n)\n\nexport { IndicatorPropsContext, useIndicatorPropsContext }\n\n/**\n * `Indicator` is a component that displays at the corner of elements such as avatars.\n *\n * @see https://yamada-ui.com/docs/components/indicator\n */\nexport const Indicator = withProvider(\n  ({\n    children,\n    disabled,\n    label,\n    offset,\n    overflowCount = 99,\n    placement,\n    showZero = true,\n    floatProps,\n    labelProps,\n    ...rest\n  }) => {\n    const numeric = isNumber(label)\n\n    disabled ??= numeric && !showZero && (label as number) <= 0\n\n    const computedLabel = useMemo(() => {\n      if (numeric && label > overflowCount) {\n        return (\n          <>\n            {overflowCount}\n            <styled.span>+</styled.span>\n          </>\n        )\n      } else {\n        return label\n      }\n    }, [numeric, label, overflowCount])\n\n    return (\n      <styled.div {...rest}>\n        {children}\n\n        {!disabled ? (\n          <IndicatorFloat offset={offset} placement={placement} {...floatProps}>\n            <IndicatorLabel data-numeric={dataAttr(numeric)} {...labelProps}>\n              {computedLabel}\n            </IndicatorLabel>\n          </IndicatorFloat>\n        ) : null}\n      </styled.div>\n    )\n  },\n  \"root\",\n)(({ ping, ...rest }) => {\n  if (isObject(ping)) {\n    const { color, duration, iterationCount, scale, timingFunction } = ping\n\n    return {\n      ...rest,\n      \"--animation-scale\": scale,\n      \"--duration\": duration ? `durations.${duration}` : undefined,\n      \"--iteration-count\": iterationCount,\n      \"--ping-color\": color ? `colors.${color}` : undefined,\n      \"--timing-function\": timingFunction\n        ? `easings.${timingFunction}`\n        : undefined,\n      ping: true,\n    }\n  } else {\n    return { ...rest, ping }\n  }\n})\n\ninterface IndicatorFloatProps extends FloatProps {}\n\nconst IndicatorFloat = withContext<\"div\", IndicatorFloatProps>(Float, \"float\")()\n\ninterface IndicatorLabelProps extends HTMLStyledProps<\"span\"> {}\n\nconst IndicatorLabel = withContext<\"span\", IndicatorLabelProps>(\n  \"span\",\n  \"label\",\n)()\n"
    }
  ]
}
