{
  "Image": {
    "crossOrigin": {
      "type": "\"\" | \"anonymous\" | \"use-credentials\"",
      "description": "The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\nThis tells the browser to request cross-origin access when trying to download the image data.",
      "required": false
    },
    "fallback": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | ReactElement<any, string | JSXElementConstructor<any>>",
      "description": "Fallback image `src` or element to show if image is loading or image fails.",
      "required": false
    },
    "fallbackStrategy": {
      "type": "\"onError\" | \"beforeLoadOrError\"",
      "defaultValue": "beforeLoadOrError",
      "description": "- beforeLoadOrError: loads the fallbackImage while loading the src.\n- onError: loads the fallbackImage only if there is an error fetching the src.",
      "required": false
    },
    "fit": {
      "type": "UIValue<ObjectFit>",
      "description": "The CSS `object-fit` property.",
      "required": false
    },
    "ignoreFallback": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, opt out of the `fallbackSrc` logic and use as `img`.",
      "required": false
    },
    "loading": {
      "type": "\"eager\" | \"lazy\"",
      "description": "The image `loading` attribute.",
      "required": false
    },
    "onError": {
      "type": "ReactEventHandler<HTMLImageElement>",
      "description": "A callback for when there was an error loading the image `src`.",
      "required": false
    },
    "onLoad": {
      "type": "ReactEventHandler<HTMLImageElement>",
      "description": "A callback for when the image `src` has been loaded.",
      "required": false
    },
    "size": {
      "type": "UIValue<number | \"px\" | \"0.5\" | \"1\" | \"1.5\" | \"2\" | \"2.5\" | \"2xl\" | \"2xs\" | \"3\" | \"3.5\" | \"3xl\" | \"3xs\" | \"4\" | \"4.5\" | \"4xl\" | \"4xs\" | \"5\" | \"5.5\" | \"5xl\" | \"5xs\" | \"6\" | \"6.5\" | \"6xl\" | \"6xs\" | ... 63 more ... | \"min-intrinsic\">",
      "deprecated": "Use `boxSize` instead.",
      "description": "The CSS `box-size` property.",
      "required": false
    },
    "sizes": {
      "type": "string",
      "description": "The image `sizes` attribute.",
      "required": false
    },
    "src": {
      "type": "string",
      "description": "The image `src` attribute.",
      "required": false
    },
    "srcSet": {
      "type": "string",
      "description": "The image `srcset` attribute.",
      "required": false
    }
  },
  "NativeImage": {},
  "Picture": {
    "crossOrigin": {
      "type": "\"\" | \"anonymous\" | \"use-credentials\"",
      "description": "The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\nThis tells the browser to request cross-origin access when trying to download the image data.",
      "required": false
    },
    "enableSorting": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the sources will be sorted by the `minW` and `maxW` properties.",
      "required": false
    },
    "fallback": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | ReactElement<any, string | JSXElementConstructor<any>>",
      "description": "Fallback image `src` or element to show if image is loading or image fails.",
      "required": false
    },
    "fallbackStrategy": {
      "type": "\"onError\" | \"beforeLoadOrError\"",
      "defaultValue": "beforeLoadOrError",
      "description": "- beforeLoadOrError: loads the fallbackImage while loading the src.\n- onError: loads the fallbackImage only if there is an error fetching the src.",
      "required": false
    },
    "fit": {
      "type": "UIValue<ObjectFit>",
      "description": "The CSS `object-fit` property.",
      "required": false
    },
    "ignoreFallback": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, opt out of the `fallbackSrc` logic and use as `img`.",
      "required": false
    },
    "loading": {
      "type": "\"eager\" | \"lazy\"",
      "description": "The image `loading` attribute.",
      "required": false
    },
    "onError": {
      "type": "ReactEventHandler<HTMLImageElement>",
      "description": "A callback for when there was an error loading the image `src`.",
      "required": false
    },
    "onLoad": {
      "type": "ReactEventHandler<HTMLImageElement>",
      "description": "A callback for when the image `src` has been loaded.",
      "required": false
    },
    "pictureProps": {
      "type": "HTMLUIProps<\"picture\">",
      "description": "The props for the picture element.",
      "required": false
    },
    "size": {
      "type": "UIValue<number | \"px\" | \"0.5\" | \"1\" | \"1.5\" | \"2\" | \"2.5\" | \"2xl\" | \"2xs\" | \"3\" | \"3.5\" | \"3xl\" | \"3xs\" | \"4\" | \"4.5\" | \"4xl\" | \"4xs\" | \"5\" | \"5.5\" | \"5xl\" | \"5xs\" | \"6\" | \"6.5\" | \"6xl\" | \"6xs\" | ... 63 more ... | \"min-intrinsic\">",
      "deprecated": "Use `boxSize` instead.",
      "description": "The CSS `box-size` property.",
      "required": false
    },
    "sizes": {
      "type": "string",
      "description": "The image `sizes` attribute.",
      "required": false
    },
    "sources": {
      "type": "PictureSource[]",
      "description": "The sources for the picture element.",
      "required": false
    },
    "src": {
      "type": "string",
      "description": "The image `src` attribute.",
      "required": false
    },
    "srcSet": {
      "type": "string",
      "description": "The image `srcset` attribute.",
      "required": false
    }
  },
  "Source": {
    "media": {
      "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | ({} & string)",
      "description": "The media query for the source.",
      "required": false
    }
  },
  "UseImage": {
    "crossOrigin": {
      "type": "\"\" | \"anonymous\" | \"use-credentials\"",
      "description": "The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\nThis tells the browser to request cross-origin access when trying to download the image data.",
      "required": false
    },
    "ignoreFallback": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, opt out of the `fallbackSrc` logic and use as `img`.",
      "required": false
    },
    "loading": {
      "type": "\"eager\" | \"lazy\"",
      "description": "The image `loading` attribute.",
      "required": false
    },
    "onError": {
      "type": "ReactEventHandler<HTMLImageElement>",
      "description": "A callback for when there was an error loading the image `src`.",
      "required": false
    },
    "onLoad": {
      "type": "ReactEventHandler<HTMLImageElement>",
      "description": "A callback for when the image `src` has been loaded.",
      "required": false
    },
    "sizes": {
      "type": "string",
      "description": "The image `sizes` attribute.",
      "required": false
    },
    "src": {
      "type": "string",
      "description": "The image `src` attribute.",
      "required": false
    },
    "srcSet": {
      "type": "string",
      "description": "The image `srcset` attribute.",
      "required": false
    }
  }
}
