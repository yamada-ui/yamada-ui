{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": [],
    "hooks": ["use-local-storage"],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport { useEffect } from \"react\"\nimport { useEnvironment, useCallbackRef } from \"@yamada-ui/react\"\n\ntype Handler<E extends string> = E extends keyof WindowEventMap\n  ? (ev: WindowEventMap[E]) => void\n  : (ev: CustomEvent) => void\ntype Options = AddEventListenerOptions | boolean\n\n/**\n * `useWindowEvent` is a custom hook that assigns an event listener to `window`.\n *\n * @see https://yamada-ui.com/hooks/use-window-event\n */\nexport const useWindowEvent = <E extends string>(\n  ev: E,\n  handler: Handler<E>,\n  options?: Options,\n) => {\n  const { getWindow } = useEnvironment()\n  const listener = useCallbackRef(\n    handler,\n  ) as unknown as EventListenerOrEventListenerObject\n\n  useEffect(() => {\n    getWindow()?.addEventListener(ev, listener, options)\n\n    return () => {\n      getWindow()?.removeEventListener(ev, listener, options)\n    }\n  }, [ev, listener, options, getWindow])\n}\n"
    }
  ]
}
