{
  "Accordion": {
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultIndex": {
      "type": "number | number[]",
      "description": "The initial index(es) of the accordion item to expand.",
      "required": false
    },
    "icon": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ((props: { ...; }) => ReactNode)",
      "description": "The accordion icon for all items to use.",
      "required": false
    },
    "iconHidden": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, hide the accordion icon for all items.",
      "required": false
    },
    "index": {
      "type": "number | number[]",
      "description": "The index(es) of the accordion item to expand.",
      "required": false
    },
    "isMultiple": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `multiple` instead.",
      "description": "If `true`, multiple accordion items can be expanded at once.",
      "required": false
    },
    "isToggle": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `toggle` instead.",
      "description": "If `true`, any expanded accordion item can be collapsed again.",
      "required": false
    },
    "multiple": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, multiple accordion items can be expanded at once.",
      "required": false
    },
    "onChange": {
      "type": "(index: number | number[]) => void",
      "description": "The callback invoked when accordion items are expanded or collapsed.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the Accordion.",
      "required": false
    },
    "toggle": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, any expanded accordion item can be collapsed again.",
      "required": false
    },
    "variant": {
      "type": "\"basic\" | \"card\" | \"unstyled\"",
      "defaultValue": "\"basic\"",
      "description": "The variant of the Accordion.",
      "required": false
    }
  },
  "AccordionItem": {
    "disabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the accordion item will be disabled.",
      "required": false
    },
    "icon": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ((props: { ...; }) => ReactNode)",
      "description": "The accordion icon to use.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `disabled` instead.",
      "description": "If `true`, the accordion item will be disabled.",
      "required": false
    },
    "label": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ((props: { ...; }) => ReactNode)",
      "description": "The accordion label to use.",
      "required": false
    }
  },
  "AccordionLabel": {
    "containerProps": {
      "type": "HTMLUIProps",
      "description": "Props the container element.",
      "required": false
    },
    "icon": {
      "type": "string | number | boolean | ((props: { isDisabled: boolean; isExpanded: boolean; disabled?: boolean | undefined; expanded?: boolean | undefined; }) => ReactNode) | ReactElement<any, string | JSXElementConstructor<...>> | Iterable<...> | ReactPortal",
      "description": "The accordion icon to use.",
      "required": false
    }
  },
  "AccordionPanel": {
    "animationOpacity": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the opacity of the content will be animated.",
      "required": false
    },
    "delay": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `delay` definition for `enter` and `exit`.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `duration` definition for `enter` and `exit`.",
      "required": false
    },
    "endingHeight": {
      "type": "string | number",
      "defaultValue": "auto",
      "description": "The height you want the content in its expanded state.",
      "required": false
    },
    "enter": {
      "type": "any",
      "description": "Custom `enter`.",
      "required": false
    },
    "exit": {
      "type": "any",
      "description": "Custom `exit`.",
      "required": false
    },
    "initial": {
      "type": "any",
      "description": "Custom `initial`.",
      "required": false
    },
    "open": {
      "type": "boolean",
      "description": "Show the component. triggers when enter or exit states.",
      "required": false
    },
    "startingHeight": {
      "type": "string | number",
      "defaultValue": "0",
      "description": "The height you want the content in its collapsed state.",
      "required": false
    },
    "transition": {
      "type": "MotionLifecycleProps<Transition$1>",
      "description": "Custom `transition` definition for `enter` and `exit`.",
      "required": false
    },
    "transitionEnd": {
      "type": "MotionLifecycleProps<\n  MakeCustomValueType<TargetProperties>\n>",
      "description": "Custom `transitionEnd` definition for `enter` and `exit`.",
      "required": false
    },
    "unmountOnExit": {
      "type": "boolean",
      "description": "If `true`, the element will unmount when `isOpen={false}` and animation is done.",
      "required": false
    }
  }
}
