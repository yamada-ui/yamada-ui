{
  "Resizable": {
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "defaultValue": "\"gray\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "containerRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLDivElement | null) => void)\n  | MutableRefObject<HTMLDivElement | null>",
      "description": "Ref for resizable container element.",
      "required": false
    },
    "controlRef": {
      "type": "RefObject<ResizableGroupControl>",
      "description": "Ref of the resizable item callback.",
      "required": false
    },
    "direction": {
      "type": "ResizableDirection",
      "defaultValue": "horizontal",
      "description": "The direction of the resizable.",
      "required": false
    },
    "groupProps": {
      "type": "ResizableGroupProps",
      "description": "Props for resizable component.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "description": "If `true`, the resizable trigger will be disabled.",
      "required": false
    },
    "keyboardStep": {
      "type": "number",
      "defaultValue": "10",
      "description": "Unit to resize by keyboard operation.",
      "required": false
    },
    "onLayout": {
      "type": "PanelGroupOnLayout",
      "description": "The callback invoked when resizable items are resized.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the Resizable.",
      "required": false
    },
    "storage": {
      "type": "PanelGroupStorage",
      "description": "A callback that gets and sets a value in custom storage.",
      "required": false
    },
    "storageKey": {
      "type": "string",
      "description": "Key of value saved in storage.\nBy default, it is saved to `local storage`.",
      "required": false
    },
    "variant": {
      "type": "\"border\" | \"spacer\" | \"unstyled\"",
      "defaultValue": "\"border\"",
      "description": "The variant of the Resizable.",
      "required": false
    }
  },
  "ResizableItem": {
    "as": { "type": "keyof HTMLElementTagNameMap", "required": false },
    "collapsedSize": {
      "type": "number",
      "description": "The collapsed size of the resizable item.",
      "required": false
    },
    "collapsible": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the resizable item can be collapsed.",
      "required": false
    },
    "containerProps": {
      "type": "Omit<HTMLUIProps, \"as\"> & ResizableItemProps",
      "description": "Props for resizable item container element.",
      "required": false
    },
    "controlRef": {
      "type": "RefObject<ResizableItemControl>",
      "description": "Ref of the resizable item callback.",
      "required": false
    },
    "defaultSize": {
      "type": "number",
      "description": "The initial size of the resizable item.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "id assigned to resizable item element.",
      "required": false
    },
    "innerRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: HTMLDivElement | null) => void)\n  | MutableRefObject<HTMLDivElement | null>",
      "description": "Ref for resizable item inner element.",
      "required": false
    },
    "maxSize": {
      "type": "number",
      "description": "The maximum allowed value of the resizable item.",
      "required": false
    },
    "minSize": {
      "type": "number",
      "description": "The minimum allowed value of the resizable item.",
      "required": false
    },
    "onCollapse": {
      "type": "() => void",
      "description": "The callback invoked when resizable item are collapsed.",
      "required": false
    },
    "onExpand": {
      "type": "() => void",
      "description": "The callback invoked when resizable item are expanded.",
      "required": false
    },
    "onResize": {
      "type": "(size: number, prevSize: number | undefined) => void",
      "description": "The callback invoked when resizable item are resized.",
      "required": false
    },
    "order": {
      "type": "number",
      "description": "Order for the resizable item.",
      "required": false
    }
  },
  "ResizableTriggerIcon": {
    "size": {
      "type": "UIValue<number | \"small\" | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\" | ... 17 more ... | \"xs\">",
      "deprecated": "Use `fontSize` instead.",
      "description": "The CSS `font-size` property.",
      "required": false
    }
  },
  "ResizableTrigger": {
    "as": { "type": "keyof HTMLElementTagNameMap", "required": false },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "description": "The resizable trigger icon to use.",
      "required": false
    },
    "iconProps": {
      "type": "HTMLUIProps",
      "description": "Props for resizable trigger icon component.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "id assigned to resizable trigger element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the resizable trigger will be disabled.",
      "required": false
    }
  }
}
