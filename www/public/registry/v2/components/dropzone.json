{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["fade", "input", "loading", "portal", "field"],
    "externals": ["react-dropzone@^14.3.8", "file-selector@^2.1.2"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "accept-types.ts",
      "content": "export const ACCEPT_TYPES = {\n  csv: \"text/csv\",\n  doc: \"application/msword\",\n  docx: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n  exe: \"application/vnd.microsoft.portable-executable\",\n  gif: \"image/gif\",\n  html: \"text/html\",\n  jpeg: \"image/jpeg\",\n  mp3: \"audio/mpeg\",\n  mp4: \"video/mp4\",\n  mpeg: \"video/mpeg\",\n  pdf: \"application/pdf\",\n  png: \"image/png\",\n  ppt: \"application/vnd.ms-powerpoint\",\n  pptx: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n  svg: \"image/svg+xml\",\n  txt: \"text/plain\",\n  webp: \"image/webp\",\n  xls: \"application/vnd.ms-excel\",\n  xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  zip: \"application/zip\",\n} as const\n\nexport const IMAGE_ACCEPT_TYPE = [\n  ACCEPT_TYPES.png,\n  ACCEPT_TYPES.gif,\n  ACCEPT_TYPES.jpeg,\n  ACCEPT_TYPES.svg,\n  ACCEPT_TYPES.webp,\n]\nexport const PDF_ACCEPT_TYPE = [ACCEPT_TYPES.pdf]\nexport const MS_WORD_ACCEPT_TYPE = [ACCEPT_TYPES.doc, ACCEPT_TYPES.docx]\nexport const MS_EXCEL_ACCEPT_TYPE = [ACCEPT_TYPES.xls, ACCEPT_TYPES.xlsx]\nexport const MS_POWER_POINT_ACCEPT_TYPE = [ACCEPT_TYPES.ppt, ACCEPT_TYPES.pptx]\nexport const EXE_ACCEPT_TYPE = [ACCEPT_TYPES.exe]\n"
    },
    {
      "name": "dropzone.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const dropzoneStyle = defineComponentSlotStyle({\n  base: {\n    description: { fontSize: \"sm\" },\n    icon: { fontSize: \"7xl\" },\n    loading: { fontSize: \"4xl\" },\n    overlay: {\n      alignItems: \"center\",\n      bg: \"bg.panel/40\",\n      boxSize: \"full\",\n      display: \"flex\",\n      inset: 0,\n      justifyContent: \"center\",\n      position: \"absolute\",\n      zIndex: \"yamcha\",\n    },\n    root: {\n      \"& *\": { pointerEvents: \"none\" },\n      \"--error-border-color\": \"colors.border.error\",\n      \"--focus-border-color\": \"colorScheme.outline\",\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      display: \"flex\",\n      focusRingColor: \"{focus-border-color}\",\n      justifyContent: \"center\",\n      overflow: \"hidden\",\n      p: \"md\",\n      position: \"relative\",\n      rounded: \"l2\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n      w: \"full\",\n      _loading: { cursor: \"not-allowed\" },\n      _readOnly: { layerStyle: \"readOnly\" },\n      _disabled: { layerStyle: \"disabled\" },\n    },\n    title: {\n      fontSize: \"xl\",\n    },\n  },\n\n  variants: {\n    base: {\n      icon: {\n        _groupAccept: { color: \"success\" },\n        _groupReject: { color: \"error\" },\n      },\n      root: {\n        color: \"fg.subtle\",\n        _accept: { bg: \"success.bg\" },\n        _reject: { bg: \"error.bg\" },\n      },\n      title: { color: \"fg.muted\" },\n    },\n    dashed: {\n      root: {\n        bg: \"transparent\",\n        borderStyle: \"dashed\",\n        borderWidth: \"1px\",\n        _accept: { borderColor: \"success.muted\" },\n        _reject: { borderColor: [\"error.muted\", \"error.subtle\"] },\n        _hover: {\n          \"&:not([data-accept], [data-reject])\": {\n            bg: \"bg.panel\",\n          },\n        },\n        _invalid: {\n          borderColor: \"{error-border-color}\",\n          focusRingColor: \"{error-border-color}\",\n        },\n      },\n    },\n    panel: {\n      root: {\n        bg: \"bg.panel\",\n        border: \"1px solid transparent\",\n        focusVisibleRing: \"inside\",\n        _hover: { bg: \"bg.subtle\" },\n        _invalid: {\n          borderColor: \"{error-border-color}\",\n          focusRingColor: \"{error-border-color}\",\n        },\n      },\n    },\n    plain: {\n      root: {\n        rounded: \"0\",\n        _invalid: {\n          borderColor: \"{error-border-color}\",\n          focusRingColor: \"{error-border-color}\",\n        },\n      },\n    },\n    solid: {\n      root: {\n        bg: \"transparent\",\n        borderWidth: \"1px\",\n        focusVisibleRing: \"inside\",\n        _accept: { borderColor: \"success.muted\" },\n        _reject: { borderColor: [\"error.muted\", \"error.subtle\"] },\n        _hover: { bg: \"bg.panel\" },\n        _invalid: {\n          borderColor: \"{error-border-color}\",\n          focusRingColor: \"{error-border-color}\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      root: { minH: \"xs\" },\n    },\n    sm: {\n      root: { minH: \"sm\" },\n    },\n    md: {\n      root: { minH: \"md\" },\n    },\n    lg: {\n      root: { minH: \"lg\" },\n    },\n    full: {\n      root: { minH: \"full\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"sm\",\n    variant: \"dashed\",\n  },\n})\n\nexport type DropzoneStyle = typeof dropzoneStyle\n"
    },
    {
      "name": "dropzone.tsx",
      "content": "\"use client\"\n\nimport type { FC, PropsWithChildren } from \"react\"\nimport type { HTMLStyledProps, ThemeProps, Merge } from \"@yamada-ui/react\"\nimport type { FadeProps } from \"../fade\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { Loading } from \"../loading\"\nimport type { DropzoneStyle } from \"./dropzone.style\"\nimport type { UseDropzoneProps, UseDropzoneReturn } from \"./use-dropzone\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { Fade } from \"../fade\"\nimport { useInputBorder } from \"../input\"\nimport { useLoadingComponent } from \"../loading\"\nimport { Portal } from \"../portal\"\nimport { dropzoneStyle } from \"./dropzone.style\"\nimport { useDropzone } from \"./use-dropzone\"\n\ninterface ComponentContext\n  extends Pick<\n    UseDropzoneReturn,\n    \"dragAccept\" | \"dragIdle\" | \"dragReject\" | \"loading\"\n  > {}\n\nexport interface DropzoneRootProps\n  extends Merge<HTMLStyledProps, UseDropzoneProps>,\n    UseInputBorderProps,\n    ThemeProps<DropzoneStyle>,\n    Pick<DropzoneLoadingProps, \"loadingScheme\"> {\n  /**\n   * Props for dropzone input element.\n   */\n  inputProps?: HTMLStyledProps<\"input\">\n  /**\n   * Props for dropzone loading icon element.\n   */\n  loadingProps?: DropzoneLoadingProps\n  /**\n   * Props for dropzone overlay element.\n   */\n  overlayProps?: DropzoneOverlayProps\n}\n\nconst {\n  ComponentContext,\n  PropsContext: DropzonePropsContext,\n  useComponentContext,\n  usePropsContext: useDropzonePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<DropzoneRootProps, DropzoneStyle>(\n  \"dropzone\",\n  dropzoneStyle,\n)\n\nexport { DropzonePropsContext, useDropzonePropsContext }\n\n/**\n * `Dropzone` is a component used for uploading files via drag and drop.\n *\n * @see https://yamada-ui.com/components/dropzone\n */\nexport const DropzoneRoot = withProvider(\n  ({\n    children,\n    errorBorderColor,\n    focusBorderColor,\n    loadingScheme,\n    inputProps,\n    loadingProps,\n    overlayProps,\n    ...rest\n  }) => {\n    const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n    const {\n      dragAccept,\n      dragIdle,\n      dragReject,\n      loading,\n      getInputProps,\n      getRootProps,\n    } = useDropzone(rest)\n    const context = useMemo(\n      () => ({\n        dragAccept,\n        dragIdle,\n        dragReject,\n        loading,\n      }),\n      [dragAccept, dragIdle, dragReject, loading],\n    )\n\n    return (\n      <ComponentContext value={context}>\n        <Portal>\n          <styled.input {...getInputProps(inputProps)} />\n        </Portal>\n\n        <styled.div data-group {...varProps} {...getRootProps()}>\n          <DropzoneOverlay {...overlayProps}>\n            <DropzoneLoading loadingScheme={loadingScheme} {...loadingProps} />\n          </DropzoneOverlay>\n\n          {children}\n        </styled.div>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)()\n\nexport interface DropzoneIconProps extends HTMLStyledProps<\"svg\"> {}\n\nexport const DropzoneIcon = withContext<\"svg\", DropzoneIconProps>(\n  \"svg\",\n  \"icon\",\n)()\n\nexport interface DropzoneTitleProps extends HTMLStyledProps<\"p\"> {}\n\nexport const DropzoneTitle = withContext<\"p\", DropzoneTitleProps>(\n  \"p\",\n  \"title\",\n)()\n\nexport interface DropzoneDescriptionProps extends HTMLStyledProps<\"p\"> {}\n\nexport const DropzoneDescription = withContext<\"p\", DropzoneDescriptionProps>(\n  \"p\",\n  \"description\",\n)()\n\nexport interface DropzoneDescriptionProps extends HTMLStyledProps<\"p\"> {}\n\ninterface DropzoneOverlayProps extends FadeProps {\n  loadingProps?: DropzoneLoadingProps\n}\n\nconst DropzoneOverlay = withContext<\"div\", DropzoneOverlayProps>(\n  Fade,\n  \"overlay\",\n)(undefined, (props) => {\n  const { loading } = useComponentContext()\n\n  return { open: loading, unmountOnExit: true, ...props }\n})\n\ninterface DropzoneLoadingProps extends Loading.Props {\n  /**\n   * The loading scheme.\n   *\n   * @default 'oval'\n   */\n  loadingScheme?: Loading.Scheme\n}\n\nconst DropzoneLoading = withContext<\"svg\", DropzoneLoadingProps>(\n  ({ loadingScheme = \"oval\", ...rest }) => {\n    const Component = useLoadingComponent(loadingScheme)\n\n    return <Component {...rest} />\n  },\n  \"loading\",\n)()\n\nexport interface DropzoneAcceptProps extends PropsWithChildren {}\n\nexport const DropzoneAccept: FC<DropzoneAcceptProps> = ({ children }) => {\n  const { dragAccept } = useComponentContext()\n\n  return dragAccept ? children : null\n}\n\nexport interface DropzoneRejectProps extends PropsWithChildren {}\n\nexport const DropzoneReject: FC<DropzoneRejectProps> = ({ children }) => {\n  const { dragReject } = useComponentContext()\n\n  return dragReject ? children : null\n}\n\nexport interface DropzoneIdleProps extends PropsWithChildren {}\n\nexport const DropzoneIdle: FC<DropzoneIdleProps> = ({ children }) => {\n  const { dragIdle } = useComponentContext()\n\n  return dragIdle ? children : null\n}\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./dropzone.style\"\nexport type {\n  DropzoneAcceptProps,\n  DropzoneDescriptionProps,\n  DropzoneIconProps,\n  DropzoneIdleProps,\n  DropzoneRejectProps,\n  DropzoneRootProps,\n  DropzoneTitleProps,\n} from \"./dropzone\"\nexport {\n  DropzoneAccept,\n  DropzoneDescription,\n  DropzoneIcon,\n  DropzoneIdle,\n  DropzonePropsContext,\n  DropzoneReject,\n  DropzoneRoot,\n  DropzoneTitle,\n  useDropzonePropsContext,\n} from \"./dropzone\"\nexport * as Dropzone from \"./namespace\"\nexport * from \"./use-dropzone\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  ACCEPT_TYPES,\n  EXE_ACCEPT_TYPE,\n  IMAGE_ACCEPT_TYPE,\n  MS_EXCEL_ACCEPT_TYPE,\n  MS_POWER_POINT_ACCEPT_TYPE,\n  MS_WORD_ACCEPT_TYPE,\n  PDF_ACCEPT_TYPE,\n} from \"./accept-types\"\nexport {\n  DropzoneAccept as Accept,\n  DropzoneDescription as Description,\n  DropzoneIcon as Icon,\n  DropzoneIdle as Idle,\n  DropzonePropsContext as PropsContext,\n  DropzoneReject as Reject,\n  DropzoneRoot as Root,\n  DropzoneTitle as Title,\n  useDropzonePropsContext as usePropsContext,\n} from \"./dropzone\"\nexport type {\n  DropzoneAcceptProps as AcceptProps,\n  DropzoneDescriptionProps as DescriptionProps,\n  DropzoneIconProps as IconProps,\n  DropzoneIdleProps as IdleProps,\n  DropzoneRejectProps as RejectProps,\n  DropzoneRootProps as RootProps,\n  DropzoneTitleProps as TitleProps,\n} from \"./dropzone\"\n"
    },
    {
      "name": "use-dropzone.ts",
      "content": "\"use client\"\n\nimport type { RefObject } from \"react\"\nimport type { Accept, DropzoneOptions } from \"react-dropzone\"\nimport type { HTMLProps, PropGetter } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport { fromEvent } from \"file-selector\"\nimport { useCallback, useId } from \"react\"\nimport { useDropzone as useOriginalDropzone } from \"react-dropzone\"\nimport {\n  ariaAttr,\n  assignRef,\n  cx,\n  dataAttr,\n  isArray,\n  mergeRefs,\n} from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\n\nexport interface UseDropzoneProps\n  extends Omit<HTMLProps, \"onDrop\" | \"onError\">,\n    FieldProps {\n  /**\n   * The HTML `name` attribute used for forms.\n   */\n  name?: string\n  /**\n   * Set accepted file types.\n   */\n  accept?: Accept | string[]\n  /**\n   * Set to true to focus the root element on render.\n   *\n   * @default false\n   */\n  autoFocus?: boolean\n  /**\n   * Use this to provide a custom file aggregator.\n   */\n  getFilesFromEvent?: DropzoneOptions[\"getFilesFromEvent\"]\n  /**\n   * If `true`, display the dropzone loading icon.\n   *\n   * @default false\n   */\n  loading?: boolean\n  /**\n   * Maximum accepted number of files.\n   * The default value is 0 which means there is no limitation to how many files are accepted.\n   *\n   * @default 0\n   */\n  maxFiles?: number\n  /**\n   * Maximum file size (in bytes).\n   *\n   * @default Infinity\n   */\n  maxSize?: number\n  /**\n   * Minimum file size (in bytes).\n   *\n   * @default 0\n   */\n  minSize?: number\n  /**\n   * Allow drag and drop (or selection from the file dialog) of multiple files.\n   *\n   * @default false\n   */\n  multiple?: boolean\n  /**\n   * If true, disables click to open the native file selection dialog.\n   *\n   * @default false\n   */\n  noClick?: boolean\n  /**\n   * If true, disables drag and drop.\n   *\n   * @default false\n   */\n  noDrag?: boolean\n  /**\n   * If true, stops drag event propagation to parents.\n   *\n   * @default false\n   */\n  noDragEventsBubbling?: boolean\n  /**\n   * If true, disables `space` and `enter` to open the native file selection dialog.\n   * Note that it also stops tracking the focus state.\n   *\n   * @default false\n   */\n  noKeyboard?: boolean\n  /**\n   * Ref to a open function.\n   */\n  openRef?: RefObject<() => void>\n  /**\n   * If false, allow dropped items to take over the current browser window.\n   *\n   * @default true\n   */\n  preventDropOnDocument?: boolean\n  /**\n   * If true, use the [File System API](https://developer.mozilla.org/en-US/docs/Web/API/File_System_API) to read files.\n   *\n   * @default false\n   */\n  useFsAccessApi?: boolean\n  /**\n   * Custom validation function.\n   * It must return null if there's no errors.\n   */\n  validator?: DropzoneOptions[\"validator\"]\n  /**\n   * Callback for when the dragenter event occurs.\n   */\n  onDragEnter?: DropzoneOptions[\"onDragEnter\"]\n  /**\n   * Callback for when the dragleave event occurs.\n   */\n  onDragLeave?: DropzoneOptions[\"onDragLeave\"]\n  /**\n   * Callback for when the dragover event occurs.\n   */\n  onDragOver?: DropzoneOptions[\"onDragOver\"]\n  /**\n   * Callback for when the drop event occurs.\n   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.\n   */\n  onDrop?: DropzoneOptions[\"onDrop\"]\n  /**\n   * Callback for when the drop event occurs.\n   * Note that if no files are accepted, this callback is not invoked.\n   */\n  onDropAccepted?: DropzoneOptions[\"onDropAccepted\"]\n  /**\n   * Callback for when the drop event occurs.\n   * Note that if no files are rejected, this callback is not invoked.\n   */\n  onDropRejected?: DropzoneOptions[\"onDropRejected\"]\n  /**\n   * Callback for when there's some error from any of the promises.\n   */\n  onError?: DropzoneOptions[\"onError\"]\n  /**\n   * Callback for when closing the file dialog with no selection.\n   */\n  onFileDialogCancel?: DropzoneOptions[\"onFileDialogCancel\"]\n  /**\n   * Callback for when opening the file dialog.\n   */\n  onFileDialogOpen?: DropzoneOptions[\"onFileDialogOpen\"]\n}\n\nexport const useDropzone = (props: UseDropzoneProps = {}) => {\n  const {\n    props: {\n      id,\n      name,\n      accept,\n      autoFocus = false,\n      disabled,\n      getFilesFromEvent = fromEvent,\n      loading,\n      maxFiles = 0,\n      maxSize = Infinity,\n      minSize = 0,\n      multiple = false,\n      noClick = false,\n      noDrag = false,\n      noDragEventsBubbling = false,\n      noKeyboard = false,\n      openRef,\n      preventDropOnDocument = true,\n      readOnly,\n      useFsAccessApi = false,\n      validator,\n      onDragEnter,\n      onDragLeave,\n      onDragOver,\n      onDrop,\n      onDropAccepted,\n      onDropRejected,\n      onError,\n      onFileDialogCancel,\n      onFileDialogOpen,\n      ...rest\n    },\n    ariaProps,\n    dataProps,\n    eventProps,\n  } = useFieldProps(props)\n  const labelledbyId = useId()\n  const interactive = !(loading || readOnly || disabled)\n  const {\n    acceptedFiles,\n    fileRejections,\n    isDragAccept: dragAccept,\n    isDragActive: dragActive,\n    isDragReject: dragReject,\n    isFocused: focused,\n    open,\n    getInputProps: getOriginalInputProps,\n    getRootProps: getOriginalRootProps,\n  } = useOriginalDropzone({\n    accept: isArray(accept)\n      ? accept.reduce((prev, current) => ({ ...prev, [current]: [] }), {})\n      : accept,\n    autoFocus,\n    disabled: !interactive,\n    getFilesFromEvent,\n    maxFiles,\n    maxSize,\n    minSize,\n    multiple,\n    noClick,\n    noDrag,\n    noDragEventsBubbling,\n    noKeyboard,\n    preventDropOnDocument,\n    useFsAccessApi,\n    validator,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onDrop,\n    onDropAccepted,\n    onDropRejected,\n    onError,\n    onFileDialogCancel,\n    onFileDialogOpen,\n  })\n  const dragIdle = !dragAccept && !dragReject\n\n  assignRef(openRef, open)\n\n  const getRootProps: PropGetter = useCallback(\n    ({ ref, ...props } = {}) =>\n      getOriginalRootProps({\n        id: labelledbyId,\n        ...dataProps,\n        ...eventProps,\n        \"aria-disabled\": ariaAttr(!interactive),\n        \"data-accept\": dataAttr(dragAccept),\n        \"data-idle\": dataAttr(dragIdle),\n        \"data-loading\": dataAttr(loading),\n        \"data-reject\": dataAttr(dragReject),\n        ...rest,\n        ...props,\n        ref: mergeRefs(ref, rest.ref),\n      }),\n    [\n      getOriginalRootProps,\n      labelledbyId,\n      dataProps,\n      eventProps,\n      interactive,\n      dragAccept,\n      dragIdle,\n      loading,\n      dragReject,\n      rest,\n    ],\n  )\n\n  const getInputProps: PropGetter<\"input\"> = useCallback(\n    ({ \"aria-labelledby\": ariaLabelledby, ...props } = {}) =>\n      getOriginalInputProps({\n        id,\n        name,\n        disabled,\n        readOnly,\n        ...ariaProps,\n        ...dataProps,\n        ...props,\n        \"aria-labelledby\": cx(ariaLabelledby, labelledbyId),\n      }),\n    [\n      getOriginalInputProps,\n      id,\n      name,\n      disabled,\n      readOnly,\n      ariaProps,\n      dataProps,\n      labelledbyId,\n    ],\n  )\n\n  return {\n    acceptedFiles,\n    dragAccept,\n    dragActive,\n    dragIdle,\n    dragReject,\n    fileRejections,\n    focused,\n    loading,\n    open,\n    getInputProps,\n    getRootProps,\n  }\n}\n\nexport type UseDropzoneReturn = ReturnType<typeof useDropzone>\n"
    }
  ]
}
