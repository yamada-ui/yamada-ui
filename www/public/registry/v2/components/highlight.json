{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["mark", "text"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "highlight.tsx",
      "content": "import type { FC } from \"react\"\nimport type { MarkProps } from \"../mark\"\nimport type { TextProps } from \"../text\"\nimport { Fragment } from \"react\"\nimport { Mark } from \"../mark\"\nimport { Text } from \"../text\"\nimport { useHighlight } from \"./use-highlight\"\n\nexport interface HighlightProps extends Omit<TextProps, \"children\"> {\n  /**\n   * The text used for searching.\n   */\n  children: string\n  /**\n   * Can be a single string or an array of strings. These are the terms that are highlighted in the text.\n   */\n  query: string | string[]\n  /**\n   * If `true`, `Fragment` is used for rendering.\n   *\n   * @default false\n   */\n  fragment?: boolean\n  /**\n   * Properties passed to the Mark component which is used to highlight the matched terms.\n   */\n  markProps?: MarkProps\n}\n\n/**\n * `Highlight` is a component that highlights specified strings within text. By default, it renders a `p` element.\n *\n * @see https://yamada-ui.com/components/highlight\n */\nexport const Highlight: FC<HighlightProps> = ({\n  children: text,\n  fragment = false,\n  query,\n  markProps,\n  ...rest\n}) => {\n  const chunks = useHighlight({ query, text })\n\n  const Component: FC = fragment ? Fragment : Text\n\n  return (\n    <Component {...rest}>\n      {chunks.map(({ match, text }, index) =>\n        match ? (\n          <Mark key={index} {...markProps}>\n            {text}\n          </Mark>\n        ) : (\n          <Fragment key={index}>{text}</Fragment>\n        ),\n      )}\n    </Component>\n  )\n}\n"
    },
    {
      "name": "index.ts",
      "content": "export { Highlight } from \"./highlight\"\nexport type { HighlightProps } from \"./highlight\"\nexport * from \"./use-highlight\"\n"
    },
    {
      "name": "use-highlight.ts",
      "content": "import { useMemo } from \"react\"\nimport { toArray } from \"@yamada-ui/react\"\n\nexport interface Chunk {\n  match: boolean\n  text: string\n}\n\nconst escapeRegexp = (term: string): string =>\n  term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char: string) => `\\\\${char}`)\n\nconst createRegexp = (query: string[]): RegExp | undefined => {\n  query = query.filter(Boolean).map((text) => escapeRegexp(text.trim()))\n\n  if (query.length) return new RegExp(`(${query.join(\"|\")})`, \"ig\")\n}\n\nexport interface UseHighlightProps {\n  query: string | string[]\n  text: string\n}\n\nexport const useHighlight = ({ query, text }: UseHighlightProps) => {\n  const chunks = useMemo(() => {\n    const regexp = createRegexp(toArray(query))\n\n    if (!regexp) return [{ match: false, text }]\n\n    return text\n      .split(regexp)\n      .filter(Boolean)\n      .map((text) => ({ match: regexp.test(text), text }))\n  }, [text, query])\n\n  return chunks\n}\n\nexport type UseHighlightReturn = ReturnType<typeof useHighlight>\n"
    }
  ]
}
