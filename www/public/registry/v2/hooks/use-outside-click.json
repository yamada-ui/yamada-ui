{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": ["popover", "tooltip"],
    "hooks": [],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport type { RefObject } from \"react\"\nimport { useCallback, useEffect, useRef } from \"react\"\nimport { getDocument, isArray, useCallbackRef } from \"@yamada-ui/react\"\n\nexport interface UseOutsideClickProps {\n  ref: RefObject<HTMLElement | null> | RefObject<HTMLElement | null>[]\n  enabled?: boolean\n  handler?: (ev: Event) => void\n}\n\n/**\n * `useOutsideClick` is a custom hook that detects click events outside of an element.\n *\n * @see https://yamada-ui.com/hooks/use-outside-click\n */\nexport const useOutsideClick = ({\n  ref,\n  enabled = true,\n  handler,\n}: UseOutsideClickProps) => {\n  const handlerRef = useCallbackRef(handler)\n\n  const state = useRef({\n    ignoreEmulatedMouseEvents: false,\n    isPointerDown: false,\n  })\n\n  const onPointerDown = useCallback(\n    (ev: MouseEvent | TouchEvent) => {\n      if (isValidEvent(ev, ref)) state.current.isPointerDown = true\n    },\n    [ref],\n  )\n\n  const onMouseUp = useCallback(\n    (ev: MouseEvent) => {\n      if (state.current.ignoreEmulatedMouseEvents) {\n        state.current.ignoreEmulatedMouseEvents = false\n\n        return\n      }\n\n      if (state.current.isPointerDown && handler && isValidEvent(ev, ref)) {\n        state.current.isPointerDown = false\n\n        handlerRef(ev)\n      }\n    },\n    [handler, handlerRef, ref],\n  )\n\n  const onTouchEnd = useCallback(\n    (ev: TouchEvent) => {\n      state.current.ignoreEmulatedMouseEvents = true\n\n      if (state.current.isPointerDown && handler && isValidEvent(ev, ref)) {\n        state.current.isPointerDown = false\n\n        handlerRef(ev)\n      }\n    },\n    [handler, handlerRef, ref],\n  )\n\n  useEffect(() => {\n    if (!enabled) return\n\n    const doc = getDocument(isArray(ref) ? ref[0]?.current : ref.current)\n\n    doc.addEventListener(\"mousedown\", onPointerDown, true)\n    doc.addEventListener(\"mouseup\", onMouseUp, true)\n    doc.addEventListener(\"touchstart\", onPointerDown, true)\n    doc.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true)\n      doc.removeEventListener(\"mouseup\", onMouseUp, true)\n      doc.removeEventListener(\"touchstart\", onPointerDown, true)\n      doc.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [\n    handler,\n    ref,\n    handlerRef,\n    state,\n    enabled,\n    onPointerDown,\n    onMouseUp,\n    onTouchEnd,\n  ])\n}\n\nconst isValidEvent = (\n  ev: MouseEvent | TouchEvent,\n  ref: RefObject<HTMLElement | null> | RefObject<HTMLElement | null>[],\n) => {\n  const target = ev.target as HTMLElement | null\n\n  if (\"button\" in ev && ev.button > 0) return false\n\n  if (target) if (!getDocument(target).contains(target)) return false\n\n  if (isArray(ref)) {\n    return !ref.some((ref) => ref.current?.contains(target))\n  } else {\n    return !ref.current?.contains(target)\n  }\n}\n"
    }
  ]
}
