{
  "Toggle": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "\"link\" | \"amber\" | \"black\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" ...",
      "description": "The variant of the component.",
      "required": false
    },
    "active": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the button is represented as active.",
      "required": false
    },
    "checked": {
      "type": "boolean",
      "description": "If `true`, the toggle button will be checked.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the button is disabled.",
      "required": false
    },
    "disableRipple": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, disable ripple effects when pressing a element.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"link\" | \"amber\" | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" ...",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "fullRounded": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If true, the toggle button is full rounded. Else, it'll be slightly round.",
      "required": false
    },
    "icon": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
      "description": "The icon to be used in the button.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be invalid.",
      "required": false
    },
    "loading": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the loading state of the button is represented.",
      "required": false
    },
    "onChange": {
      "type": "(checked: boolean) => void",
      "description": "The callback invoked when checked state changes.",
      "required": false
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be readonly.",
      "required": false
    },
    "required": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be required.",
      "required": false
    },
    "type": {
      "type": "\"button\" | \"submit\" | \"reset\"",
      "defaultValue": "\"button\"",
      "description": "The type of button. Accepts `button`, `reset`, or `submit`.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value of the toggle button.",
      "required": false
    }
  },
  "ToggleGroup": {
    "Item": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "\"link\" | \"amber\" | \"black\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" ...",
        "description": "The variant of the component.",
        "required": false
      },
      "active": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the button is represented as active.",
        "required": false
      },
      "checked": {
        "type": "boolean",
        "description": "If `true`, the toggle button will be checked.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the button is disabled.",
        "required": false
      },
      "disableRipple": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, disable ripple effects when pressing a element.",
        "required": false
      },
      "errorBorderColor": {
        "type": "\"link\" | \"amber\" | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" ...",
        "description": "The border color when the input is invalid.",
        "required": false
      },
      "fullRounded": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If true, the toggle button is full rounded. Else, it'll be slightly round.",
        "required": false
      },
      "icon": {
        "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
        "description": "The icon to be used in the button.",
        "required": false
      },
      "invalid": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be invalid.",
        "required": false
      },
      "loading": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the loading state of the button is represented.",
        "required": false
      },
      "onChange": {
        "type": "(checked: boolean) => void",
        "description": "The callback invoked when checked state changes.",
        "required": false
      },
      "readOnly": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be readonly.",
        "required": false
      },
      "required": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the field will be required.",
        "required": false
      },
      "type": {
        "type": "\"button\" | \"submit\" | \"reset\"",
        "defaultValue": "\"button\"",
        "description": "The type of button. Accepts `button`, `reset`, or `submit`.",
        "required": false
      },
      "value": {
        "type": "Y",
        "description": "The value of the toggle button.",
        "required": false
      }
    },
    "Root": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "\"link\" | \"amber\" | \"black\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" ...",
        "description": "The variant of the component.",
        "required": false
      },
      "align": {
        "type": "\"center\" | \"normal\" | \"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"end\" | \"start\" ...",
        "description": "The CSS `align-items` property.",
        "required": false
      },
      "attached": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the borderRadius of button that are direct children will be altered to look flushed together.",
        "required": false
      },
      "basis": {
        "type": "number | \"1\" | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"3xl\" | \"4xl\" | \"xs\" ...",
        "description": "The CSS `flex-basis` property.",
        "required": false
      },
      "defaultValue": {
        "type": "Y extends any[] ? Y : undefined | Y",
        "description": "The initial value of the toggle button group.",
        "required": false
      },
      "direction": {
        "type": "\"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"row\" | \"column\" | \"column-reverse\" | \"row-reverse\" ...",
        "description": "The CSS `flex-direction` property.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, all wrapped toggle button will be disabled.",
        "required": false
      },
      "fullRounded": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If true, the toggle button is full rounded. Else, it'll be slightly round.",
        "required": false
      },
      "grow": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, the children will grow to fill the available space.",
        "required": false
      },
      "justify": {
        "type": "\"center\" | \"normal\" | \"left\" | \"right\" | \"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" ...",
        "description": "The CSS `justify-content` property.",
        "required": false
      },
      "onChange": {
        "type": "(value: Y extends any[] ? Y : undefined | Y) => void",
        "description": "The callback fired when any children toggle button is selected or unselected.",
        "required": false
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "defaultValue": "\"horizontal\"",
        "description": "The orientation of the group.",
        "required": false
      },
      "readOnly": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, all wrapped toggle button will be readonly.",
        "required": false
      },
      "shrink": {
        "type": "\"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | number & {} ...",
        "description": "The CSS `flex-shrink` property.",
        "required": false
      },
      "stacking": {
        "type": "\"first-on-top\" | \"last-on-top\"",
        "description": "The stacking order of the group.",
        "required": false
      },
      "value": {
        "type": "Y extends any[] ? Y : undefined | Y",
        "description": "The value of the toggle button group.",
        "required": false
      },
      "wrap": {
        "type": "\"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"wrap\" | \"nowrap\" | \"wrap-reverse\" ...",
        "description": "The CSS `flex-wrap` property.",
        "required": false
      }
    }
  },
  "ToggleGroupRoot": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "\"link\" | \"amber\" | \"black\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"ghost\" | \"outline\" | \"solid\" | \"subtle\" | \"surface\" ...",
      "description": "The variant of the component.",
      "required": false
    },
    "align": {
      "type": "\"center\" | \"normal\" | \"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"end\" | \"start\" ...",
      "description": "The CSS `align-items` property.",
      "required": false
    },
    "attached": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the borderRadius of button that are direct children will be altered to look flushed together.",
      "required": false
    },
    "basis": {
      "type": "number | \"1\" | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"3xl\" | \"4xl\" | \"xs\" ...",
      "description": "The CSS `flex-basis` property.",
      "required": false
    },
    "defaultValue": {
      "type": "Y extends any[] ? Y : undefined | Y",
      "description": "The initial value of the toggle button group.",
      "required": false
    },
    "direction": {
      "type": "\"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"row\" | \"column\" | \"column-reverse\" | \"row-reverse\" ...",
      "description": "The CSS `flex-direction` property.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, all wrapped toggle button will be disabled.",
      "required": false
    },
    "fullRounded": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If true, the toggle button is full rounded. Else, it'll be slightly round.",
      "required": false
    },
    "grow": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the children will grow to fill the available space.",
      "required": false
    },
    "justify": {
      "type": "\"center\" | \"normal\" | \"left\" | \"right\" | \"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" ...",
      "description": "The CSS `justify-content` property.",
      "required": false
    },
    "onChange": {
      "type": "(value: Y extends any[] ? Y : undefined | Y) => void",
      "description": "The callback fired when any children toggle button is selected or unselected.",
      "required": false
    },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "\"horizontal\"",
      "description": "The orientation of the group.",
      "required": false
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, all wrapped toggle button will be readonly.",
      "required": false
    },
    "shrink": {
      "type": "\"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | number & {} ...",
      "description": "The CSS `flex-shrink` property.",
      "required": false
    },
    "stacking": {
      "type": "\"first-on-top\" | \"last-on-top\"",
      "description": "The stacking order of the group.",
      "required": false
    },
    "value": {
      "type": "Y extends any[] ? Y : undefined | Y",
      "description": "The value of the toggle button group.",
      "required": false
    },
    "wrap": {
      "type": "\"initial\" | \"inherit\" | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"wrap\" | \"nowrap\" | \"wrap-reverse\" ...",
      "description": "The CSS `flex-wrap` property.",
      "required": false
    }
  }
}
