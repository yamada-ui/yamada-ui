{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["portal", "close-button", "alert", "status"],
    "externals": ["sonner@^2.0.7"],
    "hooks": [],
    "providers": []
  },
  "dependents": { "components": [], "hooks": [], "providers": ["ui-provider"] },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export { NoticeProvider } from \"./notice-provider\"\nexport type { NoticeProviderProps } from \"./notice-provider\"\nexport { useNotice } from \"./use-notice\"\nexport type { UseNoticeOptions } from \"./use-notice\"\n"
    },
    {
      "name": "notice-provider.tsx",
      "content": "\"use client\"\n\nimport type { FC, RefObject } from \"react\"\nimport type {\n  HTMLStyledProps,\n  NoticeConfig,\n  NoticePlacement,\n  ThemeProps,\n} from \"@yamada-ui/react\"\nimport type { NoticeStyle } from \"./notice.style\"\nimport { createContext, createRef, use, useMemo, useRef } from \"react\"\nimport { Portal } from \"../portal\"\nimport { NoticeRoot, PLACEMENT_MAP } from \"./notice\"\n\nexport interface NoticeProviderProps\n  extends HTMLStyledProps,\n    NoticeConfig,\n    ThemeProps<NoticeStyle> {\n  /**\n   * Container ref for the portal.\n   */\n  containerRef?: RefObject<HTMLElement>\n}\n\ninterface NoticeState {\n  limit: number\n  placement: NoticePlacement\n}\n\nexport interface NoticeMethods {\n  getLimit: (placement: NoticePlacement) => number\n  updateLimit: (state: NoticeState) => void\n}\n\ninterface NoticeContext {\n  getLimit: (placement: NoticePlacement) => number\n  updateLimit: (state: NoticeState) => void\n}\n\nconst NoticeContext = createContext({} as NoticeContext)\n\nexport type Controller = ReturnType<typeof createController>\n\nconst createController = () => ({\n  getLimit: createRef<NoticeMethods[\"getLimit\"]>(),\n  updateLimit: createRef<NoticeMethods[\"updateLimit\"]>(),\n})\n\nconst createMethods = (\n  refs: {\n    [K in NoticePlacement]?: RefObject<Controller>\n  },\n  defaultLimit: number,\n): NoticeMethods => ({\n  getLimit: (placement) => {\n    const method = refs[placement]?.current.getLimit.current\n\n    return method?.(placement) ?? defaultLimit\n  },\n  updateLimit: (state) => {\n    const { placement } = state\n    const method = refs[placement]?.current.updateLimit.current\n\n    method?.(state)\n  },\n})\n\nexport const NoticeProvider: FC<NoticeProviderProps> = ({\n  children,\n  containerRef,\n  expand = false,\n  limit = 3,\n}) => {\n  const placementMap = useRef<{\n    [K in NoticePlacement]?: RefObject<Controller>\n  }>({})\n\n  const value = useMemo(\n    () => ({ ...createMethods(placementMap.current, limit) }),\n    [limit],\n  )\n\n  const components = useMemo(() => {\n    return (Object.keys(PLACEMENT_MAP) as NoticePlacement[]).map(\n      (placement) => {\n        if (!placementMap.current[placement])\n          placementMap.current[placement] = { current: createController() }\n\n        return (\n          <NoticeRoot\n            key={placement}\n            ref={placementMap.current[placement]}\n            expand={expand}\n            limit={limit}\n            placement={placement}\n          />\n        )\n      },\n    )\n  }, [limit, expand])\n\n  return (\n    <NoticeContext value={value}>\n      {children}\n      <Portal containerRef={containerRef}>{components}</Portal>\n    </NoticeContext>\n  )\n}\n\nexport const useNoticeContext = (): NoticeContext => {\n  const context = use(NoticeContext)\n\n  return context\n}\n"
    },
    {
      "name": "notice.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const noticeStyle = defineComponentSlotStyle({\n  base: {\n    closeButton: {\n      \"&:is([data-variant='plain'], [data-variant='island'])\": {\n        colorScheme: \"mono!\",\n      },\n      \"&:is([data-variant='solid'])\": {\n        color: \"colorScheme.contrast!\",\n        _hover: { bg: \"colorScheme.solid!\" },\n      },\n      fontSize: \"md!\",\n      minBoxSize: \"6!\",\n      position: \"absolute\",\n      right: \"3\",\n      top: \"2.5\",\n    },\n    content: {\n      \"&[data-close-button]\": { pe: \"6\" },\n      display: \"flex\",\n      flex: \"1\",\n      flexDirection: \"column\",\n      gap: \"1\",\n    },\n    item: {\n      minW: \"sm\",\n      position: \"relative\",\n    },\n    root: {\n      \"--mobile-offset\": \"{spaces.md}\",\n      \"--offset\": \"{spaces.lg}\",\n    },\n  },\n})\n\nexport type NoticeStyle = typeof noticeStyle\n"
    },
    {
      "name": "notice.tsx",
      "content": "\"use client\"\n\nimport type { RefObject } from \"react\"\nimport type { ToasterProps } from \"sonner\"\nimport type {\n  HTMLStyledProps,\n  NoticeCloseStrategy,\n  NoticeConfig,\n  NoticePlacement,\n} from \"@yamada-ui/react\"\nimport type { CloseButtonProps } from \"../close-button\"\nimport type { Controller, NoticeMethods } from \"./notice-provider\"\nimport type { NoticeStyle } from \"./notice.style\"\nimport type { UseNoticeOptions } from \"./use-notice\"\nimport { useCallback, useMemo, useState } from \"react\"\nimport { toast, Toaster } from \"sonner\"\nimport {\n  createSlotComponent,\n  styled,\n  assignRef,\n  dataAttr,\n  handlerAll,\n  noop,\n} from \"@yamada-ui/react\"\nimport { Alert } from \"../alert\"\nimport { CloseButton } from \"../close-button\"\nimport { noticeStyle } from \"./notice.style\"\n\ntype ToasterPosition = Required<ToasterProps>[\"position\"]\n\nexport const PLACEMENT_MAP: {\n  [key in NoticePlacement]: ToasterPosition\n} = {\n  end: \"bottom-center\",\n  \"end-center\": \"bottom-center\",\n  \"end-end\": \"bottom-right\",\n  \"end-start\": \"bottom-left\",\n  start: \"top-center\",\n  \"start-center\": \"top-center\",\n  \"start-end\": \"top-right\",\n  \"start-start\": \"top-left\",\n}\n\nexport interface NoticeRootProps\n  extends Pick<Required<NoticeConfig>, \"expand\" | \"limit\" | \"placement\"> {\n  ref: RefObject<Controller>\n}\n\nconst {\n  PropsContext: NoticePropsContext,\n  usePropsContext: useNoticePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<NoticeRootProps, NoticeStyle>(\"notice\", noticeStyle)\n\nexport { NoticePropsContext, useNoticePropsContext }\n\nexport const NoticeRoot = withProvider<\"fragment\", NoticeRootProps>(\n  ({ ref, expand, limit, placement, ...rest }) => {\n    const position = useMemo(() => PLACEMENT_MAP[placement], [placement])\n    const [updatedLimit, setUpdatedLimit] = useState(limit)\n\n    const getLimit = useCallback<NoticeMethods[\"getLimit\"]>(\n      (target) => {\n        if (target === placement && updatedLimit !== limit) {\n          return updatedLimit\n        } else {\n          return limit\n        }\n      },\n      [placement, limit, updatedLimit],\n    )\n\n    const updateLimit = useCallback<NoticeMethods[\"updateLimit\"]>(\n      ({ limit, placement: target }) => {\n        if (target === placement) setUpdatedLimit(limit)\n      },\n      [placement],\n    )\n\n    assignRef(ref.current.updateLimit, updateLimit)\n    assignRef(ref.current.getLimit, getLimit)\n\n    return (\n      <styled.div {...rest}>\n        <Toaster\n          id={placement}\n          expand={expand}\n          gap={16}\n          mobileOffset=\"var(--mobile-offset)\"\n          offset=\"var(--offset)\"\n          position={position}\n          visibleToasts={updatedLimit}\n        />\n      </styled.div>\n    )\n  },\n  \"root\",\n)()\n\nexport interface NoticeItemProps\n  extends UseNoticeOptions,\n    Omit<HTMLStyledProps, \"id\" | \"title\"> {\n  closeStrategies?: NoticeCloseStrategy[]\n}\n\nexport const NoticeItem = withContext<\"div\", NoticeItemProps>(\n  ({\n    id,\n    variant = \"plain\",\n    closable,\n    closeStrategies = [\"click\", \"drag\"],\n    description,\n    loadingScheme,\n    status,\n    title,\n    withIcon = true,\n    closeButtonProps,\n    contentProps,\n    descriptionProps,\n    iconProps,\n    loadingProps,\n    titleProps,\n    onClick,\n    ...rest\n  }) => {\n    const onClose = useCallback(() => toast.dismiss(id), [id])\n\n    return (\n      <Alert.Root\n        variant={variant}\n        status={status}\n        {...rest}\n        onClick={handlerAll(\n          onClick,\n          closable && closeStrategies.includes(\"click\") ? onClose : noop,\n        )}\n      >\n        {withIcon ? (\n          loadingScheme ? (\n            <Alert.Loading loadingScheme={loadingScheme} {...loadingProps} />\n          ) : (\n            <Alert.Icon {...iconProps} />\n          )\n        ) : null}\n\n        <NoticeContent\n          data-close-button={dataAttr(\n            closable && closeStrategies.includes(\"button\"),\n          )}\n          {...contentProps}\n        >\n          {title ? (\n            <Alert.Title me=\"0\" {...titleProps}>\n              {title}\n            </Alert.Title>\n          ) : null}\n          {description ? (\n            <Alert.Description lineClamp={2} {...descriptionProps}>\n              {description}\n            </Alert.Description>\n          ) : null}\n        </NoticeContent>\n\n        {closable && closeStrategies.includes(\"button\") ? (\n          <NoticeCloseButton\n            data-variant={variant}\n            {...closeButtonProps}\n            onClick={handlerAll(closeButtonProps?.onClick, onClose)}\n          />\n        ) : null}\n      </Alert.Root>\n    )\n  },\n  \"item\",\n)()\n\nexport interface NoticeContentProps extends HTMLStyledProps {}\n\nexport const NoticeContent = withContext<\"div\", NoticeContentProps>(\n  \"div\",\n  \"content\",\n)()\n\nexport interface NoticeCloseButtonProps extends CloseButtonProps {}\n\nexport const NoticeCloseButton = withContext<\"button\", NoticeCloseButtonProps>(\n  CloseButton,\n  \"closeButton\",\n)()\n"
    },
    {
      "name": "use-notice.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, NoticeConfig } from \"@yamada-ui/react\"\nimport type { Alert } from \"../alert\"\nimport type { CloseButtonProps } from \"../close-button\"\nimport type { StatusScheme } from \"../status\"\nimport { useCallback, useMemo } from \"react\"\nimport { toast } from \"sonner\"\nimport { useSystem, isArray } from \"@yamada-ui/react\"\nimport { NoticeItem } from \"./notice\"\nimport { useNoticeContext } from \"./notice-provider\"\n\nexport interface UseNoticeOptions\n  extends NoticeConfig,\n    Omit<Alert.RootProps, \"direction\" | \"id\" | \"status\" | \"title\">,\n    Pick<Alert.LoadingProps, \"loadingScheme\"> {\n  /**\n   * Unique identifier for the notice.\n   */\n  id?: number | string\n  /**\n   * The description of the notice.\n   */\n  description?: ReactNode\n  /**\n   * The status of the notice.\n   */\n  status?: StatusScheme\n  /**\n   * The title of the notice.\n   */\n  title?: ReactNode\n  /**\n   * If `true`, shows an icon.\n   */\n  withIcon?: boolean\n  /**\n   * Props for the close button.\n   */\n  closeButtonProps?: CloseButtonProps\n  /**\n   * Props for the content container.\n   */\n  contentProps?: HTMLStyledProps\n  /**\n   * Props for the description.\n   */\n  descriptionProps?: Alert.DescriptionProps\n  /**\n   * Props for the icon.\n   */\n  iconProps?: Alert.IconProps\n  /**\n   * Props for the loading component.\n   */\n  loadingProps?: Alert.LoadingProps\n  /**\n   * Props for the title.\n   */\n  titleProps?: Alert.TitleProps\n}\n\nexport interface NoticeComponentProps {\n  onClose: () => void\n}\n\n/**\n * `useNotice` is a custom hook that controls the notifications of the application using Sonner.\n *\n * @see https://yamada-ui.com/docs/hooks/use-notice\n */\nexport const useNotice = (options: UseNoticeOptions = {}) => {\n  const { getLimit, updateLimit } = useNoticeContext()\n  const { config } = useSystem()\n\n  const systemOptions = useMemo(() => config.notice ?? {}, [config])\n  const defaultOptions = useMemo(\n    () => ({ ...systemOptions, ...options }),\n    [options, systemOptions],\n  )\n\n  const getOptions = useCallback(\n    (options: UseNoticeOptions) => ({ ...defaultOptions, ...options }),\n    [defaultOptions],\n  )\n\n  return useMemo(() => {\n    const notice = (options: UseNoticeOptions = {}) => {\n      options = getOptions(options)\n\n      const {\n        closable = true,\n        closeStrategy = [\"click\", \"drag\"],\n        duration,\n        limit = 3,\n        placement = \"start\",\n        ...props\n      } = options\n\n      if (limit) {\n        const currentLimit = getLimit(placement)\n\n        if (currentLimit !== limit) updateLimit({ limit, placement })\n      }\n\n      const closeStrategies = isArray(closeStrategy)\n        ? closeStrategy\n        : [closeStrategy]\n\n      const resolvedOptions = {\n        dismissible: closeStrategies.includes(\"drag\") && closable,\n        duration: duration ?? Number.POSITIVE_INFINITY,\n        toasterId: placement,\n      }\n\n      return toast.custom(\n        (id) => (\n          <NoticeItem\n            {...props}\n            id={id}\n            closable={closable}\n            closeStrategies={closeStrategies}\n          />\n        ),\n        resolvedOptions,\n      )\n    }\n\n    notice.close = (id: number | string) => toast.dismiss(id)\n\n    notice.closeAll = () => toast.dismiss()\n\n    notice.update = (id: number | string, options: UseNoticeOptions) => {\n      toast.dismiss(id)\n\n      return notice(options)\n    }\n\n    return notice\n  }, [getLimit, getOptions, updateLimit])\n}\n\nexport type UseNoticeReturn = ReturnType<typeof useNotice>\n"
    }
  ]
}
