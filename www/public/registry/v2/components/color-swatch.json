{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["grid"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": ["alpha-slider"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "color-swatch-group.tsx",
      "content": "import type { Component, CSSProps } from \"@yamada-ui/react\"\nimport type { ColorSwatchProps } from \"./color-swatch\"\nimport { Grid } from \"../grid\"\nimport { ColorSwatch } from \"./color-swatch\"\n\nexport interface ColorSwatchGroupProps extends Omit<ColorSwatchProps, \"color\"> {\n  /**\n   * The color used for the swatch element.\n   *\n   * @default \"#ffffff00\"\n   */\n  items?: CSSProps[\"color\"][]\n  /**\n   * The props for the `ColorSwatch` component.\n   */\n  itemProps?: ColorSwatchProps\n}\n\n/**\n * `ColorSwatchGroup` is a component that displays color samples.\n *\n * @see https://yamada-ui.com/components/color-swatch\n */\nexport const ColorSwatchGroup = (({\n  items = [],\n  layers,\n  withShadow = true,\n  itemProps,\n  ...rest\n}: ColorSwatchGroupProps) => {\n  if (items.length > 4)\n    console.warn(\"ColorSwatchMix: doesn't support more than 4 items\")\n\n  const empty = items.length === 0\n  const threeColors = items.length === 3\n\n  if (empty) {\n    return (\n      <ColorSwatch\n        aria-label=\"color swatch group\"\n        layers={layers}\n        overflow=\"hidden\"\n        withShadow={withShadow}\n        {...rest}\n      />\n    )\n  } else {\n    return (\n      <ColorSwatch\n        aria-label=\"color swatch group\"\n        layers={withShadow ? [{ boxShadow: \"inner\" }] : []}\n        {...rest}\n      >\n        <Grid templateColumns=\"repeat(2, 1fr)\">\n          {items.map((color, index) => (\n            <ColorSwatch\n              key={index}\n              boxSize=\"inherit\"\n              color={color}\n              gridColumn={threeColors && !index ? \"1 / 3\" : undefined}\n              rounded=\"0\"\n              w={threeColors && !index ? \"unset\" : undefined}\n              withShadow={false}\n              {...itemProps}\n            />\n          ))}\n        </Grid>\n      </ColorSwatch>\n    )\n  }\n}) as Component<\"div\", ColorSwatchGroupProps>\n"
    },
    {
      "name": "color-swatch.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const colorSwatchStyle = defineComponentSlotStyle({\n  base: {\n    overlay: {\n      boxSize: \"full\",\n      inset: 0,\n      position: \"absolute\",\n    },\n    root: {\n      \"& > *\": {\n        alignItems: \"center\",\n        boxSize: \"full\",\n        display: \"flex\",\n        inset: 0,\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        position: \"absolute\",\n      },\n      \"--checkers-bg\": [\"colors.whiteAlpha.500\", \"colors.blackAlpha.500\"],\n      \"--checkers-fg\": [\"colors.blackAlpha.300\", \"colors.whiteAlpha.300\"],\n      overflow: \"hidden\",\n      position: \"relative\",\n    },\n  },\n\n  sizes: {\n    \"2xs\": {\n      root: { boxSize: \"6\" },\n    },\n    xs: {\n      root: { boxSize: \"8\" },\n    },\n    sm: {\n      root: { boxSize: \"9\" },\n    },\n    md: {\n      root: { boxSize: \"10\" },\n    },\n    lg: {\n      root: { boxSize: \"11\" },\n    },\n    xl: {\n      root: { boxSize: \"12\" },\n    },\n    \"2xl\": {\n      root: { boxSize: \"14\" },\n    },\n  },\n\n  variants: {\n    circle: {\n      root: { rounded: \"full\" },\n    },\n    plain: {\n      root: { rounded: \"l2\" },\n    },\n    square: {\n      root: { rounded: \"0\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"xs\",\n    variant: \"plain\",\n  },\n})\n\nexport type ColorSwatchStyle = typeof colorSwatchStyle\n"
    },
    {
      "name": "color-swatch.tsx",
      "content": "\"use client\"\n\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { ColorSwatchStyle } from \"./color-swatch.style\"\nimport { createSlotComponent, styled, isString } from \"@yamada-ui/react\"\nimport { colorSwatchStyle } from \"./color-swatch.style\"\n\nexport const checkersProps: HTMLStyledProps = {\n  bgImage: [\n    \"linear-gradient(45deg, {checkers-fg} 25%, transparent 25%)\",\n    \"linear-gradient(-45deg, {checkers-fg} 25%, transparent 25%)\",\n    \"linear-gradient(45deg, transparent 75%, {checkers-fg} 75%)\",\n    \"linear-gradient(-45deg, {checkers-bg} 75%, {checkers-fg} 75%)\",\n  ].join(\", \"),\n  bgPosition: `0 0, 0 4px, 4px -4px, -4px 0`,\n  bgSize: `8px 8px`,\n}\n\nconst defaultLayers = (\n  background: CSSProps[\"color\"],\n  withShadow: boolean,\n): HTMLStyledProps[] => {\n  const layers: HTMLStyledProps[] = [checkersProps, { background }]\n\n  if (withShadow) layers.push({ boxShadow: \"inner\" })\n\n  return layers\n}\n\nexport interface ColorSwatchProps\n  extends Omit<HTMLStyledProps, \"color\">,\n    ThemeProps<ColorSwatchStyle> {\n  /**\n   * The color used for the swatch element.\n   *\n   * @default \"#ffffff00\"\n   */\n  color?: CSSProps[\"color\"]\n  /**\n   * The overlay used for the swatch element.\n   */\n  layers?: HTMLStyledProps[]\n  /**\n   * If `true`, the swatch element has an inner `box-shadow`.\n   *\n   * @default true\n   */\n  withShadow?: boolean\n}\n\nconst {\n  PropsContext: ColorSwatchPropsContext,\n  usePropsContext: useColorSwatchPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<ColorSwatchProps, ColorSwatchStyle>(\n  \"color-swatch\",\n  colorSwatchStyle,\n)\n\nexport { ColorSwatchPropsContext, useColorSwatchPropsContext }\n\n/**\n * `ColorSwatch` is a component that displays color samples.\n *\n * @see https://yamada-ui.com/components/color-swatch\n */\nexport const ColorSwatch = withProvider<\"div\", ColorSwatchProps>(\n  ({\n    children,\n    color = \"#ffffff00\",\n    withShadow = true,\n    layers = defaultLayers(color, withShadow),\n    ...rest\n  }) => {\n    return (\n      <styled.div\n        aria-label={isString(color) ? color : undefined}\n        aria-roledescription=\"color swatch\"\n        role=\"img\"\n        {...rest}\n      >\n        {children}\n        {layers.map((props, index) => (\n          <ColorSwatchOverlay key={index} {...props} />\n        ))}\n      </styled.div>\n    )\n  },\n  \"root\",\n)()\n\nexport interface ColorSwatchOverlayProps extends HTMLStyledProps {}\n\nexport const ColorSwatchOverlay = withContext<\"div\", ColorSwatchOverlayProps>(\n  \"div\",\n  \"overlay\",\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./color-swatch.style\"\nexport {\n  checkersProps,\n  ColorSwatch,\n  ColorSwatchPropsContext,\n  useColorSwatchPropsContext,\n} from \"./color-swatch\"\nexport type { ColorSwatchProps } from \"./color-swatch\"\nexport { ColorSwatchGroup } from \"./color-swatch-group\"\nexport type { ColorSwatchGroupProps } from \"./color-swatch-group\"\n"
    }
  ]
}
