{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["checkbox", "group", "input", "icon"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "card-namespace.ts",
      "content": "export {\n  CheckboxCardAddon as Addon,\n  CheckboxCardDescription as Description,\n  CheckboxCardLabel as Label,\n  CheckboxCardPropsContext as PropsContext,\n  CheckboxCardRoot as Root,\n  useCheckboxCardPropsContext as usePropsContext,\n} from \"./checkbox-card\"\nexport type {\n  CheckboxCardAddonProps as AddonProps,\n  CheckboxCardDescriptionProps as DescriptionProps,\n  CheckboxCardLabelProps as LabelProps,\n  CheckboxCardRootProps as RootProps,\n} from \"./checkbox-card\"\n"
    },
    {
      "name": "checkbox-card-group.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement } from \"react\"\nimport type {\n  GenericsComponent,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { UseCheckboxGroupProps } from \"../checkbox\"\nimport type { GroupProps } from \"../group\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { CheckboxCardRootProps } from \"./checkbox-card\"\nimport type { CheckboxCardStyle } from \"./checkbox-card.style\"\nimport { useMemo } from \"react\"\nimport { CheckboxGroupContext, useCheckboxGroup } from \"../checkbox\"\nimport { Group } from \"../group\"\nimport {\n  CheckboxCardPropsContext,\n  CheckboxCardRoot,\n  component,\n  useRootComponentProps,\n} from \"./checkbox-card\"\n\nexport interface CheckboxCardItem<Y extends string = string>\n  extends CheckboxCardRootProps<Y> {}\n\nexport interface CheckboxCardGroupRootProps<Y extends string = string>\n  extends Omit<\n      WithoutThemeProps<GroupProps, CheckboxCardStyle>,\n      \"defaultValue\" | \"onChange\" | \"value\"\n    >,\n    ThemeProps<CheckboxCardStyle>,\n    UseCheckboxGroupProps<Y>,\n    UseInputBorderProps,\n    Pick<CheckboxCardRootProps, \"checkedIcon\" | \"withIndicator\"> {\n  /**\n   * If provided, generate options based on items.\n   *\n   * @default '[]'\n   */\n  items?: CheckboxCardItem<Y>[]\n}\n\n/**\n * `CheckboxCardGroup` is a component that groups `CheckboxCard` components.\n *\n * @see https://yamada-ui.com/components/checkbox-card\n */\nexport const CheckboxCardGroupRoot = component<\n  \"div\",\n  CheckboxCardGroupRootProps\n>((props) => {\n  const [\n    ,\n    {\n      colorScheme,\n      size,\n      variant,\n      checkedIcon,\n      children,\n      disabled,\n      errorBorderColor,\n      focusBorderColor,\n      invalid,\n      items = [],\n      justify,\n      readOnly,\n      shape,\n      withIndicator,\n      ...rest\n    },\n  ] = useRootComponentProps(props, \"group\", {\n    transferProps: [\n      \"variant\",\n      \"colorScheme\",\n      \"size\",\n      \"shape\",\n      \"justify\",\n      \"withIndicator\",\n    ],\n  })\n  const { max, value, getInputProps, getLabelProps, getRootProps, onChange } =\n    useCheckboxGroup(rest)\n  const computedChildren = useMemo(() => {\n    if (children) return children\n\n    return items.map(({ value, ...rest }, index) => (\n      <CheckboxCardRoot key={value ?? index} value={value} {...rest} />\n    ))\n  }, [items, children])\n  const context = useMemo(\n    () => ({\n      colorScheme,\n      size,\n      variant,\n      checkedIcon,\n      disabled,\n      errorBorderColor,\n      focusBorderColor,\n      invalid,\n      justify,\n      readOnly,\n      shape,\n      withIndicator,\n    }),\n    [\n      colorScheme,\n      size,\n      checkedIcon,\n      variant,\n      disabled,\n      justify,\n      withIndicator,\n      errorBorderColor,\n      focusBorderColor,\n      invalid,\n      readOnly,\n      shape,\n    ],\n  )\n  const groupContext = useMemo(\n    () => ({ max, value, getInputProps, getLabelProps, onChange }),\n    [max, value, getInputProps, getLabelProps, onChange],\n  )\n\n  return (\n    <CheckboxCardPropsContext value={context}>\n      <CheckboxGroupContext value={groupContext}>\n        <Group {...getRootProps()}>{computedChildren}</Group>\n      </CheckboxGroupContext>\n    </CheckboxCardPropsContext>\n  )\n}, \"group\")() as GenericsComponent<{\n  <Y extends string = string>(\n    props: CheckboxCardGroupRootProps<Y>,\n  ): ReactElement\n}>\n"
    },
    {
      "name": "checkbox-card.style.ts",
      "content": "import { defineComponentSlotStyle, focusRingStyle } from \"@yamada-ui/react\"\nimport { checkboxStyle } from \"../checkbox\"\n\nexport const checkboxCardStyle = defineComponentSlotStyle({\n  base: {\n    addon: {\n      borderColor: \"{--addon-border-color}\",\n      borderTopWidth: \"1px\",\n      fontSize: \"{description-size}\",\n      mt: \"{space-y}\",\n      pt: \"{space-y}\",\n      px: \"{space-x}\",\n    },\n    description: { color: \"fg.muted\", fontSize: \"{description-size}\" },\n    group: { w: \"full\" },\n    indicator: {\n      ...checkboxStyle.base?.indicator,\n      \"input:focus-visible + &\": {\n        _checked: focusRingStyle.outline,\n        _notChecked: {\n          borderColor: \"{focus-ring-color}\",\n        },\n      },\n      position: \"absolute\",\n      top: \"calc({space-y} + ({label-size} * 1.5 - {label-size}) / 2)\",\n    },\n    root: {\n      ...checkboxStyle.base?.root,\n      \"&:has(input:focus-visible)\": focusRingStyle.outline,\n      \"--addon-border-color\": \"{root-border-color}\",\n      \"--root-border-color\": \"colors.border\",\n      alignItems: \"stretch\",\n      borderColor: \"{--root-border-color}\",\n      borderWidth: \"1px\",\n      flexDirection: \"column\",\n      focusRingColor: \"{focus-border-color}\",\n      gap: \"1\",\n      position: \"relative\",\n      px: \"{space-x}\",\n      py: \"{space-y}\",\n      rounded: \"l2\",\n      w: \"full\",\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        focusRingColor: \"{error-border-color}\",\n      },\n    },\n  },\n\n  props: {\n    /**\n     * The justify indicator of the component\n     *\n     * @default 'start'\n     */\n    justify: {\n      end: {\n        addon: {\n          me: \"calc({bleed-size} * -1)\",\n          ms: \"calc({space-x} * -1)\",\n        },\n        indicator: { right: \"{space-x}\" },\n        root: {\n          \"&:has([data-indicator])\": {\n            \"--bleed-size\": \"calc({indicator-size} + ({space-x} * 2))\",\n          },\n          \"--bleed-size\": \"{space-x}\",\n          pe: \"{bleed-size}\",\n        },\n      },\n      start: {\n        addon: {\n          me: \"calc({space-x} * -1)\",\n          ms: \"calc({bleed-size} * -1)\",\n        },\n        indicator: { left: \"{space-x}\" },\n        root: {\n          \"&:has([data-indicator])\": {\n            \"--bleed-size\": \"calc({indicator-size} + ({space-x} * 2))\",\n          },\n          \"--bleed-size\": \"{space-x}\",\n          ps: \"{bleed-size}\",\n        },\n      },\n    },\n    /**\n     * The shape of the component\n     *\n     * @default 'circle'\n     */\n    shape: { ...checkboxStyle.props?.shape },\n  },\n\n  variants: {\n    base: {\n      indicator: {\n        color: \"colorScheme.contrast\",\n        _checked: { bg: \"colorScheme.solid\" },\n        _indeterminate: { bg: \"colorScheme.solid\" },\n      },\n      root: {\n        _checked: { \"--indicator-border-color\": \"colorScheme.solid\" },\n        _indeterminate: { \"--indicator-border-color\": \"colorScheme.solid\" },\n      },\n    },\n    outline: {\n      root: {\n        _checked: {\n          \"--root-border-color\": \"colorScheme.outline\",\n        },\n      },\n    },\n    subtle: {\n      root: {\n        _checked: {\n          \"--addon-border-color\": \"colorScheme.muted\",\n          \"--root-border-color\": \"transparent\",\n          bg: \"colorScheme.subtle\",\n        },\n      },\n    },\n    surface: {\n      root: {\n        _checked: {\n          \"--root-border-color\": \"colorScheme.muted\",\n          bg: \"colorScheme.subtle\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      indicator: checkboxStyle.sizes?.sm.indicator,\n      root: {\n        ...checkboxStyle.sizes?.sm.root,\n        \"--description-size\": \"fontSizes.xs\",\n        \"--space-x\": \"spaces.3\",\n        \"--space-y\": \"spaces.2\",\n      },\n    },\n    md: {\n      indicator: checkboxStyle.sizes?.md.indicator,\n      root: {\n        ...checkboxStyle.sizes?.md.root,\n        \"--description-size\": \"fontSizes.sm\",\n        \"--space-x\": \"spaces.4\",\n        \"--space-y\": \"spaces.3\",\n      },\n    },\n    lg: {\n      indicator: checkboxStyle.sizes?.lg.indicator,\n      root: {\n        ...checkboxStyle.sizes?.lg.root,\n        \"--description-size\": \"fontSizes.md\",\n        \"--space-x\": \"spaces.5\",\n        \"--space-y\": \"spaces.4\",\n      },\n    },\n    xl: {\n      indicator: checkboxStyle.sizes?.lg.indicator,\n      root: {\n        ...checkboxStyle.sizes?.lg.root,\n        \"--description-size\": \"fontSizes.md\",\n        \"--space-x\": \"spaces.6\",\n        \"--space-y\": \"spaces.5\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"surface\",\n    justify: \"start\",\n    shape: \"rounded\",\n  },\n})\n\nexport type CheckboxCardStyle = typeof checkboxCardStyle\n"
    },
    {
      "name": "checkbox-card.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement, ReactNode } from \"react\"\nimport type {\n  GenericsComponent,\n  HTMLStyledProps,\n  ThemeProps,\n  Merge,\n} from \"@yamada-ui/react\"\nimport type { UseCheckboxProps } from \"../checkbox\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { CheckboxCardStyle } from \"./checkbox-card.style\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { useCheckbox } from \"../checkbox\"\nimport { CheckIcon, MinusIcon } from \"../icon\"\nimport { useInputBorder } from \"../input\"\nimport { checkboxCardStyle } from \"./checkbox-card.style\"\n\nexport interface CheckboxCardRootProps<Y extends string = string>\n  extends Merge<HTMLStyledProps<\"label\">, UseCheckboxProps<Y>>,\n    ThemeProps<CheckboxCardStyle>,\n    UseInputBorderProps {\n  /**\n   * The addon of the checkbox card.\n   */\n  addon?: ReactNode\n  /**\n   * The icon to display in the checkbox when it is checked.\n   */\n  checkedIcon?: ReactNode\n  /**\n   * The description of the checkbox card.\n   */\n  description?: ReactNode\n  /**\n   * The icon to display in the checkbox when it is indeterminate.\n   */\n  indeterminateIcon?: ReactNode\n  /**\n   * The label of the checkbox card.\n   */\n  label?: ReactNode\n  /**\n   * If `true`, the indicator will be displayed.\n   *\n   * @default true\n   */\n  withIndicator?: boolean\n  /**\n   * Props for the addon component.\n   */\n  addonProps?: CheckboxCardAddonProps\n  /**\n   * Props for the description component.\n   */\n  descriptionProps?: CheckboxCardDescriptionProps\n  /**\n   * Props for the indicator component.\n   */\n  indicatorProps?: CheckboxCardIndicatorProps\n  /**\n   * Props for the input element.\n   */\n  inputProps?: HTMLStyledProps<\"input\">\n  /**\n   * Props for the label component.\n   */\n  labelProps?: CheckboxCardLabelProps\n  /**\n   * Props for the label element.\n   */\n  rootProps?: HTMLStyledProps<\"label\">\n}\n\nconst {\n  component,\n  PropsContext: CheckboxCardPropsContext,\n  usePropsContext: useCheckboxCardPropsContext,\n  withContext,\n  withProvider,\n  useRootComponentProps,\n} = createSlotComponent<CheckboxCardRootProps, CheckboxCardStyle>(\n  \"checkbox-card\",\n  checkboxCardStyle,\n)\n\nexport {\n  CheckboxCardPropsContext,\n  component,\n  useCheckboxCardPropsContext,\n  useRootComponentProps,\n}\n\n/**\n * `CheckboxCard` is a component used for allowing users to select multiple values from multiple options.\n *\n * @see https://yamada-ui.com/components/checkbox-card\n */\nexport const CheckboxCardRoot = withProvider<\"label\", CheckboxCardRootProps>(\n  ({\n    addon,\n    checkedIcon,\n    children,\n    description,\n    errorBorderColor,\n    focusBorderColor,\n    indeterminateIcon,\n    label,\n    withIndicator = true,\n    addonProps,\n    descriptionProps,\n    indicatorProps,\n    inputProps,\n    labelProps,\n    rootProps,\n    ...rest\n  }) => {\n    const {\n      checked,\n      indeterminate,\n      getIndicatorProps,\n      getInputProps,\n      getRootProps,\n    } = useCheckbox(rest)\n    const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n    const icon = useMemo(() => {\n      if (indeterminate) {\n        return indeterminateIcon || <MinusIcon />\n      } else if (checked) {\n        return checkedIcon || <CheckIcon />\n      } else {\n        return null\n      }\n    }, [indeterminate, indeterminateIcon, checked, checkedIcon])\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return (\n        <>\n          {label ? (\n            <CheckboxCardLabel {...labelProps}>{label}</CheckboxCardLabel>\n          ) : null}\n          {description ? (\n            <CheckboxCardDescription {...descriptionProps}>\n              {description}\n            </CheckboxCardDescription>\n          ) : null}\n          {addon ? (\n            <CheckboxCardAddon {...addonProps}>{addon}</CheckboxCardAddon>\n          ) : null}\n        </>\n      )\n    }, [\n      addon,\n      addonProps,\n      children,\n      description,\n      descriptionProps,\n      label,\n      labelProps,\n    ])\n\n    return (\n      <styled.label {...getRootProps({ ...varProps, ...rootProps })}>\n        <styled.input {...getInputProps(inputProps)} />\n        {withIndicator ? (\n          <CheckboxCardIndicator {...getIndicatorProps(indicatorProps)}>\n            {icon}\n          </CheckboxCardIndicator>\n        ) : null}\n\n        {computedChildren}\n      </styled.label>\n    )\n  },\n  \"root\",\n)() as GenericsComponent<{\n  <Y extends string = string>(props: CheckboxCardRootProps<Y>): ReactElement\n}>\n\ninterface CheckboxCardIndicatorProps extends HTMLStyledProps {}\n\nconst CheckboxCardIndicator = withContext<\"div\", CheckboxCardIndicatorProps>(\n  \"div\",\n  \"indicator\",\n)({ \"data-indicator\": \"\" })\n\nexport interface CheckboxCardLabelProps extends HTMLStyledProps {}\n\nexport const CheckboxCardLabel = withContext<\"span\", CheckboxCardLabelProps>(\n  \"span\",\n  \"label\",\n)()\n\nexport interface CheckboxCardDescriptionProps extends HTMLStyledProps {}\n\nexport const CheckboxCardDescription = withContext<\n  \"span\",\n  CheckboxCardDescriptionProps\n>(\"span\", \"description\")()\n\nexport interface CheckboxCardAddonProps extends HTMLStyledProps {}\n\nexport const CheckboxCardAddon = withContext<\"span\", CheckboxCardAddonProps>(\n  \"span\",\n  \"addon\",\n)()\n"
    },
    {
      "name": "group-namespace.ts",
      "content": "export * as Item from \"./card-namespace\"\nexport { CheckboxCardGroupRoot as Root } from \"./checkbox-card-group\"\nexport type { CheckboxCardGroupRootProps as RootProps } from \"./checkbox-card-group\"\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./checkbox-card.style\"\nexport * as CheckboxCard from \"./card-namespace\"\nexport {\n  CheckboxCardAddon,\n  CheckboxCardDescription,\n  CheckboxCardLabel,\n  CheckboxCardPropsContext,\n  CheckboxCardRoot,\n  useCheckboxCardPropsContext,\n} from \"./checkbox-card\"\nexport type {\n  CheckboxCardAddonProps,\n  CheckboxCardDescriptionProps,\n  CheckboxCardLabelProps,\n  CheckboxCardRootProps,\n} from \"./checkbox-card\"\nexport { CheckboxCardGroupRoot } from \"./checkbox-card-group\"\nexport type { CheckboxCardGroupRootProps } from \"./checkbox-card-group\"\nexport * as CheckboxCardGroup from \"./group-namespace\"\n"
    }
  ]
}
