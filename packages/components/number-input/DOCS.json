{
  "NumberInput": {
    "addonProps": {
      "type": "HTMLUIProps",
      "description": "Props for addon component.",
      "required": false
    },
    "allowMouseWheel": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the input's value will change based on mouse wheel.",
      "required": false
    },
    "clampValueOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "This controls the value update when you blur out of the input.\n- If `true` and the value is greater than `max`, the value will be reset to `max`.\n- Else, the value remains the same.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "containerProps": {
      "type": "HTMLUIProps",
      "description": "Props for container element.",
      "required": false
    },
    "decrementProps": {
      "type": "NumberDecrementStepperProps",
      "description": "Props for decrement component.",
      "required": false
    },
    "defaultValue": {
      "type": "string | number",
      "description": "The initial value of the counter.\nShould be less than `max` and greater than `min`.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"border\" | \"link\" | BorderColor | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | ... 319 more ... | [...]",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "focusBorderColor": {
      "type": "\"border\" | \"link\" | BorderColor | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | ... 319 more ... | [...]",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "focusInputOnChange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the input will be focused as you increment or decrement the value with the stepper.",
      "required": false
    },
    "format": {
      "type": "(value: string | number) => string | number",
      "description": "If using a custom display format, this converts the default format to the custom format.",
      "required": false
    },
    "getAriaValueText": {
      "type": "(value: string | number) => string | undefined",
      "description": "This is used to format the value so that screen readers\ncan speak out a more human-friendly value.\n\nIt is used to set the `aria-valuetext` property of the input.",
      "required": false
    },
    "incrementProps": {
      "type": "NumberIncrementStepperProps",
      "description": "Props for increment component.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "isStepper": {
      "type": "boolean",
      "description": "If `true`, display the addon for the number input.",
      "required": false
    },
    "isValidCharacter": {
      "type": "(value: string) => boolean",
      "description": "Whether the pressed key should be allowed in the input.\nThe default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/.",
      "required": false
    },
    "keepWithinRange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "This controls the value update behavior in general.\n\n- If `true` and you use the stepper or up/down arrow keys,\nthe value will not exceed the `max` or go lower than `min`.\n\n- If `false`, the value will be allowed to go out of range.",
      "required": false
    },
    "max": {
      "type": "number",
      "defaultValue": "Number.MAX_SAFE_INTEGER",
      "description": "The maximum value of the counter",
      "required": false
    },
    "min": {
      "type": "number",
      "defaultValue": "Number.MIN_SAFE_INTEGER",
      "description": "The minimum value of the counter",
      "required": false
    },
    "onChange": {
      "type": "(valueAsString: string, valueAsNumber: number) => void",
      "description": "The callback fired when the value changes.",
      "required": false
    },
    "onInvalid": {
      "type": "(\n  message: ValidityState,\n  value: string,\n  valueAsNumber: number,\n) => void",
      "description": "The callback invoked when invalid number is entered.",
      "required": false
    },
    "parse": {
      "type": "(value: string) => string",
      "description": "If using a custom display format, this converts the custom format to a format `parseFloat` understands.",
      "required": false
    },
    "precision": {
      "type": "number",
      "description": "The number of decimal points used to round the value.",
      "required": false
    },
    "size": {
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the NumberInput.",
      "required": false
    },
    "step": {
      "type": "number",
      "defaultValue": "1",
      "description": "The step used to increment or decrement the value.",
      "required": false
    },
    "value": {
      "type": "string | number",
      "description": "The value of the counter.\nShould be less than `max` and greater than `min`.",
      "required": false
    },
    "variant": {
      "type": "\"filled\" | \"flushed\" | \"outline\" | \"unstyled\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the NumberInput.",
      "required": false
    }
  },
  "UseNumberInput": {
    "allowMouseWheel": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the input's value will change based on mouse wheel.",
      "required": false
    },
    "clampValueOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "This controls the value update when you blur out of the input.\n- If `true` and the value is greater than `max`, the value will be reset to `max`.\n- Else, the value remains the same.",
      "required": false
    },
    "defaultValue": {
      "type": "string | number",
      "description": "The initial value of the counter.\nShould be less than `max` and greater than `min`.",
      "required": false
    },
    "disabled": { "type": "boolean", "required": false },
    "focusInputOnChange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the input will be focused as you increment or decrement the value with the stepper.",
      "required": false
    },
    "format": {
      "type": "(value: string | number) => string | number",
      "description": "If using a custom display format, this converts the default format to the custom format.",
      "required": false
    },
    "getAriaValueText": {
      "type": "(value: string | number) => string | undefined",
      "description": "This is used to format the value so that screen readers\ncan speak out a more human-friendly value.\n\nIt is used to set the `aria-valuetext` property of the input.",
      "required": false
    },
    "id": { "type": "string", "required": false },
    "inputMode": {
      "type": "type ONLY_FOR_FORMAT =\n  | \"text\"\n  | \"search\"\n  | \"decimal\"\n  | \"none\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"",
      "defaultValue": "'decimal'",
      "description": "Hints at the type of data that might be entered by the user.\nIt also determines the type of keyboard shown to the user on mobile devices.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "isValidCharacter": {
      "type": "(value: string) => boolean",
      "description": "Whether the pressed key should be allowed in the input.\nThe default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/.",
      "required": false
    },
    "keepWithinRange": {
      "type": "boolean",
      "defaultValue": true,
      "description": "This controls the value update behavior in general.\n\n- If `true` and you use the stepper or up/down arrow keys,\nthe value will not exceed the `max` or go lower than `min`.\n\n- If `false`, the value will be allowed to go out of range.",
      "required": false
    },
    "max": {
      "type": "number",
      "defaultValue": "Number.MAX_SAFE_INTEGER",
      "description": "The maximum value of the counter",
      "required": false
    },
    "min": {
      "type": "number",
      "defaultValue": "Number.MIN_SAFE_INTEGER",
      "description": "The minimum value of the counter",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The HTML `name` attribute used for forms.",
      "required": false
    },
    "onBlur": {
      "type": "FocusEventHandler<HTMLInputElement>",
      "required": false
    },
    "onChange": {
      "type": "(valueAsString: string, valueAsNumber: number) => void",
      "description": "The callback fired when the value changes.",
      "required": false
    },
    "onFocus": {
      "type": "FocusEventHandler<HTMLInputElement>",
      "required": false
    },
    "onInvalid": {
      "type": "(\n  message: ValidityState,\n  value: string,\n  valueAsNumber: number,\n) => void",
      "description": "The callback invoked when invalid number is entered.",
      "required": false
    },
    "parse": {
      "type": "(value: string) => string",
      "description": "If using a custom display format, this converts the custom format to a format `parseFloat` understands.",
      "required": false
    },
    "pattern": {
      "type": "string",
      "defaultValue": "'[0-9]*(.[0-9]+)?'",
      "description": "The pattern used to check the <input> element's value against on form submission.",
      "required": false
    },
    "precision": {
      "type": "number",
      "description": "The number of decimal points used to round the value.",
      "required": false
    },
    "readOnly": { "type": "boolean", "required": false },
    "required": { "type": "boolean", "required": false },
    "step": {
      "type": "number",
      "defaultValue": "1",
      "description": "The step used to increment or decrement the value.",
      "required": false
    },
    "value": {
      "type": "string | number",
      "description": "The value of the counter.\nShould be less than `max` and greater than `min`.",
      "required": false
    }
  }
}
