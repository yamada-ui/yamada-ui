{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": { "components": ["picture"], "hooks": [], "providers": [] },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "import type { ColorMode, StyledTheme, ThemeTokens } from \"@yamada-ui/react\"\nimport { useMemo } from \"react\"\nimport {\n  useColorMode,\n  useTheme,\n  getMemoizedObject as get,\n  isArray,\n  isUndefined,\n} from \"@yamada-ui/react\"\n\ntype OmittedTheme = Omit<ThemeTokens, \"colorSchemes\" | \"themeSchemes\">\n\n/**\n * `useToken` is a custom hook for retrieving tokens from the theme.\n *\n * @see https://yamada-ui.com/hooks/use-token\n */\nexport const useToken = <\n  Y extends number | string = string,\n  M extends keyof OmittedTheme = keyof OmittedTheme,\n>(\n  name: M,\n  path: number | ThemeTokens[M] | undefined,\n) => {\n  const { theme } = useTheme()\n  const { colorMode } = useColorMode()\n\n  return useMemo(\n    () => getToken<Y, M>(name, path)(theme, colorMode),\n    [name, path, theme, colorMode],\n  )\n}\n\nexport const getToken =\n  <\n    Y extends number | string = string,\n    M extends keyof OmittedTheme = keyof OmittedTheme,\n  >(\n    name: M,\n    path: number | ThemeTokens[M] | undefined,\n  ) =>\n  (theme: StyledTheme, colorMode?: ColorMode) => {\n    if (name === \"layerStyles\") name = \"styles.layerStyles\" as M\n    if (name === \"textStyles\") name = \"styles.textStyles\" as M\n\n    let value = get<[Y, Y] | undefined | Y>(theme, `${name}.${path}`)\n\n    if (!isUndefined(value)) {\n      if (isArray(value)) {\n        const [lightValue, darkValue] = value\n\n        return colorMode !== \"dark\" ? lightValue : darkValue\n      } else {\n        return value\n      }\n    } else {\n      value = get<[Y, Y] | undefined | Y>(theme, `semantics.${name}.${path}`)\n\n      if (isArray(value)) {\n        value = [\n          get<Y>(theme, `${name}.${value[0]}`, value[0]),\n          get<Y>(theme, `${name}.${value[1]}`, value[1]),\n        ]\n      } else {\n        value = get<undefined | Y>(theme, `${name}.${value}`) ?? value\n      }\n\n      if (isArray(value)) {\n        const [lightValue, darkValue] = value\n\n        value = colorMode !== \"dark\" ? lightValue : darkValue\n\n        if (isArray(value)) {\n          const [lightValue, darkValue] = value as unknown as [Y, Y]\n\n          return colorMode !== \"dark\" ? lightValue : darkValue\n        } else {\n          return value\n        }\n      } else {\n        return value\n      }\n    }\n  }\n"
    }
  ]
}
