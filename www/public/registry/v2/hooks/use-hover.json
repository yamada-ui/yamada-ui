{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\n/**\n * `useHover` is a custom hook that detects whether the pointer has moved over or away from an element.\n *\n * @see https://yamada-ui.com/hooks/use-hover\n */\nexport const useHover = <Y extends HTMLElement = HTMLDivElement>() => {\n  const [hovered, setHovered] = useState(false)\n  const ref = useRef<Y>(null)\n\n  const onMouseEnter = useCallback(() => setHovered(true), [])\n  const onMouseLeave = useCallback(() => setHovered(false), [])\n\n  useEffect(() => {\n    const el = ref.current\n\n    if (el) {\n      el.addEventListener(\"mouseenter\", onMouseEnter)\n      el.addEventListener(\"mouseleave\", onMouseLeave)\n\n      return () => {\n        el.removeEventListener(\"mouseenter\", onMouseEnter)\n        el.removeEventListener(\"mouseleave\", onMouseLeave)\n      }\n    }\n  }, [onMouseEnter, onMouseLeave])\n\n  return { ref, hovered }\n}\n"
    }
  ]
}
