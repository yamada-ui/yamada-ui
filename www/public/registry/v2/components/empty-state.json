{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "empty-state.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const emptyState = defineComponentSlotStyle({\n  base: {\n    content: {\n      alignItems: \"center\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n    },\n    description: {\n      color: \"fg.muted\",\n      fontSize: \"sm\",\n    },\n    indicator: {\n      alignItems: \"center\",\n      color: \"fg.muted\",\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n    root: {\n      alignItems: \"center\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      w: \"full\",\n    },\n    title: {\n      fontWeight: \"semibold\",\n    },\n  },\n\n  sizes: {\n    sm: {\n      content: {\n        gap: \"xs\",\n      },\n      indicator: {\n        fontSize: \"4xl\",\n      },\n      root: {\n        gap: \"sm\",\n        py: \"sm\",\n      },\n      title: {\n        fontSize: \"md\",\n      },\n    },\n    md: {\n      content: {\n        gap: \"sm\",\n      },\n      indicator: {\n        fontSize: \"5xl\",\n      },\n      root: {\n        gap: \"md\",\n        py: \"md\",\n      },\n      title: {\n        fontSize: \"lg\",\n      },\n    },\n    lg: {\n      content: {\n        gap: \"md\",\n      },\n      indicator: {\n        fontSize: \"6xl\",\n      },\n      root: {\n        gap: \"lg\",\n        py: \"lg\",\n      },\n      title: {\n        fontSize: \"xl\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n  },\n})\n\nexport type EmptyState = typeof emptyState\n"
    },
    {
      "name": "empty-state.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { EmptyState } from \"./empty-state.style\"\nimport { createSlotComponent, styled, useSplitChildren } from \"@yamada-ui/react\"\nimport { emptyState } from \"./empty-state.style\"\n\nexport interface EmptyStateRootProps\n  extends Omit<HTMLStyledProps, \"title\">,\n    ThemeProps<EmptyState> {\n  /**\n   * The empty state description to use.\n   */\n  description?: ReactNode\n  /**\n   * The empty state indicator to use.\n   */\n  indicator?: ReactNode\n  /**\n   * The empty state title to use.\n   */\n  title?: ReactNode\n  /**\n   * The props for the empty state content component.\n   */\n  contentProps?: EmptyStateContentProps\n  /**\n   * The props for the empty state description component.\n   */\n  descriptionProps?: EmptyStateDescriptionProps\n  /**\n   * The props for the empty state indicator component.\n   */\n  indicatorProps?: EmptyStateIndicatorProps\n  /**\n   * The props for the empty state title component.\n   */\n  titleProps?: EmptyStateTitleProps\n}\n\nconst {\n  PropsContext: EmptyStatePropsContext,\n  usePropsContext: useEmptyStatePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<EmptyStateRootProps, EmptyState>(\n  \"empty-state\",\n  emptyState,\n)\n\nexport { EmptyStatePropsContext, useEmptyStatePropsContext }\n\n/**\n * `EmptyState` is used to display when a resource is empty or not available.\n *\n * @see https://yamada-ui.com/components/empty-state\n */\nexport const EmptyStateRoot = withProvider<\"div\", EmptyStateRootProps>(\n  ({\n    children,\n    description,\n    indicator,\n    title,\n    contentProps,\n    descriptionProps,\n    indicatorProps,\n    titleProps,\n    ...rest\n  }) => {\n    const [\n      omittedChildren,\n      customIndicator,\n      customContent,\n      customTitle,\n      customDescription,\n    ] = useSplitChildren(\n      children,\n      EmptyStateIndicator,\n      EmptyStateContent,\n      EmptyStateTitle,\n      EmptyStateDescription,\n    )\n\n    return (\n      <styled.div {...rest}>\n        {customIndicator ?? (\n          <EmptyStateIndicator {...indicatorProps}>\n            {indicator}\n          </EmptyStateIndicator>\n        )}\n\n        {customContent ?? (\n          <EmptyStateContent {...contentProps}>\n            {customTitle ?? (\n              <EmptyStateTitle {...titleProps}>{title}</EmptyStateTitle>\n            )}\n\n            {customDescription ?? (\n              <EmptyStateDescription {...descriptionProps}>\n                {description}\n              </EmptyStateDescription>\n            )}\n          </EmptyStateContent>\n        )}\n\n        {omittedChildren}\n      </styled.div>\n    )\n  },\n  \"root\",\n)()\n\nexport interface EmptyStateIndicatorProps extends HTMLStyledProps {}\n\nexport const EmptyStateIndicator = withContext<\"div\", EmptyStateIndicatorProps>(\n  \"div\",\n  \"indicator\",\n)()\n\nexport interface EmptyStateContentProps extends HTMLStyledProps {}\n\nexport const EmptyStateContent = withContext<\"div\", EmptyStateContentProps>(\n  \"div\",\n  \"content\",\n)()\n\nexport interface EmptyStateTitleProps extends HTMLStyledProps<\"h3\"> {}\n\nexport const EmptyStateTitle = withContext<\"h3\", EmptyStateTitleProps>(\n  \"h3\",\n  \"title\",\n)()\n\nexport interface EmptyStateDescriptionProps extends HTMLStyledProps<\"p\"> {}\n\nexport const EmptyStateDescription = withContext<\n  \"p\",\n  EmptyStateDescriptionProps\n>(\"p\", \"description\")()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./empty-state.style\"\nexport type {\n  EmptyStateContentProps,\n  EmptyStateDescriptionProps,\n  EmptyStateIndicatorProps,\n  EmptyStateRootProps,\n  EmptyStateTitleProps,\n} from \"./empty-state\"\nexport {\n  EmptyStateContent,\n  EmptyStateDescription,\n  EmptyStateIndicator,\n  EmptyStatePropsContext,\n  EmptyStateRoot,\n  EmptyStateTitle,\n  useEmptyStatePropsContext,\n} from \"./empty-state\"\nexport * as EmptyState from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  EmptyStateContent as Content,\n  EmptyStateDescription as Description,\n  EmptyStateIndicator as Indicator,\n  EmptyStatePropsContext as PropsContext,\n  EmptyStateRoot as Root,\n  EmptyStateTitle as Title,\n  useEmptyStatePropsContext as usePropsContext,\n} from \"./empty-state\"\nexport type {\n  EmptyStateContentProps as ContentProps,\n  EmptyStateDescriptionProps as DescriptionProps,\n  EmptyStateIndicatorProps as IndicatorProps,\n  EmptyStateRootProps as RootProps,\n  EmptyStateTitleProps as TitleProps,\n} from \"./empty-state\"\n"
    }
  ]
}
