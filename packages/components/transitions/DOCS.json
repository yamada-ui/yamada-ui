{
  "Collapse": {
    "animationOpacity": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the opacity of the content will be animated.",
      "required": false
    },
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"g\" | \"marker\" | \"mask\" | \"p\" | \"text\" | \"style\" | \"animate\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | ... 149 more ... | \"textPath\"",
      "description": "The HTML element to render.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "delay": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `delay` definition for `enter` and `exit`.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `duration` definition for `enter` and `exit`.",
      "required": false
    },
    "endingHeight": {
      "type": "string | number",
      "defaultValue": "auto",
      "description": "The height you want the content in its expanded state.",
      "required": false
    },
    "enter": {
      "type": "any",
      "description": "Custom `enter`.",
      "required": false
    },
    "exit": {
      "type": "any",
      "description": "Custom `exit`.\n\n\nA target to animate to when this component is removed from the tree.\n\nThis component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```",
      "required": false
    },
    "initial": {
      "type": "any",
      "description": "Custom `initial`.\n\n\nProperties, variant label or array of variant labels to start in.\n\nSet to `false` to initialise with the values in `animate` (disabling the mount animation)\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "Show the component. triggers when enter or exit states.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the Collapse.",
      "required": false
    },
    "startingHeight": {
      "type": "string | number",
      "defaultValue": "0",
      "description": "The height you want the content in its collapsed state.",
      "required": false
    },
    "transition": {
      "type": "MotionLifecycleProps<Transition$1>",
      "description": "Custom `transition` definition for `enter` and `exit`.",
      "required": false
    },
    "transitionEnd": {
      "type": "MotionLifecycleProps<\n  MakeCustomValueType<TargetProperties>\n>",
      "description": "Custom `transitionEnd` definition for `enter` and `exit`.",
      "required": false
    },
    "unmountOnExit": {
      "type": "boolean",
      "description": "If `true`, the element will unmount when `isOpen={false}` and animation is done.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the Collapse.",
      "required": false
    }
  },
  "Fade": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"g\" | \"marker\" | \"mask\" | \"p\" | \"text\" | \"style\" | \"animate\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | ... 149 more ... | \"textPath\"",
      "description": "The HTML element to render.",
      "required": false
    },
    "delay": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `delay` definition for `enter` and `exit`.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `duration` definition for `enter` and `exit`.",
      "required": false
    },
    "enter": {
      "type": "any",
      "description": "Custom `enter`.",
      "required": false
    },
    "exit": {
      "type": "any",
      "description": "Custom `exit`.\n\n\nA target to animate to when this component is removed from the tree.\n\nThis component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```",
      "required": false
    },
    "initial": {
      "type": "any",
      "description": "Custom `initial`.\n\n\nProperties, variant label or array of variant labels to start in.\n\nSet to `false` to initialise with the values in `animate` (disabling the mount animation)\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "Show the component. triggers when enter or exit states.",
      "required": false
    },
    "transition": {
      "type": "MotionLifecycleProps<Transition$1>",
      "description": "Custom `transition` definition for `enter` and `exit`.",
      "required": false
    },
    "transitionEnd": {
      "type": "MotionLifecycleProps<\n  MakeCustomValueType<TargetProperties>\n>",
      "description": "Custom `transitionEnd` definition for `enter` and `exit`.",
      "required": false
    },
    "unmountOnExit": {
      "type": "boolean",
      "description": "If `true`, the element will unmount when `isOpen={false}` and animation is done.",
      "required": false
    }
  },
  "ScaleFade": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"g\" | \"marker\" | \"mask\" | \"p\" | \"text\" | \"style\" | \"animate\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | ... 149 more ... | \"textPath\"",
      "description": "The HTML element to render.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "delay": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `delay` definition for `enter` and `exit`.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `duration` definition for `enter` and `exit`.",
      "required": false
    },
    "enter": {
      "type": "any",
      "description": "Custom `enter`.",
      "required": false
    },
    "exit": {
      "type": "any",
      "description": "Custom `exit`.\n\n\nA target to animate to when this component is removed from the tree.\n\nThis component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```",
      "required": false
    },
    "initial": {
      "type": "any",
      "description": "Custom `initial`.\n\n\nProperties, variant label or array of variant labels to start in.\n\nSet to `false` to initialise with the values in `animate` (disabling the mount animation)\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "Show the component. triggers when enter or exit states.",
      "required": false
    },
    "reverse": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the element will transition back to exit state.",
      "required": false
    },
    "scale": {
      "type": "number",
      "defaultValue": "0.95",
      "description": "The initial scale of the element.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the ScaleFade.",
      "required": false
    },
    "transition": {
      "type": "MotionLifecycleProps<Transition$1>",
      "description": "Custom `transition` definition for `enter` and `exit`.",
      "required": false
    },
    "transitionEnd": {
      "type": "MotionLifecycleProps<\n  MakeCustomValueType<TargetProperties>\n>",
      "description": "Custom `transitionEnd` definition for `enter` and `exit`.",
      "required": false
    },
    "unmountOnExit": {
      "type": "boolean",
      "description": "If `true`, the element will unmount when `isOpen={false}` and animation is done.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the ScaleFade.",
      "required": false
    }
  },
  "Slide": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"g\" | \"marker\" | \"mask\" | \"p\" | \"text\" | \"style\" | \"animate\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | ... 149 more ... | \"textPath\"",
      "description": "The HTML element to render.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "delay": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `delay` definition for `enter` and `exit`.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `duration` definition for `enter` and `exit`.",
      "required": false
    },
    "enter": {
      "type": "any",
      "description": "Custom `enter`.",
      "required": false
    },
    "exit": {
      "type": "any",
      "description": "Custom `exit`.\n\n\nA target to animate to when this component is removed from the tree.\n\nThis component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```",
      "required": false
    },
    "initial": {
      "type": "any",
      "description": "Custom `initial`.\n\n\nProperties, variant label or array of variant labels to start in.\n\nSet to `false` to initialise with the values in `animate` (disabling the mount animation)\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "Show the component. triggers when enter or exit states.",
      "required": false
    },
    "placement": {
      "type": "UIValue<\"bottom\" | \"left\" | \"right\" | \"top\">",
      "defaultValue": "'right'",
      "description": "The placement of the slide.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the Slide.",
      "required": false
    },
    "transition": {
      "type": "MotionLifecycleProps<Transition$1>",
      "description": "Custom `transition` definition for `enter` and `exit`.",
      "required": false
    },
    "transitionEnd": {
      "type": "MotionLifecycleProps<\n  MakeCustomValueType<TargetProperties>\n>",
      "description": "Custom `transitionEnd` definition for `enter` and `exit`.",
      "required": false
    },
    "unmountOnExit": {
      "type": "boolean",
      "description": "If `true`, the element will unmount when `isOpen={false}` and animation is done.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the Slide.",
      "required": false
    }
  },
  "SlideFade": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"g\" | \"marker\" | \"mask\" | \"p\" | \"text\" | \"style\" | \"animate\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | ... 149 more ... | \"textPath\"",
      "description": "The HTML element to render.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "delay": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `delay` definition for `enter` and `exit`.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "Custom `duration` definition for `enter` and `exit`.",
      "required": false
    },
    "enter": {
      "type": "any",
      "description": "Custom `enter`.",
      "required": false
    },
    "exit": {
      "type": "any",
      "description": "Custom `exit`.\n\n\nA target to animate to when this component is removed from the tree.\n\nThis component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```",
      "required": false
    },
    "initial": {
      "type": "any",
      "description": "Custom `initial`.\n\n\nProperties, variant label or array of variant labels to start in.\n\nSet to `false` to initialise with the values in `animate` (disabling the mount animation)\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "Show the component. triggers when enter or exit states.",
      "required": false
    },
    "offsetX": {
      "type": "UIValue<string | number>",
      "defaultValue": "0",
      "description": "The offset on the horizontal or `x` axis.",
      "required": false
    },
    "offsetY": {
      "type": "UIValue<string | number>",
      "defaultValue": "8",
      "description": "The offset on the vertical or `y` axis.",
      "required": false
    },
    "reverse": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the element will be transitioned back to the offset when it leaves. Otherwise, it'll only fade out.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the SlideFade.",
      "required": false
    },
    "transition": {
      "type": "MotionLifecycleProps<Transition$1>",
      "description": "Custom `transition` definition for `enter` and `exit`.",
      "required": false
    },
    "transitionEnd": {
      "type": "MotionLifecycleProps<\n  MakeCustomValueType<TargetProperties>\n>",
      "description": "Custom `transitionEnd` definition for `enter` and `exit`.",
      "required": false
    },
    "unmountOnExit": {
      "type": "boolean",
      "description": "If `true`, the element will unmount when `isOpen={false}` and animation is done.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the SlideFade.",
      "required": false
    }
  }
}
