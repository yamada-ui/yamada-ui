{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon"],
    "externals": [],
    "hooks": ["use-value"],
    "providers": ["i18n-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "breadcrumb.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const breadcrumbStyle = defineComponentSlotStyle({\n  base: {\n    ellipsis: {\n      color: \"fg.muted\",\n    },\n    item: {\n      alignItems: \"center\",\n      display: \"inline-flex\",\n    },\n    link: {\n      rounded: \"l1\",\n      textDecoration: \"none\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n    },\n    list: {\n      alignItems: \"center\",\n      display: \"flex\",\n      wordBreak: \"break-word\",\n    },\n    root: {},\n    separator: {\n      color: \"fg.muted\",\n    },\n  },\n\n  variants: {\n    plain: {\n      link: {\n        _notCurrent: {\n          color: \"fg.muted\",\n          _hover: {\n            color: \"fg\",\n          },\n        },\n      },\n    },\n    underline: {\n      link: {\n        _notCurrent: {\n          _hover: {\n            textDecoration: \"underline\",\n          },\n        },\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      list: {\n        fontSize: \"sm\",\n        gap: \"1\",\n      },\n    },\n    md: {\n      list: {\n        fontSize: \"md\",\n        gap: \"1.5\",\n      },\n    },\n    lg: {\n      list: {\n        fontSize: \"lg\",\n        gap: \"2\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"plain\",\n  },\n})\n\nexport type BreadcrumbStyle = typeof breadcrumbStyle\n"
    },
    {
      "name": "breadcrumb.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement } from \"react\"\nimport type {\n  HTMLStyledProps,\n  PropGetter,\n  StyleValue,\n  ThemeProps,\n} from \"@yamada-ui/react\"\nimport type { BreadcrumbStyle } from \"./breadcrumb.style\"\nimport type { UseBreadcrumbProps } from \"./use-breadcrumb\"\nimport { Fragment, useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { ChevronRightIcon, EllipsisIcon } from \"../icon\"\nimport { breadcrumbStyle } from \"./breadcrumb.style\"\nimport { useBreadcrumb } from \"./use-breadcrumb\"\n\ninterface ComponentContext {\n  getEllipsisProps: PropGetter<\"svg\">\n  getLinkProps: PropGetter<\"a\", { currentPage?: boolean }>\n}\n\nexport interface BreadcrumbRootProps\n  extends HTMLStyledProps<\"nav\">,\n    ThemeProps<BreadcrumbStyle>,\n    Omit<UseBreadcrumbProps, \"endBoundaries\" | \"startBoundaries\"> {\n  /**\n   * Number of elements visible on the end(right) edges.\n   *\n   * @default 0\n   */\n  endBoundaries?: StyleValue<number>\n  /**\n   * The visual separator between each breadcrumb item.\n   *\n   * @default '/'\n   */\n  separator?: ReactElement | string\n  /**\n   * Number of elements visible on the start(left) edges.\n   *\n   * @default 0\n   */\n  startBoundaries?: StyleValue<number>\n  /**\n   * Props for item element.\n   */\n  itemProps?: BreadcrumbItemProps\n  /**\n   * Props for ol element.\n   */\n  listProps?: HTMLStyledProps<\"ol\">\n  /**\n   * Props for separator element.\n   */\n  separatorProps?: BreadcrumbSeparatorProps\n}\n\nconst {\n  ComponentContext,\n  PropsContext: BreadcrumbPropsContext,\n  useComponentContext,\n  usePropsContext: useBreadcrumbPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<BreadcrumbRootProps, BreadcrumbStyle, ComponentContext>(\n  \"breadcrumb\",\n  breadcrumbStyle,\n)\n\nexport { BreadcrumbPropsContext, useBreadcrumbPropsContext }\n\n/**\n * `Breadcrumb` is a component that helps users understand the hierarchy of a website.\n *\n * @see https://yamada-ui.com/components/breadcrumb\n */\nexport const BreadcrumbRoot = withProvider<\"nav\", BreadcrumbRootProps>(\n  ({\n    endBoundaries: endBoundariesProp,\n    gap,\n    separator,\n    startBoundaries: startBoundariesProp,\n    itemProps,\n    listProps,\n    separatorProps,\n    ...rest\n  }) => {\n    const endBoundaries = useValue(endBoundariesProp)\n    const startBoundaries = useValue(startBoundariesProp)\n    const {\n      children,\n      getEllipsisProps,\n      getLinkProps,\n      getListProps,\n      getRootProps,\n    } = useBreadcrumb({\n      ellipsis: <BreadcrumbEllipsis />,\n      endBoundaries,\n      link: <BreadcrumbLink />,\n      startBoundaries,\n      ...rest,\n    })\n\n    const context = useMemo(\n      () => ({ getEllipsisProps, getLinkProps }),\n      [getEllipsisProps, getLinkProps],\n    )\n\n    return (\n      <ComponentContext value={context}>\n        <styled.nav {...getRootProps()}>\n          <BreadcrumbList {...getListProps({ gap, ...listProps })}>\n            {children.map((child, index) => {\n              const last = index === children.length - 1\n\n              return (\n                <Fragment key={index}>\n                  <BreadcrumbItem {...itemProps}>{child}</BreadcrumbItem>\n\n                  {!last ? (\n                    <BreadcrumbSeparator {...separatorProps}>\n                      {separator}\n                    </BreadcrumbSeparator>\n                  ) : null}\n                </Fragment>\n              )\n            })}\n          </BreadcrumbList>\n        </styled.nav>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)()\n\ninterface BreadcrumbListProps extends HTMLStyledProps<\"ol\"> {}\n\nconst BreadcrumbList = withContext<\"ol\", BreadcrumbListProps>(\"ol\", \"list\")()\n\ninterface BreadcrumbItemProps extends HTMLStyledProps<\"li\"> {}\n\nconst BreadcrumbItem = withContext<\"li\", BreadcrumbItemProps>(\"li\", \"item\")()\n\ninterface BreadcrumbSeparatorProps extends HTMLStyledProps<\"li\"> {}\n\nconst BreadcrumbSeparator = withContext<\"li\", BreadcrumbSeparatorProps>(\n  BreadcrumbItem,\n  \"separator\",\n)({ children: <ChevronRightIcon /> })\n\nexport interface BreadcrumbLinkProps extends HTMLStyledProps<\"a\"> {\n  /**\n   * If `true`, change to span element.\n   *\n   * @default false\n   */\n  currentPage?: boolean\n}\n\nexport const BreadcrumbLink = withContext<\"a\", BreadcrumbLinkProps>(\n  \"a\",\n  \"link\",\n)(undefined, ({ currentPage, ...rest }) => {\n  const { getLinkProps } = useComponentContext()\n\n  return {\n    as: !currentPage ? \"a\" : \"span\",\n    ...getLinkProps({ currentPage, ...rest }),\n  }\n})\n\nexport interface BreadcrumbEllipsisProps extends HTMLStyledProps<\"svg\"> {}\n\nexport const BreadcrumbEllipsis = withContext<\"svg\", BreadcrumbEllipsisProps>(\n  EllipsisIcon,\n  \"ellipsis\",\n)(undefined, (props) => {\n  const { getEllipsisProps } = useComponentContext()\n\n  return { ...getEllipsisProps(props) }\n})\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./breadcrumb.style\"\nexport {\n  BreadcrumbEllipsis,\n  BreadcrumbLink,\n  BreadcrumbPropsContext,\n  BreadcrumbRoot,\n  useBreadcrumbPropsContext,\n} from \"./breadcrumb\"\nexport type {\n  BreadcrumbEllipsisProps,\n  BreadcrumbLinkProps,\n  BreadcrumbRootProps,\n} from \"./breadcrumb\"\nexport * as Breadcrumb from \"./namespace\"\nexport * from \"./use-breadcrumb\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  BreadcrumbEllipsis as Ellipsis,\n  BreadcrumbLink as Link,\n  BreadcrumbPropsContext as PropsContext,\n  BreadcrumbRoot as Root,\n  useBreadcrumbPropsContext as usePropsContext,\n} from \"./breadcrumb\"\n\nexport type {\n  BreadcrumbEllipsisProps as EllipsisProps,\n  BreadcrumbLinkProps as LinkProps,\n  BreadcrumbRootProps as RootProps,\n} from \"./breadcrumb\"\n"
    },
    {
      "name": "use-breadcrumb.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement, ReactNode } from \"react\"\nimport type {\n  HTMLProps,\n  PropGetter,\n  ReactNodeOrFunction,\n} from \"@yamada-ui/react\"\nimport { cloneElement, useCallback, useMemo } from \"react\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { runIfFn, useValidChildren } from \"@yamada-ui/react\"\n\ninterface BreadcrumbItem extends HTMLProps<\"a\"> {\n  currentPage?: boolean\n  label?: ReactNode\n}\n\nexport interface UseBreadcrumbProps extends HTMLProps<\"nav\"> {\n  /**\n   * The icon to be used in the ellipsis.\n   */\n  ellipsis?: ReactNodeOrFunction<{ items: BreadcrumbItem[] }>\n  /**\n   * Number of elements visible on the end(right) edges.\n   *\n   * @default 0\n   */\n  endBoundaries?: number\n  /**\n   * If provided, generate breadcrumb items based on items.\n   */\n  items?: BreadcrumbItem[]\n  /**\n   * The component to be used for the link.\n   */\n  link?: ReactElement<any>\n  /**\n   * Number of elements visible on the start(left) edges.\n   *\n   * @default 0\n   */\n  startBoundaries?: number\n}\n\nexport const useBreadcrumb = ({\n  children,\n  ellipsis,\n  endBoundaries = 0,\n  items = [],\n  link,\n  startBoundaries = 0,\n  ...rest\n}: UseBreadcrumbProps = {}) => {\n  const validChildren = useValidChildren(children)\n  const length = validChildren.length || items.length\n  const { t } = useI18n(\"breadcrumb\")\n\n  const hasBoundaries =\n    startBoundaries + endBoundaries > 0 &&\n    length > startBoundaries + endBoundaries\n\n  const renderLink = useCallback(\n    (items: BreadcrumbItem[]) => {\n      if (!link) return []\n\n      return items.map(({ label, ...rest }) =>\n        cloneElement<any>(link, { ...link.props, children: label, ...rest }),\n      )\n    },\n    [link],\n  )\n\n  const renderEllipsis = useCallback(\n    (items: BreadcrumbItem[]) => {\n      if (!ellipsis) return null\n\n      return runIfFn(ellipsis, { items })\n    },\n    [ellipsis],\n  )\n\n  const splitItems = useCallback(\n    (items: BreadcrumbItem[]) => {\n      const length = items.length\n      const firstItems = items.slice(0, startBoundaries)\n      const ellipsisItems = items.slice(startBoundaries, length - endBoundaries)\n      const lastItems = items.slice(length - endBoundaries)\n\n      return [firstItems, ellipsisItems, lastItems] as const\n    },\n    [startBoundaries, endBoundaries],\n  )\n\n  const cloneChildren = useMemo(() => {\n    const hasChildren = !!validChildren.length\n\n    if (hasChildren) {\n      return validChildren\n    } else if (hasBoundaries) {\n      const [firstItems, ellipsisItems, lastItems] = splitItems(items)\n\n      return [\n        ...renderLink(firstItems),\n        renderEllipsis(ellipsisItems),\n        ...renderLink(lastItems),\n      ]\n    } else {\n      return renderLink(items)\n    }\n  }, [\n    validChildren,\n    items,\n    hasBoundaries,\n    renderEllipsis,\n    renderLink,\n    splitItems,\n  ])\n\n  const getRootProps: PropGetter<\"nav\"> = useCallback(\n    (props) => ({\n      \"aria-label\": t(\"Breadcrumb\"),\n      ...rest,\n      ...props,\n    }),\n    [rest, t],\n  )\n\n  const getListProps: PropGetter<\"ol\"> = useCallback(\n    (props) => ({ ...props }),\n    [],\n  )\n\n  const getLinkProps: PropGetter<\"a\", { currentPage?: boolean }> = useCallback(\n    ({ href, currentPage, ...props } = {}) => ({\n      href: !currentPage ? href : undefined,\n      \"aria-current\": currentPage ? \"page\" : undefined,\n      ...props,\n    }),\n    [],\n  )\n\n  const getEllipsisProps: PropGetter<\"svg\"> = useCallback(\n    (props) => ({\n      \"aria-label\": t(\"Ellipsis\"),\n      role: \"presentation\",\n      ...props,\n    }),\n    [t],\n  )\n\n  return {\n    children: cloneChildren,\n    getEllipsisProps,\n    getLinkProps,\n    getListProps,\n    getRootProps,\n  }\n}\n\nexport type UseBreadcrumbReturn = ReturnType<typeof useBreadcrumb>\n"
    }
  ]
}
