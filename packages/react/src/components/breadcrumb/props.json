{
  "Breadcrumb": {
    "Ellipsis": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      }
    },
    "Link": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "currentPage": {
        "type": "boolean",
        "defaultValue": "false",
        "description": "If `true`, change to span element.",
        "required": false
      }
    },
    "Root": {
      "as": {
        "type": "As",
        "description": "The HTML element to render.",
        "required": false
      },
      "asChild": {
        "type": "boolean",
        "description": "Merges its props onto its immediate child.",
        "required": false
      },
      "css": {
        "type": "CSSObject | CSSObject[]",
        "description": "The CSS object.",
        "required": false
      },
      "colorScheme": {
        "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
        "description": "Set color scheme variables.",
        "required": false
      },
      "size": {
        "type": "\"lg\" | \"md\" | \"sm\" | [\"lg\" | \"md\" | \"sm\" | ({ _peerAccept?: \"lg\" | \"md\" | \"sm\" | [\"lg\" | \"md\" | \"sm\" | (... & { base?: \"lg\" | \"md\" | \"sm\" | [\"lg\" | \"md\" | \"sm\" | (... & ...), \"lg\" | ... 2 more ... | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: \"lg\" | ... 4 more ... | undefined; }), \"lg\" | ... 2 more ...",
        "description": "The size of the component.",
        "required": false
      },
      "variant": {
        "type": "\"plain\" | \"underline\" | [\"plain\" | \"underline\" | ({ _peerAccept?: \"plain\" | \"underline\" | [\"plain\" | \"underline\" | (... & { base?: \"plain\" | \"underline\" | [\"plain\" | \"underline\" | (... & ...), \"plain\" | ... 1 more ... | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: \"plain\" | ... 3 more ... | undefined...",
        "description": "The variant of the component.",
        "required": false
      },
      "ellipsis": {
        "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...> | ((props: { ...; }) => ReactNode)",
        "description": "The icon to be used in the ellipsis.",
        "required": false
      },
      "endBoundaries": {
        "type": "StyleValue<number>",
        "defaultValue": "0",
        "description": "Number of elements visible on the end(right) edges.",
        "required": false
      },
      "itemProps": {
        "type": "BreadcrumbItemProps",
        "description": "Props for item element.",
        "required": false
      },
      "items": {
        "type": "BreadcrumbItem[]",
        "description": "If provided, generate breadcrumb items based on items.",
        "required": false
      },
      "link": {
        "type": "ReactElement<any, string | JSXElementConstructor<any>>",
        "description": "The component to be used for the link.",
        "required": false
      },
      "listProps": {
        "type": "HTMLStyledProps<\"ol\">",
        "description": "Props for ol element.",
        "required": false
      },
      "separator": {
        "type": "type ONLY_FOR_FORMAT =\n  | string\n  | ReactElement<unknown, string | JSXElementConstructor<any>>",
        "defaultValue": "\"/\"",
        "description": "The visual separator between each breadcrumb item.",
        "required": false
      },
      "separatorProps": {
        "type": "BreadcrumbSeparatorProps",
        "description": "Props for separator element.",
        "required": false
      },
      "startBoundaries": {
        "type": "StyleValue<number>",
        "defaultValue": "0",
        "description": "Number of elements visible on the start(left) edges.",
        "required": false
      }
    }
  },
  "BreadcrumbEllipsis": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    }
  },
  "BreadcrumbLink": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "currentPage": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, change to span element.",
      "required": false
    }
  },
  "BreadcrumbRoot": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | ({ _peerAccept?: ColorScheme | [ColorScheme | (... & { base?: ColorScheme | [...] | (... & ...) | undefined; ... 4 more ...; xl?: ColorScheme | ... 2 more ... | undefined; }), ColorScheme | (... & { ...; })] | { ...; } | undefined; ... 178 more ...; _selection?: ColorScheme | ... 2 more ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"lg\" | \"md\" | \"sm\" | [\"lg\" | \"md\" | \"sm\" | ({ _peerAccept?: \"lg\" | \"md\" | \"sm\" | [\"lg\" | \"md\" | \"sm\" | (... & { base?: \"lg\" | \"md\" | \"sm\" | [\"lg\" | \"md\" | \"sm\" | (... & ...), \"lg\" | ... 2 more ... | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: \"lg\" | ... 4 more ... | undefined; }), \"lg\" | ... 2 more ...",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"plain\" | \"underline\" | [\"plain\" | \"underline\" | ({ _peerAccept?: \"plain\" | \"underline\" | [\"plain\" | \"underline\" | (... & { base?: \"plain\" | \"underline\" | [\"plain\" | \"underline\" | (... & ...), \"plain\" | ... 1 more ... | (... & ...)] | (... & ...) | undefined; ... 4 more ...; xl?: \"plain\" | ... 3 more ... | undefined...",
      "description": "The variant of the component.",
      "required": false
    },
    "ellipsis": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...> | ((props: { ...; }) => ReactNode)",
      "description": "The icon to be used in the ellipsis.",
      "required": false
    },
    "endBoundaries": {
      "type": "StyleValue<number>",
      "defaultValue": "0",
      "description": "Number of elements visible on the end(right) edges.",
      "required": false
    },
    "itemProps": {
      "type": "BreadcrumbItemProps",
      "description": "Props for item element.",
      "required": false
    },
    "items": {
      "type": "BreadcrumbItem[]",
      "description": "If provided, generate breadcrumb items based on items.",
      "required": false
    },
    "link": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "description": "The component to be used for the link.",
      "required": false
    },
    "listProps": {
      "type": "HTMLStyledProps<\"ol\">",
      "description": "Props for ol element.",
      "required": false
    },
    "separator": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | ReactElement<unknown, string | JSXElementConstructor<any>>",
      "defaultValue": "\"/\"",
      "description": "The visual separator between each breadcrumb item.",
      "required": false
    },
    "separatorProps": {
      "type": "BreadcrumbSeparatorProps",
      "description": "Props for separator element.",
      "required": false
    },
    "startBoundaries": {
      "type": "StyleValue<number>",
      "defaultValue": "0",
      "description": "Number of elements visible on the start(left) edges.",
      "required": false
    }
  }
}
