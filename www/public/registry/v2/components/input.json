{
  "$schema": "https://yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["field", "group"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": [
      "autocomplete",
      "checkbox",
      "checkbox-card",
      "date-picker",
      "dropzone",
      "editable",
      "file-button",
      "file-input",
      "native-select",
      "number-input",
      "password-input",
      "pin-input",
      "radio",
      "radio-card",
      "select",
      "textarea",
      "toggle"
    ],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./input-addon.style\"\nexport * from \"./input-element.style\"\nexport * from \"./input.style\"\nexport { Input, InputPropsContext, useInputPropsContext } from \"./input\"\nexport type { InputProps } from \"./input\"\nexport {\n  InputAddon,\n  InputAddonPropsContext,\n  useInputAddonPropsContext,\n} from \"./input-addon\"\nexport type { InputAddonProps } from \"./input-addon\"\nexport {\n  InputElement,\n  InputElementPropsContext,\n  useInputElementPropsContext,\n} from \"./input-element\"\nexport type { InputElementProps } from \"./input-element\"\nexport { InputGroupRoot } from \"./input-group\"\nexport type { InputGroupRootProps } from \"./input-group\"\nexport * as InputGroup from \"./namespace\"\nexport * from \"./use-input-border\"\n"
    },
    {
      "name": "input-addon.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\nimport { inputStyle } from \"./input.style\"\n\nexport const inputAddonStyle = defineComponentStyle({\n  base: {\n    \"--error-border-color\": \"colors.border.error\",\n    \"--focus-border-color\": \"colorScheme.outline\",\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    display: \"flex\",\n    flex: \"0 0 auto\",\n    rounded: \"l2\",\n    transitionDuration: \"moderate\",\n    transitionProperty: \"common\",\n    w: \"auto\",\n    whiteSpace: \"nowrap\",\n    _disabled: {\n      layerStyle: \"disabled\",\n    },\n  },\n\n  variants: {\n    filled: {\n      layerStyle: \"surface\",\n      border: \"1px solid transparent\",\n    },\n    flushed: {\n      bg: \"transparent\",\n      borderBottomColor: \"colorScheme.muted\",\n      borderBottomWidth: \"1px\",\n      color: \"colorScheme.fg\",\n      rounded: \"0px\",\n      _peerFocusVisible: {\n        borderColor: \"{focus-border-color}\",\n        boxShadow: \"0px 1px 0px 0px {focus-border-color}\",\n      },\n      _peerInvalid: {\n        borderColor: \"{error-border-color}\",\n        _peerFocusVisible: {\n          boxShadow: \"0px 1px 0px 0px {error-border-color}\",\n        },\n      },\n    },\n    outline: {\n      layerStyle: \"surface\",\n    },\n    plain: {},\n  },\n\n  sizes: inputStyle.sizes,\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n  },\n})\n\nexport type InputAddonStyle = typeof inputAddonStyle\n"
    },
    {
      "name": "input-addon.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { InputProps } from \"./input\"\nimport type { InputAddonStyle } from \"./input-addon.style\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { inputAddonStyle } from \"./input-addon.style\"\nimport { useInputBorder } from \"./use-input-border\"\n\nexport interface InputAddonProps\n  extends HTMLStyledProps,\n    ThemeProps<InputAddonStyle>,\n    Pick<InputProps, \"errorBorderColor\" | \"focusBorderColor\"> {}\n\nconst {\n  PropsContext: InputAddonPropsContext,\n  usePropsContext: useInputAddonPropsContext,\n  withContext,\n} = createComponent<InputAddonProps, InputAddonStyle>(\n  \"input-addon\",\n  inputAddonStyle,\n)\n\nexport { InputAddonPropsContext, useInputAddonPropsContext }\n\nexport const InputAddon = withContext(\"div\")(\n  undefined,\n  ({ errorBorderColor, focusBorderColor, ...rest }) => {\n    const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n\n    return { ...varProps, ...rest }\n  },\n)\n"
    },
    {
      "name": "input-element.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const inputElementStyle = defineComponentStyle({\n  base: {\n    alignItems: \"center\",\n    color: \"fg.subtle\",\n    display: \"flex\",\n    fontSize: \"1em\",\n    height: \"full\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    zIndex: \"kurillin\",\n  },\n\n  props: {\n    /**\n     * If `true`, the element clickable.\n     *\n     * @default false\n     */\n    clickable: {\n      false: {\n        pointerEvents: \"none\",\n      },\n      true: {\n        pointerEvents: \"auto\",\n      },\n    },\n    /**\n     * The placement of the element.\n     *\n     * @default 'start'\n     */\n    placement: {\n      end: {\n        insetInlineEnd: \"0\",\n      },\n      start: {\n        insetInlineStart: \"0\",\n      },\n    },\n  },\n})\n\nexport type InputElementStyle = typeof inputElementStyle\n"
    },
    {
      "name": "input-element.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { InputProps } from \"./input\"\nimport type { InputElementStyle } from \"./input-element.style\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { inputElementStyle } from \"./input-element.style\"\nimport { useInputBorder } from \"./use-input-border\"\n\nexport interface InputElementProps\n  extends HTMLStyledProps,\n    ThemeProps<InputElementStyle>,\n    Pick<InputProps, \"errorBorderColor\" | \"focusBorderColor\"> {}\n\nconst {\n  PropsContext: InputElementPropsContext,\n  usePropsContext: useInputElementPropsContext,\n  withContext,\n} = createComponent<InputElementProps, InputElementStyle>(\n  \"input-element\",\n  inputElementStyle,\n)\n\nexport { InputElementPropsContext, useInputElementPropsContext }\n\nexport const InputElement = withContext(\"div\")(\n  { \"data-input-element\": \"\" },\n  ({ errorBorderColor, focusBorderColor, ...rest }) => {\n    const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n\n    return { ...varProps, ...rest }\n  },\n)\n"
    },
    {
      "name": "input-group.tsx",
      "content": "\"use client\"\n\nimport type { Component, ThemeProps, WithoutThemeProps } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport type { GroupProps } from \"../group\"\nimport type { InputProps } from \"./input\"\nimport type { InputStyle } from \"./input.style\"\nimport { cloneElement, useMemo } from \"react\"\nimport {\n  isSomeElement,\n  isTruthyDataAttr,\n  useValidChildren,\n} from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\nimport { Group } from \"../group\"\nimport { InputPropsContext } from \"./input\"\nimport { InputAddonPropsContext } from \"./input-addon\"\nimport { InputElement, InputElementPropsContext } from \"./input-element\"\n\nexport interface InputGroupRootProps\n  extends WithoutThemeProps<GroupProps, InputStyle>,\n    ThemeProps<InputStyle>,\n    Pick<InputProps, \"errorBorderColor\" | \"focusBorderColor\">,\n    FieldProps {}\n\nexport const InputGroupRoot = ((props: InputGroupRootProps) => {\n  const {\n    props: {\n      id: _id,\n      size,\n      variant,\n      children,\n      disabled,\n      errorBorderColor,\n      focusBorderColor,\n      readOnly,\n      required,\n      ...rest\n    },\n    dataProps,\n  } = useFieldProps(props)\n  const validChildren = useValidChildren(children)\n  const cloneChildren = useMemo(\n    () =>\n      validChildren.map((child, index) => {\n        const first = !index\n\n        if (isSomeElement(child.type, InputElement)) {\n          return cloneElement(child, {\n            \"data-ungrouped\": \"\",\n            placement: first ? \"start\" : \"end\",\n            ...child.props,\n          })\n        } else {\n          return child\n        }\n      }),\n    [validChildren],\n  )\n  const sharedContext = useMemo(\n    () => ({\n      size,\n      variant,\n      errorBorderColor,\n      focusBorderColor,\n      ...dataProps,\n    }),\n    [size, variant, errorBorderColor, focusBorderColor, dataProps],\n  )\n  const inputContext = useMemo(\n    () => ({\n      ...sharedContext,\n      disabled,\n      invalid: isTruthyDataAttr(sharedContext[\"data-invalid\"]),\n      readOnly,\n      required,\n    }),\n    [sharedContext, disabled, readOnly, required],\n  )\n\n  return (\n    <InputPropsContext value={inputContext}>\n      <InputAddonPropsContext value={sharedContext}>\n        <InputElementPropsContext value={sharedContext}>\n          <Group attached minW=\"0\" w=\"full\" {...rest}>\n            {cloneChildren}\n          </Group>\n        </InputElementPropsContext>\n      </InputAddonPropsContext>\n    </InputPropsContext>\n  )\n}) as Component<\"div\", InputGroupRootProps>\n"
    },
    {
      "name": "input.style.ts",
      "content": "import type { CSSObject } from \"@yamada-ui/react\"\nimport { defineComponentStyle, wrapWithKey } from \"@yamada-ui/react\"\n\nexport const getInputPaddingResetStyle = (key?: string) =>\n  ({\n    \"&:not(:has(+ [data-input-element]))\": wrapWithKey({ pe: \"0px\" }, key),\n    \"&:not([data-input-element] + &)\": wrapWithKey({ ps: \"0px\" }, key),\n  }) satisfies CSSObject\n\nexport const getInputHeightStyle = (height?: string, key?: string) =>\n  ({\n    \"&:has(+ [data-input-element])\": wrapWithKey({ pe: height }, key),\n    \"& ~ [data-input-element]\": { minW: height },\n    \"--height\": height,\n    \"[data-input-element] + &\": wrapWithKey({ ps: height }, key),\n    \"[data-input-element]:has(~ &)\": { minW: height },\n    minH: height,\n  }) satisfies CSSObject\n\nexport const inputStyle = defineComponentStyle({\n  base: {\n    \"--error-border-color\": \"colors.border.error\",\n    \"--focus-border-color\": \"colorScheme.outline\",\n    appearance: \"none\",\n    minW: \"0\",\n    position: \"relative\",\n    rounded: \"l2\",\n    textAlign: \"start\",\n    transitionDuration: \"moderate\",\n    transitionProperty: \"common\",\n    w: \"full\",\n    _disabled: {\n      layerStyle: \"disabled\",\n    },\n  },\n\n  variants: {\n    filled: {\n      bg: \"bg.panel\",\n      border: \"1px solid transparent\",\n      focusRingColor: \"{focus-border-color}\",\n      focusVisibleRing: \"inside\",\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        focusRingColor: \"{error-border-color}\",\n      },\n    },\n    flushed: {\n      bg: \"transparent\",\n      borderBottomColor: \"colorScheme.muted\",\n      borderBottomWidth: \"1px\",\n      rounded: \"0px\",\n      _focusVisible: {\n        borderColor: \"{focus-border-color}\",\n        boxShadow: \"0px 1px 0px 0px {focus-border-color}\",\n        outline: \"none\",\n      },\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        _focusVisible: {\n          boxShadow: \"0px 1px 0px 0px {error-border-color}\",\n        },\n      },\n    },\n    outline: {\n      border: \"1px solid {colorScheme.muted}\",\n      focusRingColor: \"{focus-border-color}\",\n      focusVisibleRing: \"inside\",\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        focusRingColor: \"{error-border-color}\",\n      },\n    },\n    plain: {\n      focusRingColor: \"{focus-border-color}\",\n      focusVisibleRing: \"inside\",\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        focusRingColor: \"{error-border-color}\",\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      \"--space-x\": \"spaces.2\",\n      \"--space-y\": \"spaces.1.5\",\n      fontSize: \"xs\",\n      px: \"{space-x}\",\n      ...getInputHeightStyle(\"{sizes.8}\"),\n    },\n    sm: {\n      \"--space-x\": \"spaces.2.5\",\n      \"--space-y\": \"spaces.2\",\n      fontSize: \"sm\",\n      px: \"{space-x}\",\n      ...getInputHeightStyle(\"{sizes.9}\"),\n    },\n    md: {\n      \"--space-x\": \"spaces.3\",\n      \"--space-y\": \"spaces.2\",\n      fontSize: \"md\",\n      px: \"{space-x}\",\n      ...getInputHeightStyle(\"{sizes.10}\"),\n    },\n    lg: {\n      \"--space-x\": \"spaces.3.5\",\n      \"--space-y\": \"spaces.2.5\",\n      fontSize: \"lg\",\n      px: \"{space-x}\",\n      ...getInputHeightStyle(\"{sizes.11}\"),\n    },\n    xl: {\n      \"--space-x\": \"spaces.4\",\n      \"--space-y\": \"spaces.3\",\n      fontSize: \"xl\",\n      px: \"{space-x}\",\n      ...getInputHeightStyle(\"{sizes.12}\"),\n    },\n    \"2xl\": {\n      \"--space-x\": \"spaces.4\",\n      \"--space-y\": \"spaces.3\",\n      fontSize: \"xl\",\n      px: \"{space-x}\",\n      ...getInputHeightStyle(\"{sizes.14}\"),\n    },\n  },\n\n  compounds: [\n    {\n      css: getInputPaddingResetStyle(),\n      variant: \"flushed\",\n      layer: \"variant\",\n    },\n  ],\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n  },\n})\n\nexport type InputStyle = typeof inputStyle\n"
    },
    {
      "name": "input.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport type { InputStyle } from \"./input.style\"\nimport type { UseInputBorderProps } from \"./use-input-border\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\nimport { inputStyle } from \"./input.style\"\nimport { useInputBorder } from \"./use-input-border\"\n\nexport interface InputProps\n  extends Omit<HTMLStyledProps<\"input\">, \"size\">,\n    ThemeProps<InputStyle>,\n    UseInputBorderProps,\n    FieldProps {\n  /**\n   * The native HTML `size` attribute to be passed to the `input`.\n   */\n  htmlSize?: number\n}\n\nconst {\n  PropsContext: InputPropsContext,\n  usePropsContext: useInputPropsContext,\n  withContext,\n} = createComponent<InputProps, InputStyle>(\"input\", inputStyle)\n\nexport { InputPropsContext, useInputPropsContext }\n\n/**\n * `Input` is a component used to obtain text input from the user.\n *\n * @see https://yamada-ui.com/docs/components/input\n */\nexport const Input = withContext(\"input\")(undefined, (props) => {\n  const {\n    props: { errorBorderColor, focusBorderColor, htmlSize, ...rest },\n    ariaProps,\n    dataProps,\n    eventProps,\n  } = useFieldProps(props)\n  const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n\n  return {\n    size: htmlSize,\n    ...ariaProps,\n    ...dataProps,\n    ...eventProps,\n    ...varProps,\n    ...rest,\n  }\n})\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  InputAddon as Addon,\n  InputAddonPropsContext as AddonPropsContext,\n  useInputAddonPropsContext as useAddonPropsContext,\n} from \"./input-addon\"\nexport type { InputAddonProps as AddonProps } from \"./input-addon\"\nexport {\n  InputElement as Element,\n  InputElementPropsContext as ElementPropsContext,\n  useInputElementPropsContext as useElementPropsContext,\n} from \"./input-element\"\nexport type { InputElementProps as ElementProps } from \"./input-element\"\nexport { InputGroupRoot as Root } from \"./input-group\"\nexport type { InputGroupRootProps as RootProps } from \"./input-group\"\n"
    },
    {
      "name": "use-input-border.ts",
      "content": "import type { CSSProps } from \"@yamada-ui/react\"\nimport { useMemo } from \"react\"\n\nexport interface UseInputBorderProps {\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: CSSProps[\"borderColor\"]\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: CSSProps[\"borderColor\"]\n}\n\nexport const useInputBorder = ({\n  errorBorderColor,\n  focusBorderColor,\n}: UseInputBorderProps = {}) => {\n  return useMemo(\n    () => ({\n      \"--error-border-color\": errorBorderColor\n        ? `colors.${errorBorderColor}`\n        : undefined,\n      \"--focus-border-color\": focusBorderColor\n        ? `colors.${focusBorderColor}`\n        : undefined,\n    }),\n    [errorBorderColor, focusBorderColor],\n  )\n}\n\nexport type UseInputBorderReturn = ReturnType<typeof useInputBorder>\n"
    }
  ]
}
