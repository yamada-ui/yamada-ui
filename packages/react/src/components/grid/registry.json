{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": ["color-swatch", "simple-grid"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "grid-item.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const gridItemStyle = defineComponentStyle({})\n\nexport type GridItemStyle = typeof gridItemStyle\n"
    },
    {
      "name": "grid-item.tsx",
      "content": "\"use client\"\n\nimport type { CSSProps, HTMLStyledProps, StyleValue } from \"@yamada-ui/react\"\nimport type { GridItemStyle } from \"./grid-item.style\"\nimport { createComponent, replaceObject } from \"@yamada-ui/react\"\nimport { gridItemStyle } from \"./grid-item.style\"\n\nexport interface GridItemProps extends HTMLStyledProps {\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSProps[\"gridArea\"]\n  /**\n   * The CSS `grid-column-end` property.\n   */\n  colEnd?: CSSProps[\"gridColumnEnd\"]\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  colSpan?: StyleValue<number>\n  /**\n   * The CSS `grid-column-start` property.\n   */\n  colStart?: CSSProps[\"gridColumnStart\"]\n  /**\n   * The CSS `grid-row-end` property.\n   */\n  rowEnd?: CSSProps[\"gridRowEnd\"]\n  /**\n   * The number of rows the grid item should `span`.\n   */\n  rowSpan?: StyleValue<number>\n  /**\n   * The CSS `grid-row-start` property.\n   */\n  rowStart?: CSSProps[\"gridRowStart\"]\n}\n\nconst {\n  PropsContext: GridItemPropsContext,\n  usePropsContext: useGridItemPropsContext,\n  withContext,\n} = createComponent<GridItemProps, GridItemStyle>(\"grid-item\", gridItemStyle)\n\nexport { GridItemPropsContext, useGridItemPropsContext }\n\nexport const GridItem = withContext(\"div\")(\n  undefined,\n  ({\n    area: gridArea,\n    colEnd: gridColumnEnd,\n    colSpan,\n    colStart: gridColumnStart,\n    rowEnd: gridRowEnd,\n    rowSpan,\n    rowStart: gridRowStart,\n    ...rest\n  }) => ({\n    gridArea,\n    gridColumn: replaceObject(colSpan, (value) =>\n      value != null ? `span ${value}/span ${value}` : undefined,\n    ),\n    gridColumnEnd,\n    gridColumnStart,\n    gridRow: replaceObject(rowSpan, (value) =>\n      value != null ? `span ${value}/span ${value}` : undefined,\n    ),\n    gridRowEnd,\n    gridRowStart,\n    ...rest,\n  }),\n)\n"
    },
    {
      "name": "grid.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const gridStyle = defineComponentStyle({\n  base: {\n    display: \"grid\",\n  },\n})\n\nexport type GridStyle = typeof gridStyle\n"
    },
    {
      "name": "grid.tsx",
      "content": "\"use client\"\n\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { GridStyle } from \"./grid.style\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { gridStyle } from \"./grid.style\"\n\nexport interface GridProps extends HTMLStyledProps, ThemeProps<GridStyle> {\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSProps[\"gridArea\"]\n  /**\n   * The CSS `grid-auto-columns` property.\n   */\n  autoColumns?: CSSProps[\"gridAutoColumns\"]\n  /**\n   * The CSS `grid-auto-flow` property.\n   */\n  autoFlow?: CSSProps[\"gridAutoFlow\"]\n  /**\n   * The CSS `grid-auto-rows` property.\n   */\n  autoRows?: CSSProps[\"gridAutoRows\"]\n  /**\n   * The CSS `grid-column` property.\n   */\n  column?: CSSProps[\"gridColumn\"]\n  /**\n   * The CSS `grid-row` property.\n   */\n  row?: CSSProps[\"gridRow\"]\n  /**\n   * The CSS `grid-template-areas` property.\n   */\n  templateAreas?: CSSProps[\"gridTemplateAreas\"]\n  /**\n   * The CSS `grid-template-columns` property.\n   */\n  templateColumns?: CSSProps[\"gridTemplateColumns\"]\n  /**\n   * The CSS `grid-template-rows` property.\n   */\n  templateRows?: CSSProps[\"gridTemplateRows\"]\n}\n\nconst {\n  PropsContext: GridPropsContext,\n  usePropsContext: useGridPropsContext,\n  withContext,\n} = createComponent<GridProps, GridStyle>(\"grid\", gridStyle)\n\nexport { GridPropsContext, useGridPropsContext }\n\n/**\n * `Grid` is a component for managing grid layouts. It also comes with handy style shorthand.\n *\n * @see https://yamada-ui.com/components/grid\n */\nexport const Grid = withContext(\"div\")(\n  undefined,\n  ({\n    area: gridArea,\n    autoColumns: gridAutoColumns,\n    autoFlow: gridAutoFlow,\n    autoRows: gridAutoRows,\n    column: gridColumn,\n    templateAreas: gridTemplateAreas,\n    templateColumns: gridTemplateColumns,\n    templateRows: gridTemplateRows,\n    ...rest\n  }) => ({\n    display: \"grid\",\n    gridArea,\n    gridAutoColumns,\n    gridAutoFlow,\n    gridAutoRows,\n    gridColumn,\n    gridTemplateAreas,\n    gridTemplateColumns,\n    gridTemplateRows,\n    ...rest,\n  }),\n)\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./grid-item.style\"\nexport * from \"./grid.style\"\nexport { Grid, GridPropsContext, useGridPropsContext } from \"./grid\"\nexport type { GridProps } from \"./grid\"\nexport {\n  GridItem,\n  GridItemPropsContext,\n  useGridItemPropsContext,\n} from \"./grid-item\"\nexport type { GridItemProps } from \"./grid-item\"\n"
    }
  ]
}
