{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [
      "use-lazy-mount",
      "use-value",
      "use-controllable-state",
      "use-descendants"
    ],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./tabs.style\"\nexport * as Tabs from \"./namespace\"\nexport type {\n  TabsListProps,\n  TabsPanelProps,\n  TabsPanelsProps,\n  TabsRootProps,\n  TabsTabProps,\n} from \"./tabs\"\nexport {\n  TabsList,\n  TabsPanel,\n  TabsPanels,\n  TabsPropsContext,\n  TabsRoot,\n  TabsTab,\n  useTabsPropsContext,\n} from \"./tabs\"\nexport * from \"./use-tabs\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  TabsList as List,\n  TabsPanel as Panel,\n  TabsPanels as Panels,\n  TabsPropsContext as PropsContext,\n  TabsRoot as Root,\n  TabsTab as Tab,\n  useTabsPropsContext as usePropsContext,\n} from \"./tabs\"\nexport type {\n  TabsListProps as ListProps,\n  TabsPanelProps as PanelProps,\n  TabsPanelsProps as PanelsProps,\n  TabsRootProps as RootProps,\n  TabsTabProps as TabProps,\n} from \"./tabs\"\nexport {\n  TabsContext as Context,\n  TabDescendantsContext as DescendantsContext,\n  TabPanelDescendantsContext as PanelDescendantsContext,\n  useTabsContext as useContext,\n  useTabDescendant as useDescendant,\n  useTabDescendants as useDescendants,\n  useTabPanelDescendant as usePanelDescendant,\n  useTabPanelDescendants as usePanelDescendants,\n} from \"./use-tabs\"\n"
    },
    {
      "name": "tabs.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const tabsStyle = defineComponentSlotStyle({\n  base: {\n    list: {\n      display: \"flex\",\n    },\n    panel: {\n      flex: \"1\",\n    },\n    root: {\n      display: \"flex\",\n      w: \"full\",\n    },\n    tab: {\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      display: \"flex\",\n      fontWeight: \"medium\",\n      gap: \"2\",\n      justifyContent: \"center\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n      _disabled: {\n        layerStyle: \"disabled\",\n      },\n    },\n  },\n\n  props: {\n    /**\n     * The alignment of the tabs.\n     *\n     * @default 'start'\n     */\n    align: {\n      center: {\n        list: {\n          justifyContent: \"center\",\n        },\n      },\n      end: {\n        list: {\n          justifyContent: \"flex-end\",\n        },\n      },\n      start: {\n        list: {\n          justifyContent: \"flex-start\",\n        },\n      },\n    },\n    /**\n     * If `true`, tabs will stretch to width of the tablist.\n     *\n     * @default false\n     */\n    fitted: {\n      true: {\n        tab: {\n          flex: 1,\n        },\n      },\n    },\n    /**\n     * The orientation of the tab list.\n     *\n     * @default 'horizontal'\n     */\n    orientation: {\n      horizontal: {\n        list: { alignItems: \"center\", flexDirection: \"row\" },\n        root: {\n          flexDirection: \"column\",\n        },\n      },\n      vertical: {\n        list: { alignItems: \"stretch\", flexDirection: \"column\" },\n        root: {\n          flexDirection: \"row\",\n        },\n      },\n    },\n  },\n\n  variants: {\n    line: {\n      list: {\n        _horizontal: {\n          borderBottomWidth: \"1px\",\n        },\n        _vertical: {\n          borderRightWidth: \"1px\",\n        },\n      },\n      tab: {\n        color: \"fg.muted\",\n        focusVisibleRing: \"inside\",\n        position: \"relative\",\n        _selected: {\n          color: \"fg\",\n          _after: {\n            borderColor: \"colorScheme.solid\",\n            position: \"absolute\",\n          },\n          _horizontal: {\n            _after: {\n              borderBottomWidth: \"1px\",\n              bottom: \"-1px\",\n              w: \"full\",\n            },\n          },\n          _vertical: {\n            _after: {\n              borderRightWidth: \"1px\",\n              h: \"full\",\n              right: \"-1px\",\n            },\n          },\n        },\n      },\n    },\n    outline: {\n      list: {\n        _horizontal: {\n          borderBottomWidth: \"1px\",\n        },\n        _vertical: {\n          borderRightWidth: \"1px\",\n        },\n      },\n      tab: {\n        border: \"1px solid transparent\",\n        color: \"fg.muted\",\n        focusVisibleRing: \"inside\",\n        position: \"relative\",\n        _horizontal: {\n          mb: \"-1px\",\n          roundedStart: \"l2\",\n        },\n        _vertical: {\n          me: \"-1px\",\n          roundedLeft: \"l2\",\n        },\n        _selected: {\n          bg: \"bg\",\n          borderColor: \"border\",\n          color: \"fg\",\n          _horizontal: {\n            borderBottomColor: \"transparent\",\n          },\n          _vertical: {\n            borderRightColor: \"transparent\",\n          },\n        },\n      },\n    },\n    plain: {\n      tab: {\n        color: \"fg.muted\",\n        rounded: \"l2\",\n        _selected: {\n          color: \"fg\",\n        },\n      },\n    },\n    subtle: {\n      tab: {\n        border: \"1px solid transparent\",\n        color: \"fg.muted\",\n        rounded: \"l2\",\n        _selected: {\n          layerStyle: \"subtle\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      root: {\n        gap: \"sm\",\n      },\n      tab: {\n        fontSize: \"sm\",\n        px: \"3\",\n        py: \"1\",\n      },\n    },\n    md: {\n      root: {\n        gap: \"md\",\n      },\n      tab: {\n        fontSize: \"md\",\n        px: \"4\",\n        py: \"2\",\n      },\n    },\n    lg: {\n      root: {\n        gap: \"lg\",\n      },\n      tab: {\n        fontSize: \"lg\",\n        px: \"5\",\n        py: \"3\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"line\",\n    align: \"start\",\n    orientation: \"horizontal\",\n  },\n})\n\nexport type TabsStyle = typeof tabsStyle\n"
    },
    {
      "name": "tabs.tsx",
      "content": "\"use client\"\n\nimport type { FC, PropsWithChildren, ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { UseLazyMountProps } from \"../../hooks/use-lazy-mount\"\nimport type { TabsStyle } from \"./tabs.style\"\nimport type { UseTabPanelProps, UseTabProps, UseTabsProps } from \"./use-tabs\"\nimport { useMemo } from \"react\"\nimport {\n  createSlotComponent,\n  styled,\n  isNull,\n  isUndefined,\n} from \"@yamada-ui/react\"\nimport { useLazyMount } from \"../../hooks/use-lazy-mount\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { tabsStyle } from \"./tabs.style\"\nimport {\n  TabDescendantsContext,\n  TabPanelDescendantsContext,\n  TabsContext,\n  useTab,\n  useTabPanel,\n  useTabs,\n  useTabsContext,\n} from \"./use-tabs\"\n\ninterface ComponentContext\n  extends Pick<TabsRootProps, \"items\" | \"lazy\" | \"lazyBehavior\"> {}\n\ninterface TabsItem extends Omit<TabsTabProps, \"index\"> {\n  /**\n   * The content for panel element.\n   */\n  panel: ReactNode\n  /**\n   * The content for tab element.\n   */\n  tab: ReactNode\n  /**\n   * Props for panel element.\n   */\n  panelProps?: TabsPanelProps\n}\n\nexport interface TabsRootProps\n  extends Omit<HTMLStyledProps, \"onChange\">,\n    Omit<UseTabsProps, \"orientation\">,\n    Pick<UseLazyMountProps, \"lazy\" | \"lazyBehavior\">,\n    ThemeProps<TabsStyle> {\n  /**\n   * If provided, generate tab and panel components based on tabs.\n   */\n  items?: TabsItem[]\n}\n\nconst {\n  ComponentContext,\n  PropsContext: TabsPropsContext,\n  useComponentContext,\n  usePropsContext: useTabsPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<TabsRootProps, TabsStyle, ComponentContext>(\n  \"tabs\",\n  tabsStyle,\n)\n\nexport { TabsPropsContext, useTabsPropsContext }\n\n/**\n * `Tabs` is a component for switching between different display areas.\n *\n * @see https://yamada-ui.com/docs/components/tabs\n */\nexport const TabsRoot = withProvider<\"div\", TabsRootProps, \"orientation\">(\n  ({\n    children,\n    items,\n    lazy,\n    lazyBehavior,\n    orientation: orientationProp,\n    ...rest\n  }) => {\n    const computedOrientation = useValue(orientationProp)\n    const {\n      id,\n      focusedIndex,\n      index,\n      manual,\n      orientation,\n      setFocusedIndex,\n      setIndex,\n      tabDescendants,\n      tabPanelDescendants,\n      getListProps,\n      getRootProps,\n    } = useTabs({ orientation: computedOrientation, ...rest })\n    const componentContext = useMemo(\n      () => ({ items, lazy, lazyBehavior }),\n      [items, lazy, lazyBehavior],\n    )\n    const tabsContext = useMemo(\n      () => ({\n        id,\n        focusedIndex,\n        index,\n        manual,\n        orientation,\n        setFocusedIndex,\n        setIndex,\n        getListProps,\n      }),\n      [\n        id,\n        manual,\n        focusedIndex,\n        index,\n        orientation,\n        setFocusedIndex,\n        setIndex,\n        getListProps,\n      ],\n    )\n\n    return (\n      <TabDescendantsContext value={tabDescendants}>\n        <TabPanelDescendantsContext value={tabPanelDescendants}>\n          <TabsContext value={tabsContext}>\n            <ComponentContext value={componentContext}>\n              <styled.div {...getRootProps()}>{children}</styled.div>\n            </ComponentContext>\n          </TabsContext>\n        </TabPanelDescendantsContext>\n      </TabDescendantsContext>\n    )\n  },\n  \"root\",\n  { transferProps: [\"orientation\"] },\n)()\n\nexport interface TabsListProps extends HTMLStyledProps {}\n\nexport const TabsList = withContext<\"div\", TabsListProps>(\n  ({ children, ...rest }) => {\n    const { items } = useComponentContext()\n    const { getListProps } = useTabsContext()\n    const computedChildren = useMemo(() => {\n      if (children) {\n        return children\n      } else {\n        return items?.map(\n          (\n            { id, panel: _panel, tab, panelProps: _panelProps, ...rest },\n            index,\n          ) =>\n            isUndefined(tab) || isNull(tab) ? null : (\n              <TabsTab id={id} key={id ?? index} index={index} {...rest}>\n                {tab}\n              </TabsTab>\n            ),\n        )\n      }\n    }, [children, items])\n\n    return <styled.div {...getListProps(rest)}>{computedChildren}</styled.div>\n  },\n  \"list\",\n)()\n\nexport interface TabsTabProps extends HTMLStyledProps<\"button\">, UseTabProps {}\n\nexport const TabsTab = withContext<\"button\", TabsTabProps>(\"button\", \"tab\")(\n  undefined,\n  (props) => {\n    const { getRootProps } = useTab(props)\n\n    return getRootProps()\n  },\n)\n\nexport interface TabsPanelsProps extends PropsWithChildren {}\n\nexport const TabsPanels: FC<TabsPanelsProps> = ({ children }) => {\n  const { items } = useComponentContext()\n\n  return useMemo(() => {\n    if (children) {\n      return children\n    } else {\n      return items?.map(({ id, panel, panelProps }, index) =>\n        isUndefined(panel) || isNull(panel) ? null : (\n          <TabsPanel key={id ?? index} index={index} {...panelProps}>\n            {panel}\n          </TabsPanel>\n        ),\n      )\n    }\n  }, [children, items])\n}\n\nexport interface TabsPanelProps extends HTMLStyledProps, UseTabPanelProps {}\n\nexport const TabsPanel = withContext<\"div\", TabsPanelProps>(\"div\", \"panel\")(\n  undefined,\n  (props) => {\n    const { lazy, lazyBehavior } = useComponentContext()\n    const { selected: mounted, getRootProps } = useTabPanel(props)\n    const children = useLazyMount({ lazy, lazyBehavior, mounted, ...props })\n\n    return { ...getRootProps(), children }\n  },\n)\n"
    },
    {
      "name": "use-tabs.ts",
      "content": "\"use client\"\n\nimport type { KeyboardEvent } from \"react\"\nimport type { HTMLProps, Orientation, PropGetter } from \"@yamada-ui/react\"\nimport { useCallback, useId, useState } from \"react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport { createDescendants } from \"../../hooks/use-descendants\"\nimport {\n  createContext,\n  cx,\n  handlerAll,\n  isUndefined,\n  mergeRefs,\n  runKeyAction,\n  useUpdateEffect,\n} from \"@yamada-ui/react\"\n\nconst {\n  DescendantsContext: TabDescendantsContext,\n  useDescendant: useTabDescendant,\n  useDescendants: useTabDescendants,\n} = createDescendants<HTMLButtonElement>()\n\nexport { TabDescendantsContext, useTabDescendant, useTabDescendants }\n\nconst {\n  DescendantsContext: TabPanelDescendantsContext,\n  useDescendant: useTabPanelDescendant,\n  useDescendants: useTabPanelDescendants,\n} = createDescendants<HTMLDivElement>()\n\nexport {\n  TabPanelDescendantsContext,\n  useTabPanelDescendant,\n  useTabPanelDescendants,\n}\n\ninterface TabsContext\n  extends Omit<\n    UseTabsReturn,\n    \"getRootProps\" | \"tabDescendants\" | \"tabPanelDescendants\"\n  > {}\n\nconst [TabsContext, useTabsContext] = createContext<TabsContext>({\n  name: \"TabsContext\",\n})\n\nexport { TabsContext, useTabsContext }\n\nexport interface UseTabsProps extends Omit<HTMLProps, \"onChange\"> {\n  /**\n   * The index of the selected tab.\n   */\n  defaultIndex?: number\n  /**\n   * The index of the selected tab.\n   */\n  index?: number\n  /**\n   * If `true`, the tabs will be manually activated and display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated and their panel is displayed when they receive focus.\n   *\n   * @default false\n   */\n  manual?: boolean\n  /**\n   * The orientation of the tabs.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: Orientation\n  /**\n   * The callback invoked when the index changes.\n   */\n  onChange?: (index: number) => void\n}\n\nexport const useTabs = ({\n  id,\n  defaultIndex = 0,\n  index: indexProp,\n  manual = false,\n  orientation = \"horizontal\",\n  onChange,\n  ...rest\n}: UseTabsProps = {}) => {\n  const uuid = useId()\n  const tabDescendants = useTabDescendants()\n  const tabPanelDescendants = useTabPanelDescendants()\n  const [index, setIndex] = useControllableState({\n    defaultValue: defaultIndex,\n    value: indexProp,\n    onChange,\n  })\n  const [focusedIndex, setFocusedIndex] = useState<number>(index)\n  const horizontal = orientation === \"horizontal\"\n\n  id ??= uuid\n\n  const onFocusFirstTab = useCallback(() => {\n    const first = tabDescendants.enabledFirstValue()\n\n    if (first) first.node.focus()\n  }, [tabDescendants])\n\n  const onFocusLastTab = useCallback(() => {\n    const last = tabDescendants.enabledLastValue()\n\n    if (last) last.node.focus()\n  }, [tabDescendants])\n\n  const onFocusNextTab = useCallback(() => {\n    const next = tabDescendants.enabledNextValue(focusedIndex)\n\n    if (next) next.node.focus()\n  }, [tabDescendants, focusedIndex])\n\n  const onFocusPrevTab = useCallback(() => {\n    const prev = tabDescendants.enabledPrevValue(focusedIndex)\n\n    if (prev) prev.node.focus()\n  }, [tabDescendants, focusedIndex])\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLDivElement>) => {\n      runKeyAction(ev, {\n        ArrowDown: !horizontal ? onFocusNextTab : undefined,\n        ArrowLeft: horizontal ? onFocusPrevTab : undefined,\n        ArrowRight: horizontal ? onFocusNextTab : undefined,\n        ArrowUp: !horizontal ? onFocusPrevTab : undefined,\n        End: onFocusLastTab,\n        Home: onFocusFirstTab,\n      })\n    },\n    [\n      horizontal,\n      onFocusNextTab,\n      onFocusPrevTab,\n      onFocusLastTab,\n      onFocusFirstTab,\n    ],\n  )\n\n  useUpdateEffect(() => {\n    if (isUndefined(indexProp)) return\n\n    setIndex(indexProp)\n    setFocusedIndex(indexProp)\n  }, [indexProp])\n\n  const getRootProps: PropGetter = useCallback(\n    ({ ref, ...props } = {}) => ({\n      \"data-orientation\": orientation,\n      ...rest,\n      ...props,\n      ref: mergeRefs(ref, rest.ref),\n    }),\n    [orientation, rest],\n  )\n\n  const getListProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"aria-orientation\": orientation,\n      role: \"tablist\",\n      ...props,\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n    }),\n    [orientation, onKeyDown],\n  )\n\n  return {\n    id,\n    focusedIndex,\n    index,\n    manual,\n    orientation,\n    setFocusedIndex,\n    setIndex,\n    tabDescendants,\n    tabPanelDescendants,\n    getListProps,\n    getRootProps,\n  }\n}\n\nexport type UseTabsReturn = ReturnType<typeof useTabs>\n\nexport interface UseTabProps extends HTMLProps<\"button\"> {\n  /**\n   * The index of the tab.\n   */\n  index: number\n}\n\nexport const useTab = ({ id, disabled, index, ...rest }: UseTabProps) => {\n  const {\n    id: rootId,\n    index: selectedIndex,\n    manual,\n    orientation,\n    setFocusedIndex,\n    setIndex,\n  } = useTabsContext()\n  const { register } = useTabDescendant({ disabled })\n  const tabPanelId = `${rootId}-panel-${index}`\n  const selected = index === selectedIndex\n\n  id ??= `${rootId}-tab-${index}`\n\n  const onClick = useCallback(() => {\n    if (!disabled) setIndex(index)\n  }, [index, setIndex, disabled])\n\n  const onFocus = useCallback(() => {\n    if (disabled) return\n\n    setFocusedIndex(index)\n\n    if (!manual) setIndex(index)\n  }, [setFocusedIndex, index, manual, disabled, setIndex])\n\n  const getRootProps: PropGetter<\"button\"> = useCallback(\n    ({ ref, ...props } = {}) => ({\n      id,\n      type: \"button\",\n      \"aria-controls\": tabPanelId,\n      \"aria-selected\": selected,\n      \"data-orientation\": orientation,\n      disabled,\n      role: \"tab\",\n      tabIndex: selected ? 0 : -1,\n      ...rest,\n      ...props,\n      ref: mergeRefs(ref, register),\n      onClick: handlerAll(props.onClick, rest.onClick, onClick),\n      onFocus: handlerAll(props.onFocus, rest.onFocus, onFocus),\n    }),\n    [\n      disabled,\n      id,\n      onClick,\n      onFocus,\n      orientation,\n      register,\n      rest,\n      selected,\n      tabPanelId,\n    ],\n  )\n\n  return { index, selected, getRootProps }\n}\n\nexport type UseTabReturn = ReturnType<typeof useTab>\n\nexport interface UseTabPanelProps extends HTMLProps {\n  /**\n   * The index of the tab panel.\n   */\n  index: number\n}\n\nexport const useTabPanel = ({\n  id,\n  \"aria-labelledby\": ariaLabelledbyProp,\n  index,\n  ...rest\n}: UseTabPanelProps) => {\n  const { id: rootId, index: selectedIndex, orientation } = useTabsContext()\n  const { register } = useTabPanelDescendant()\n  const tabId = `${rootId}-tab-${index}`\n  const selected = index === selectedIndex\n\n  id ??= `${rootId}-panel-${index}`\n\n  const getRootProps: PropGetter = useCallback(\n    ({ ref, \"aria-labelledby\": ariaLabelledby, ...props } = {}) => ({\n      id,\n      \"aria-labelledby\": cx(ariaLabelledbyProp, ariaLabelledby, tabId),\n      \"data-orientation\": orientation,\n      hidden: !selected,\n      role: \"tabpanel\",\n      tabIndex: selected ? 0 : -1,\n      ...rest,\n      ...props,\n      ref: mergeRefs(ref, register),\n    }),\n    [id, ariaLabelledbyProp, orientation, register, rest, selected, tabId],\n  )\n\n  return { index, selected, getRootProps }\n}\n\nexport type UseTabPanelReturn = ReturnType<typeof useTabPanel>\n"
    }
  ]
}
