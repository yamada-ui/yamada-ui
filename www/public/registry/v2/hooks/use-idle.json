{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\nconst DEFAULT_EVENTS: (keyof DocumentEventMap)[] = [\n  \"keypress\",\n  \"mousemove\",\n  \"touchmove\",\n  \"click\",\n  \"scroll\",\n]\n\nconst DEFAULT_OPTIONS = {\n  events: DEFAULT_EVENTS,\n  initialState: true,\n}\n\nexport interface IdleOptions {\n  events?: (keyof DocumentEventMap)[]\n  initialState?: boolean\n}\n\n/**\n * `useIdle` is a custom hook that detects whether the user has been idle for a certain amount of time in milliseconds.\n *\n * @see https://yamada-ui.com/hooks/use-idle\n */\nexport const useIdle = (timeout: number, options?: IdleOptions) => {\n  const { events, initialState } = { ...DEFAULT_OPTIONS, ...options }\n  const [idle, setIdle] = useState<boolean>(initialState)\n  const timeoutId = useRef<NodeJS.Timeout>(undefined)\n\n  useEffect(() => {\n    const handleEvent = () => {\n      setIdle(false)\n\n      if (timeoutId.current) clearTimeout(timeoutId.current)\n\n      timeoutId.current = setTimeout(() => setIdle(true), timeout)\n    }\n\n    events.forEach((event) => document.addEventListener(event, handleEvent))\n\n    return () => {\n      events.forEach((event) =>\n        document.removeEventListener(event, handleEvent),\n      )\n    }\n  }, [events, timeout])\n\n  return idle\n}\n"
    }
  ]
}
