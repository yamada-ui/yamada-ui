{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon", "motion", "text", "portal", "center"],
    "externals": ["motion@12.18.1", "react-remove-scroll@^2.7.1"],
    "hooks": ["use-timeout"],
    "providers": []
  },
  "dependents": {
    "components": ["alert", "button", "dropzone"],
    "hooks": ["use-async-callback"],
    "providers": ["ui-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "audio.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface AudioProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Audio = withContext<\"svg\", AudioProps>(\n  ({ dur = \"1.4s\", ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon fill=\"currentColor\" viewBox=\"0 0 55 80\" {...rest}>\n        <g transform=\"matrix(1 0 0 -1 0 80)\">\n          <rect height=\"20\" rx=\"3\" width=\"10\">\n            <animate\n              attributeName=\"height\"\n              begin=\"0s\"\n              calcMode=\"linear\"\n              dur={`${dur * 3}s`}\n              repeatCount=\"indefinite\"\n              values=\"20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20\"\n            />\n          </rect>\n          <rect height=\"80\" rx=\"3\" width=\"10\" x=\"15\">\n            <animate\n              attributeName=\"height\"\n              begin=\"0s\"\n              calcMode=\"linear\"\n              dur={`${dur * 1.4}s`}\n              repeatCount=\"indefinite\"\n              values=\"80;55;33;5;75;23;73;33;12;14;60;80\"\n            />\n          </rect>\n          <rect height=\"50\" rx=\"3\" width=\"10\" x=\"30\">\n            <animate\n              attributeName=\"height\"\n              begin=\"0s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"50;34;78;23;56;23;34;76;80;54;21;50\"\n            />\n          </rect>\n          <rect height=\"30\" rx=\"3\" width=\"10\" x=\"45\">\n            <animate\n              attributeName=\"height\"\n              begin=\"0s\"\n              calcMode=\"linear\"\n              dur={`${dur * 1.4}s`}\n              repeatCount=\"indefinite\"\n              values=\"30;45;13;80;56;72;45;76;34;23;67;30\"\n            />\n          </rect>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "background.tsx",
      "content": "import type { Variants } from \"motion/react\"\nimport type { FC } from \"react\"\nimport type { LoadingSharedProps } from \"./loading-provider\"\nimport { memo } from \"react\"\nimport { useTimeout } from \"../../hooks/use-timeout\"\nimport { isValidElement } from \"@yamada-ui/react\"\nimport { motion } from \"../motion\"\nimport { Text } from \"../text\"\nimport { Loading } from \"./\"\n\nconst variants: Variants = {\n  animate: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  initial: {\n    opacity: 0,\n    scale: 0.95,\n  },\n}\n\nexport interface BackgroundProps extends LoadingSharedProps {}\n\nexport const Background: FC<BackgroundProps> = memo(\n  ({ duration, initial, message, onFinish }) => {\n    useTimeout(onFinish, duration)\n\n    return (\n      <motion.div\n        data-loading\n        alignItems=\"center\"\n        animate=\"animate\"\n        bg=\"bg.panel\"\n        bottom=\"md\"\n        boxShadow=\"lg\"\n        display=\"flex\"\n        exit=\"exit\"\n        gap=\"sm\"\n        initial={initial}\n        justifyContent=\"center\"\n        maxW=\"20rem\"\n        p=\"sm\"\n        position=\"fixed\"\n        right=\"md\"\n        rounded=\"l2\"\n        variants={variants}\n        zIndex=\"beerus\"\n      >\n        <Loading.Oval fontSize=\"xl\" />\n\n        {message ? (\n          isValidElement(message) ? (\n            message\n          ) : (\n            <Text fontSize=\"sm\" lineClamp={1}>\n              {message}\n            </Text>\n          )\n        ) : null}\n      </motion.div>\n    )\n  },\n)\n\nBackground.displayName = \"Background\"\n"
    },
    {
      "name": "circles.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface CirclesProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Circles = withContext<\"svg\", CirclesProps>(\n  ({ dur = \"3s\", ...rest }) => {\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 58 58\" {...rest}>\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g stroke=\"currentColor\" strokeWidth=\"1.5\" transform=\"translate(2 1)\">\n            <styled.circle\n              cx=\"42.601\"\n              cy=\"11.462\"\n              fill=\"currentColor\"\n              fillOpacity=\"1\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"1;0;0;0;0;0;0;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"49.063\"\n              cy=\"27.063\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;1;0;0;0;0;0;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"42.601\"\n              cy=\"42.663\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;0;1;0;0;0;0;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"27\"\n              cy=\"49.125\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;0;0;1;0;0;0;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"11.399\"\n              cy=\"42.663\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;0;0;0;1;0;0;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"4.938\"\n              cy=\"27.063\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;0;0;0;0;1;0;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"11.399\"\n              cy=\"11.462\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;0;0;0;0;0;1;0\"\n              />\n            </styled.circle>\n            <styled.circle\n              cx=\"27\"\n              cy=\"5\"\n              fill=\"currentColor\"\n              fillOpacity=\"0\"\n              r=\"5\"\n            >\n              <animate\n                attributeName=\"fill-opacity\"\n                begin=\"0s\"\n                calcMode=\"linear\"\n                dur={dur}\n                repeatCount=\"indefinite\"\n                values=\"0;0;0;0;0;0;0;1\"\n              />\n            </styled.circle>\n          </g>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "dots.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface DotsProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Dots = withContext<\"svg\", DotsProps>(({ dur = \"1s\", ...rest }) => {\n  return (\n    <Icon fill=\"currentColor\" viewBox=\"0 0 120 30\" {...rest}>\n      <circle cx=\"15\" cy=\"15\" r=\"15\">\n        <animate\n          attributeName=\"r\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          from=\"15\"\n          repeatCount=\"indefinite\"\n          to=\"15\"\n          values=\"15;9;15\"\n        />\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          from=\"1\"\n          repeatCount=\"indefinite\"\n          to=\"1\"\n          values=\"1;.5;1\"\n        />\n      </circle>\n      <circle cx=\"60\" cy=\"15\" fillOpacity=\"0.3\" r=\"9\">\n        <animate\n          attributeName=\"r\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          from=\"9\"\n          repeatCount=\"indefinite\"\n          to=\"9\"\n          values=\"9;15;9\"\n        />\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          from=\"0.5\"\n          repeatCount=\"indefinite\"\n          to=\"0.5\"\n          values=\".5;1;.5\"\n        />\n      </circle>\n      <circle cx=\"105\" cy=\"15\" r=\"15\">\n        <animate\n          attributeName=\"r\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          from=\"15\"\n          repeatCount=\"indefinite\"\n          to=\"15\"\n          values=\"15;9;15\"\n        />\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          from=\"1\"\n          repeatCount=\"indefinite\"\n          to=\"1\"\n          values=\"1;.5;1\"\n        />\n      </circle>\n    </Icon>\n  )\n})(initialProps, superProps)\n"
    },
    {
      "name": "grid.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface GridProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Grid = withContext<\"svg\", GridProps>(({ dur = \"1s\", ...rest }) => {\n  return (\n    <Icon fill=\"currentColor\" viewBox=\"0 0 105 105\" {...rest}>\n      <circle cx=\"12.5\" cy=\"12.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"0s\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"12.5\" cy=\"52.5\" fillOpacity=\".5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"100ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"52.5\" cy=\"12.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"300ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"52.5\" cy=\"52.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"600ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"92.5\" cy=\"12.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"800ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"92.5\" cy=\"52.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"400ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"12.5\" cy=\"92.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"700ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"52.5\" cy=\"92.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"500ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n      <circle cx=\"92.5\" cy=\"92.5\" r=\"12.5\">\n        <animate\n          attributeName=\"fill-opacity\"\n          begin=\"200ms\"\n          calcMode=\"linear\"\n          dur={dur}\n          repeatCount=\"indefinite\"\n          values=\"1;.2;1\"\n        />\n      </circle>\n    </Icon>\n  )\n})(initialProps, superProps)\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./loading.style\"\nexport type { LoadingScheme } from \"./loading\"\nexport { LoadingPropsContext, useLoadingPropsContext } from \"./loading\"\nexport * from \"./loading-provider\"\nexport * as Loading from \"./namespace\"\nexport * from \"./use-loading-component\"\n"
    },
    {
      "name": "loading-provider.tsx",
      "content": "\"use client\"\n\nimport type { FC, PropsWithChildren, ReactNode, RefObject } from \"react\"\nimport type { LoadingConfig, ThemeConfig } from \"@yamada-ui/react\"\nimport { AnimatePresence } from \"motion/react\"\nimport { createContext, createRef, use, useMemo, useRef, useState } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { assignRef, isNumber, useUpdateEffect } from \"@yamada-ui/react\"\nimport { Portal } from \"../portal\"\nimport { Background } from \"./background\"\nimport { Page } from \"./page\"\nimport { Screen } from \"./screen\"\n\ninterface LoadingMethods {\n  /**\n   * Function to finish loading.\n   */\n  finish: () => void\n  /**\n   * Function to forcefully update the loading state.\n   *\n   * Please be careful, as it will forcefully overwrite the state of the loading component.\n   */\n  force: (state: Partial<LoadingState>) => void\n  /**\n   * Function to start loading.\n   *\n   * If you specify a `message` etc. as an argument, the loading will change accordingly.\n   */\n  start: (options?: LoadingOptions) => void\n  /**\n   * Function to update loading.\n   *\n   * If you specify a `message` etc. as an argument, the loading will change accordingly.\n   */\n  update: (options: LoadingOptions) => void\n}\n\nexport interface LoadingOptions {\n  duration?: null | number\n  message?: ReactNode | undefined\n}\n\ninterface LoadingState {\n  duration: null | number\n  loadingCount: number\n  message: ReactNode | undefined\n}\n\ninterface LoadingContext {\n  /**\n   * The background loading methods.\n   */\n  background: LoadingMethods\n  /**\n   * The page loading methods.\n   */\n  page: LoadingMethods\n  /**\n   * The screen loading methods.\n   */\n  screen: LoadingMethods\n}\n\nconst LoadingContext = createContext({} as LoadingContext)\n\nconst createController = () => ({\n  finish: createRef<LoadingMethods[\"finish\"]>(),\n  force: createRef<LoadingMethods[\"force\"]>(),\n  start: createRef<LoadingMethods[\"start\"]>(),\n  update: createRef<LoadingMethods[\"update\"]>(),\n})\n\ntype Controller = ReturnType<typeof createController>\n\nconst createMethods = (refs: RefObject<Controller>): LoadingMethods => ({\n  finish: () => refs.current.finish.current?.(),\n  force: (state) => refs.current.force.current?.(state),\n  start: (props) => refs.current.start.current?.(props),\n  update: (props) => refs.current.update.current?.(props),\n})\n\nconst incrementCount = (prev: number) => prev + 1\nconst decrementCount = (prev: number) => (prev === 0 ? prev : prev - 1)\n\nexport interface LoadingProviderProps\n  extends PropsWithChildren<ThemeConfig[\"loading\"]> {}\n\nexport const LoadingProvider: FC<LoadingProviderProps> = ({\n  background: backgroundConfig,\n  children,\n  page: pageConfig,\n  screen: screenConfig,\n}) => {\n  const screen = useRef(createController())\n  const page = useRef(createController())\n  const background = useRef(createController())\n\n  const value = useMemo(\n    () => ({\n      background: createMethods(background),\n      page: createMethods(page),\n      screen: createMethods(screen),\n    }),\n    [],\n  )\n\n  return (\n    <LoadingContext.Provider value={value}>\n      {children}\n\n      <Controller ref={screen} {...screenConfig} component={Screen} />\n\n      <Controller ref={page} {...pageConfig} component={Page} />\n\n      <Controller\n        ref={background}\n        {...backgroundConfig}\n        blockScrollOnMount={backgroundConfig?.blockScrollOnMount ?? false}\n        component={Background}\n      />\n    </LoadingContext.Provider>\n  )\n}\n\nexport interface LoadingSharedProps {\n  duration: null | number\n  message: ReactNode | undefined\n  onFinish: () => void\n  initial?: boolean | string\n}\n\ninterface ControllerProps extends LoadingConfig {\n  ref: RefObject<Controller>\n  component: FC<LoadingSharedProps>\n}\n\nconst Controller: FC<ControllerProps> = ({\n  ref,\n  allowPinchZoom = false,\n  blockScrollOnMount = true,\n  component: Component,\n  duration: durationProp = null,\n  loadingCount: loadingCountProp = 0,\n}) => {\n  const loading = useRef<boolean>(false)\n  const [{ duration, loadingCount, message }, setState] =\n    useState<LoadingState>({\n      duration: durationProp,\n      loadingCount: loadingCountProp,\n      message: undefined,\n    })\n\n  const { finish, force, start, update } = useMemo<LoadingMethods>(\n    () => ({\n      finish: () => {\n        loading.current = false\n\n        setState(({ loadingCount }) => ({\n          duration: durationProp,\n          loadingCount: decrementCount(loadingCount),\n          message: undefined,\n        }))\n      },\n\n      force: ({ duration = durationProp, loadingCount = 0, message }) => {\n        loading.current = !!loadingCount\n\n        setState({\n          duration,\n          loadingCount,\n          message,\n        })\n      },\n\n      start: ({ duration = durationProp, message } = {}) => {\n        loading.current = true\n\n        setState(({ loadingCount }) => ({\n          duration,\n          loadingCount: incrementCount(loadingCount),\n          message,\n        }))\n      },\n\n      update: (next) => setState((prev) => ({ ...prev, ...next })),\n    }),\n    [durationProp],\n  )\n\n  assignRef(ref.current.start, start)\n  assignRef(ref.current.finish, finish)\n  assignRef(ref.current.update, update)\n  assignRef(ref.current.force, force)\n\n  const props: LoadingSharedProps = {\n    duration,\n    initial: loadingCountProp > 0 ? false : \"initial\",\n    message,\n    onFinish: finish,\n  }\n\n  useUpdateEffect(() => {\n    if (loadingCountProp > 0 || isNumber(durationProp))\n      setState({\n        duration: durationProp,\n        loadingCount: loadingCountProp,\n        message: undefined,\n      })\n  }, [loadingCountProp, durationProp])\n\n  return (\n    <AnimatePresence initial={false}>\n      {loadingCount ? (\n        <Portal>\n          <RemoveScroll\n            allowPinchZoom={allowPinchZoom}\n            enabled={blockScrollOnMount}\n            forwardProps\n          >\n            <Component {...props} />\n          </RemoveScroll>\n        </Portal>\n      ) : null}\n    </AnimatePresence>\n  )\n}\n\n/**\n * `useLoading` is a custom hook for controlling the loading of the application.\n *\n * @see https://yamada-ui.com/hooks/use-loading\n */\nexport const useLoading = (): LoadingContext => {\n  const { background, page, screen } = use(LoadingContext)\n\n  const context = useMemo(\n    () => ({ background, page, screen }),\n    [background, page, screen],\n  )\n\n  return context\n}\n"
    },
    {
      "name": "loading.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const loadingStyle = defineComponentStyle({\n  base: {\n    color: [\"colorScheme.500\", \"colorScheme.600\"],\n    fontSize: \"1em\",\n  },\n\n  defaultProps: {\n    colorScheme: \"primary\",\n  },\n})\n\nexport type LoadingStyle = typeof loadingStyle\n"
    },
    {
      "name": "loading.tsx",
      "content": "\"use client\"\n\nimport type {\n  CSSProps,\n  InitialProps,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { IconProps } from \"../icon\"\nimport type { LoadingStyle } from \"./loading.style\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { loadingStyle } from \"./loading.style\"\n\nexport type LoadingMethod = \"background\" | \"page\" | \"screen\"\n\nexport type LoadingScheme =\n  | \"audio\"\n  | \"circles\"\n  | \"dots\"\n  | \"grid\"\n  | \"oval\"\n  | \"puff\"\n  | \"rings\"\n\nexport const initialProps: InitialProps<LoadingProps> = {\n  \"data-loading\": \"\",\n}\n\nexport const superProps = ({\n  css,\n  duration,\n  dur = duration,\n  ...rest\n}: WithoutThemeProps<LoadingProps, LoadingStyle>): WithoutThemeProps<\n  LoadingProps,\n  LoadingStyle\n> => ({\n  css,\n  dur,\n  ...rest,\n})\n\nexport interface LoadingProps\n  extends WithoutThemeProps<IconProps>,\n    ThemeProps<LoadingStyle> {\n  /**\n   * The CSS `dur` property.\n   */\n  duration?: IconProps[\"dur\"]\n  /**\n   * The CSS `color` property.\n   */\n  secondaryColor?: CSSProps[\"color\"]\n}\n\nconst {\n  PropsContext: LoadingPropsContext,\n  usePropsContext: useLoadingPropsContext,\n  withContext,\n} = createComponent<LoadingProps, LoadingStyle>(\"loading\", loadingStyle)\n\nexport { LoadingPropsContext, useLoadingPropsContext, withContext }\n"
    },
    {
      "name": "namespace.ts",
      "content": "export { Audio } from \"./audio\"\nexport type { AudioProps } from \"./audio\"\nexport { Circles } from \"./circles\"\nexport type { CirclesProps } from \"./circles\"\nexport { Dots } from \"./dots\"\nexport type { DotsProps } from \"./dots\"\nexport { Grid } from \"./grid\"\nexport type { GridProps } from \"./grid\"\nexport type { LoadingProps as Props, LoadingScheme as Scheme } from \"./loading\"\nexport { Oval } from \"./oval\"\nexport type { OvalProps } from \"./oval\"\nexport { Puff } from \"./puff\"\nexport type { PuffProps } from \"./puff\"\nexport { Rings } from \"./rings\"\nexport type { RingsProps } from \"./rings\"\n"
    },
    {
      "name": "oval.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, varAttr } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface OvalProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Oval = withContext<\"svg\", OvalProps>(\n  ({ dur = \"1s\", secondaryColor, ...rest }) => {\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 38 38\" {...rest}>\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g strokeWidth=\"2\" transform=\"translate(1 1)\">\n            <styled.circle\n              {...(secondaryColor\n                ? { stroke: \"{secondary-color}\" }\n                : { strokeOpacity: \".5\" })}\n              cx=\"18\"\n              cy=\"18\"\n              r=\"18\"\n            />\n            <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n              <animateTransform\n                type=\"rotate\"\n                attributeName=\"transform\"\n                dur={dur}\n                from=\"0 18 18\"\n                repeatCount=\"indefinite\"\n                to=\"360 18 18\"\n              />\n            </path>\n          </g>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, ({ secondaryColor, ...props }) => {\n  const rest = superProps(props)\n\n  return {\n    \"--secondary-color\": varAttr(secondaryColor, \"colors\"),\n    secondaryColor,\n    ...rest,\n  }\n})\n"
    },
    {
      "name": "page.tsx",
      "content": "import type { Variants } from \"motion/react\"\nimport type { FC } from \"react\"\nimport type { LoadingSharedProps } from \"./loading-provider\"\nimport { memo } from \"react\"\nimport { useTimeout } from \"../../hooks/use-timeout\"\nimport { isValidElement } from \"@yamada-ui/react\"\nimport { motion } from \"../motion\"\nimport { Text } from \"../text\"\nimport { Loading } from \"./\"\n\nconst variants: { [key: string]: Variants } = {\n  overlay: {\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 0.2, 1],\n      },\n    },\n    exit: {\n      opacity: 0,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 1, 1],\n      },\n    },\n    initial: {\n      opacity: 0,\n    },\n  },\n  panel: {\n    animate: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 0.2, 1],\n      },\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.95,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 1, 1],\n      },\n    },\n    initial: {\n      opacity: 0,\n      scale: 0.95,\n    },\n  },\n}\n\nexport interface PageProps extends LoadingSharedProps {}\n\nexport const Page: FC<PageProps> = memo(\n  ({ duration, initial, message, onFinish }) => {\n    useTimeout(onFinish, duration)\n\n    return (\n      <motion.div\n        data-loading\n        alignItems=\"center\"\n        animate=\"animate\"\n        bg=\"bg.overlay\"\n        display=\"flex\"\n        exit=\"exit\"\n        h=\"100dvh\"\n        initial={initial}\n        inset={0}\n        justifyContent=\"center\"\n        p=\"md\"\n        position=\"fixed\"\n        variants={variants.overlay}\n        w=\"100vw\"\n        zIndex=\"beerus\"\n      >\n        <motion.div\n          alignItems=\"center\"\n          animate=\"animate\"\n          bg=\"bg.panel\"\n          boxShadow=\"lg\"\n          display=\"flex\"\n          exit=\"exit\"\n          flexDirection=\"column\"\n          gap=\"sm\"\n          initial={initial}\n          justifyContent=\"center\"\n          maxW=\"24rem\"\n          p=\"md\"\n          rounded=\"l2\"\n          variants={variants.panel}\n        >\n          <Loading.Oval fontSize=\"6xl\" />\n\n          {message ? (\n            isValidElement(message) ? (\n              message\n            ) : (\n              <Text lineClamp={3}>{message}</Text>\n            )\n          ) : null}\n        </motion.div>\n      </motion.div>\n    )\n  },\n)\n\nPage.displayName = \"Page\"\n"
    },
    {
      "name": "puff.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface PuffProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Puff = withContext<\"svg\", PuffProps>(\n  ({ dur = \"1.8s\", ...rest }) => {\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 44 44\" {...rest}>\n        <g fill=\"none\" fillRule=\"evenodd\" strokeWidth=\"2\">\n          <circle cx=\"22\" cy=\"22\" r=\"1\">\n            <animate\n              attributeName=\"r\"\n              begin=\"0s\"\n              calcMode=\"spline\"\n              dur={dur}\n              keySplines=\"0.165, 0.84, 0.44, 1\"\n              keyTimes=\"0; 1\"\n              repeatCount=\"indefinite\"\n              values=\"1; 20\"\n            />\n            <animate\n              attributeName=\"stroke-opacity\"\n              begin=\"0s\"\n              calcMode=\"spline\"\n              dur={dur}\n              keySplines=\"0.3, 0.61, 0.355, 1\"\n              keyTimes=\"0; 1\"\n              repeatCount=\"indefinite\"\n              values=\"1; 0\"\n            />\n          </circle>\n          <circle cx=\"22\" cy=\"22\" r=\"1\">\n            <animate\n              attributeName=\"r\"\n              begin=\"-0.9s\"\n              calcMode=\"spline\"\n              dur={dur}\n              keySplines=\"0.165, 0.84, 0.44, 1\"\n              keyTimes=\"0; 1\"\n              repeatCount=\"indefinite\"\n              values=\"1; 20\"\n            />\n            <animate\n              attributeName=\"stroke-opacity\"\n              begin=\"-0.9s\"\n              calcMode=\"spline\"\n              dur={dur}\n              keySplines=\"0.3, 0.61, 0.355, 1\"\n              keyTimes=\"0; 1\"\n              repeatCount=\"indefinite\"\n              values=\"1; 0\"\n            />\n          </circle>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "rings.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface RingsProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/components/feedback/loading\n */\nexport const Rings = withContext<\"svg\", RingsProps>(\n  ({ dur = \"3s\", ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 45 45\" {...rest}>\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          strokeWidth=\"2\"\n          transform=\"translate(1 1)\"\n        >\n          <circle cx=\"22\" cy=\"22\" r=\"6\" strokeOpacity=\"0\">\n            <animate\n              attributeName=\"r\"\n              begin=\"1.5s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"6;22\"\n            />\n            <animate\n              attributeName=\"stroke-opacity\"\n              begin=\"1.5s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"1;0\"\n            />\n            <animate\n              attributeName=\"stroke-width\"\n              begin=\"1.5s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"2;0\"\n            />\n          </circle>\n          <circle cx=\"22\" cy=\"22\" r=\"6\" strokeOpacity=\"0\">\n            <animate\n              attributeName=\"r\"\n              begin=\"3s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"6;22\"\n            />\n            <animate\n              attributeName=\"stroke-opacity\"\n              begin=\"3s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"1;0\"\n            />\n            <animate\n              attributeName=\"stroke-width\"\n              begin=\"3s\"\n              calcMode=\"linear\"\n              dur={`${dur}s`}\n              repeatCount=\"indefinite\"\n              values=\"2;0\"\n            />\n          </circle>\n          <circle cx=\"22\" cy=\"22\" r=\"8\">\n            <animate\n              attributeName=\"r\"\n              begin=\"0s\"\n              calcMode=\"linear\"\n              dur={`${dur / 2}s`}\n              repeatCount=\"indefinite\"\n              values=\"6;1;2;3;4;5;6\"\n            />\n          </circle>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "screen.tsx",
      "content": "import type { Variants } from \"motion/react\"\nimport type { FC } from \"react\"\nimport type { LoadingSharedProps } from \"./loading-provider\"\nimport { memo } from \"react\"\nimport { useTimeout } from \"../../hooks/use-timeout\"\nimport { isValidElement } from \"@yamada-ui/react\"\nimport { Center } from \"../center\"\nimport { motion } from \"../motion\"\nimport { Text } from \"../text\"\nimport { Loading } from \"./\"\n\nconst variants: Variants = {\n  animate: {\n    opacity: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  initial: {\n    opacity: 0,\n  },\n}\n\nexport interface ScreenProps extends LoadingSharedProps {}\n\nexport const Screen: FC<ScreenProps> = memo(\n  ({ duration, initial, message, onFinish }) => {\n    useTimeout(onFinish, duration)\n\n    return (\n      <motion.div\n        data-loading\n        alignItems=\"center\"\n        animate=\"animate\"\n        bg=\"bg\"\n        display=\"flex\"\n        exit=\"exit\"\n        h=\"100dvh\"\n        initial={initial}\n        inset={0}\n        justifyContent=\"center\"\n        p=\"md\"\n        position=\"fixed\"\n        variants={variants}\n        w=\"100vw\"\n        zIndex=\"beerus\"\n      >\n        <Center flexDirection=\"column\" gap=\"sm\" maxW=\"24rem\">\n          <Loading.Oval fontSize=\"6xl\" />\n\n          {message ? (\n            isValidElement(message) ? (\n              message\n            ) : (\n              <Text lineClamp={3}>{message}</Text>\n            )\n          ) : null}\n        </Center>\n      </motion.div>\n    )\n  },\n)\n\nScreen.displayName = \"Screen\"\n"
    },
    {
      "name": "use-loading-component.ts",
      "content": "import type { Component } from \"@yamada-ui/react\"\nimport { useMemo } from \"react\"\nimport { isString, toPascalCase } from \"@yamada-ui/react\"\nimport { Loading } from \"./\"\n\nexport const useLoadingComponent = (\n  scheme: Loading.Scheme,\n): Component<\"svg\", Loading.Props> => {\n  const Component = useMemo(\n    () =>\n      Loading[toPascalCase(scheme) as keyof typeof Loading] as Component<\n        \"svg\",\n        Loading.Props\n      >,\n    [scheme],\n  )\n\n  return Component\n}\n\nexport const getLoadingComponent = (\n  scheme: Loading.Scheme,\n): Component<\"svg\", Loading.Props> => {\n  return Loading[toPascalCase(scheme) as keyof typeof Loading]\n}\n\nexport const isLoadingScheme = (scheme: any): scheme is Loading.Scheme => {\n  return isString(scheme) && toPascalCase(scheme) in Loading\n}\n"
    }
  ]
}
