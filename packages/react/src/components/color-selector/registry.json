{
  "$schema": "https://yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [
      "native-select",
      "color-swatch",
      "alpha-slider",
      "hue-slider",
      "icon",
      "saturation-slider",
      "slider"
    ],
    "externals": [],
    "hooks": ["use-controllable-state", "use-eye-dropper"],
    "providers": ["i18n-provider"]
  },
  "dependents": {
    "components": ["color-picker"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "color-selector.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { nativeSelectStyle } from \"../native-select\"\n\nexport const colorSelectorStyle = defineComponentSlotStyle({\n  base: {\n    alphaSlider: {},\n    colorSwatchGroup: {\n      display: \"grid\",\n      gap: \"1.5\",\n      gridTemplateColumns: \"repeat({color-swatch-group-columns}, 1fr)\",\n    },\n    colorSwatchGroupLabel: {\n      fontSize: \"sm\",\n      fontWeight: \"medium\",\n      _disabled: { layerStyle: \"disabled\" },\n    },\n    colorSwatchItem: { w: \"full\", _disabled: { layerStyle: \"disabled\" } },\n    eyeDropper: nativeSelectStyle.base?.icon,\n    hueSlider: {},\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1.5\",\n      maxW: \"full\",\n      w: \"full\",\n    },\n    saturationSlider: {},\n  },\n\n  props: {\n    /**\n     * The shape of the thumb and color swatch.\n     *\n     * @default 'circle'\n     */\n    shape: {\n      circle: {},\n      rounded: {},\n      square: { colorSwatchItem: { rounded: \"0\" } },\n    },\n  },\n\n  sizes: {\n    xs: {},\n    sm: {},\n    md: {},\n    lg: {},\n    xl: {},\n  },\n\n  defaultProps: {\n    size: \"md\",\n  },\n})\n\nexport type ColorSelectorStyle = typeof colorSelectorStyle\n"
    },
    {
      "name": "color-selector.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type {\n  HTMLStyledProps,\n  StyleValue,\n  ThemeProps,\n  Merge,\n} from \"@yamada-ui/react\"\nimport type { ColorSwatchProps } from \"../color-swatch\"\nimport type { ColorSelectorStyle } from \"./color-selector.style\"\nimport type {\n  UseColorSelectorProps,\n  UseColorSelectorReturn,\n} from \"./use-color-selector\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled, varAttr } from \"@yamada-ui/react\"\nimport { AlphaSlider } from \"../alpha-slider\"\nimport { ColorSwatch } from \"../color-swatch\"\nimport { HueSlider } from \"../hue-slider\"\nimport { PipetteIcon } from \"../icon\"\nimport { SaturationSlider } from \"../saturation-slider\"\nimport { colorSelectorStyle } from \"./color-selector.style\"\nimport { useColorSelector } from \"./use-color-selector\"\n\ninterface ComponentContext\n  extends Pick<\n      ColorSelectorRootProps,\n      | \"alphaSliderProps\"\n      | \"colorSwatches\"\n      | \"colorSwatchGroupLabelProps\"\n      | \"colorSwatchGroupProps\"\n      | \"colorSwatchItemProps\"\n      | \"hueSliderProps\"\n      | \"saturationSliderProps\"\n      | \"shape\"\n      | \"size\"\n    >,\n    Pick<\n      UseColorSelectorReturn,\n      | \"alpha\"\n      | \"getAlphaSliderProps\"\n      | \"getColorSwatchGroupLabelProps\"\n      | \"getColorSwatchGroupProps\"\n      | \"getColorSwatchItemProps\"\n      | \"getEyeDropperProps\"\n      | \"getHueSliderProps\"\n      | \"getSaturationSliderProps\"\n    > {}\n\nexport interface ColorSelectorRootProps\n  extends Merge<HTMLStyledProps, UseColorSelectorProps>,\n    ThemeProps<ColorSelectorStyle> {\n  /**\n   * An array of colors in one of the supported formats.\n   * Used to render swatches list below the color selector.\n   */\n  colorSwatches?: string[]\n  /**\n   * The number of columns in the color swatch group.\n   *\n   * @default 8\n   */\n  colorSwatchGroupColumns?: StyleValue<number>\n  /**\n   * The label of the color swatch group.\n   */\n  colorSwatchGroupLabel?: ReactNode\n  /**\n   * If `true`, the alpha slider will be displayed.\n   *\n   * @default false\n   */\n  withAlpha?: boolean\n  /**\n   * Props for the alpha slider.\n   */\n  alphaSliderProps?: ColorSelectorAlphaSliderProps\n  /**\n   * Props for the color swatch group label.\n   */\n  colorSwatchGroupLabelProps?: ColorSelectorColorSwatchGroupLabelProps\n  /**\n   * Props for the color swatch group.\n   */\n  colorSwatchGroupProps?: ColorSelectorColorSwatchGroupProps\n  /**\n   * Props for the color swatch item.\n   */\n  colorSwatchItemProps?: Omit<ColorSelectorColorSwatchItemProps, \"value\">\n  /**\n   * Props for the hue slider.\n   */\n  hueSliderProps?: ColorSelectorHueSliderProps\n  /**\n   * Props for the saturation slider.\n   */\n  saturationSliderProps?: ColorSelectorSaturationSliderProps\n}\n\nconst {\n  ComponentContext,\n  PropsContext: ColorSelectorPropsContext,\n  useComponentContext,\n  usePropsContext: useColorSelectorPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<\n  ColorSelectorRootProps,\n  ColorSelectorStyle,\n  ComponentContext\n>(\"color-selector\", colorSelectorStyle)\n\nexport { ColorSelectorPropsContext, useColorSelectorPropsContext }\n\n/**\n * `ColorSelector` is a component used by the user to select a color.\n *\n * @see https://yamada-ui.com/docs/components/color-selector\n */\nexport const ColorSelectorRoot = withProvider<\n  \"div\",\n  ColorSelectorRootProps,\n  \"shape\" | \"size\"\n>(\n  ({\n    size,\n    children,\n    colorSwatches,\n    colorSwatchGroupLabel,\n    shape,\n    withAlpha,\n    alphaSliderProps,\n    colorSwatchGroupLabelProps,\n    colorSwatchGroupProps,\n    colorSwatchItemProps,\n    hueSliderProps,\n    saturationSliderProps,\n    ...rest\n  }) => {\n    const {\n      alpha,\n      getAlphaSliderProps,\n      getColorSwatchGroupLabelProps,\n      getColorSwatchGroupProps,\n      getColorSwatchItemProps,\n      getEyeDropperProps,\n      getHueSliderProps,\n      getRootProps,\n      getSaturationSliderProps,\n    } = useColorSelector(rest)\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return (\n        <>\n          <ColorSelectorSaturationSlider />\n          <ColorSelectorHueSlider />\n          <ColorSelectorAlphaSlider />\n\n          {colorSwatchGroupLabel ? (\n            <ColorSelectorColorSwatchGroupLabel>\n              {colorSwatchGroupLabel}\n            </ColorSelectorColorSwatchGroupLabel>\n          ) : null}\n          {colorSwatches ? <ColorSelectorColorSwatchGroup /> : null}\n        </>\n      )\n    }, [children, colorSwatchGroupLabel, colorSwatches])\n    const context = useMemo(\n      () => ({\n        size,\n        alpha: withAlpha ?? alpha,\n        colorSwatches,\n        colorSwatchGroupLabel,\n        shape,\n        alphaSliderProps,\n        colorSwatchGroupLabelProps,\n        colorSwatchGroupProps,\n        colorSwatchItemProps,\n        getAlphaSliderProps,\n        getColorSwatchGroupLabelProps,\n        getColorSwatchGroupProps,\n        getColorSwatchItemProps,\n        getEyeDropperProps,\n        getHueSliderProps,\n        getSaturationSliderProps,\n        hueSliderProps,\n        saturationSliderProps,\n      }),\n      [\n        size,\n        withAlpha,\n        alpha,\n        shape,\n        colorSwatches,\n        colorSwatchGroupLabel,\n        alphaSliderProps,\n        getAlphaSliderProps,\n        getEyeDropperProps,\n        getHueSliderProps,\n        getSaturationSliderProps,\n        getColorSwatchGroupLabelProps,\n        getColorSwatchGroupProps,\n        getColorSwatchItemProps,\n        hueSliderProps,\n        saturationSliderProps,\n        colorSwatchGroupLabelProps,\n        colorSwatchGroupProps,\n        colorSwatchItemProps,\n      ],\n    )\n\n    return (\n      <ComponentContext value={context}>\n        <styled.div {...getRootProps()}>{computedChildren}</styled.div>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n  { transferProps: [\"size\", \"shape\"] },\n)(undefined, ({ colorSwatchGroupColumns = 8, ...rest }) => ({\n  \"--color-swatch-group-columns\": varAttr(colorSwatchGroupColumns),\n  ...rest,\n}))\n\nexport interface ColorSelectorSaturationSliderProps\n  extends SaturationSlider.RootProps {}\n\nexport const ColorSelectorSaturationSlider = withContext<\n  \"input\",\n  ColorSelectorSaturationSliderProps\n>((props) => {\n  const { size, shape, getSaturationSliderProps, saturationSliderProps } =\n    useComponentContext()\n\n  return (\n    <SaturationSlider.Root\n      size={size}\n      shape={shape}\n      {...getSaturationSliderProps({ ...saturationSliderProps, ...props })}\n    />\n  )\n}, \"saturationSlider\")()\n\nexport interface ColorSelectorHueSliderProps extends HueSlider.RootProps {}\n\nexport const ColorSelectorHueSlider = withContext<\n  \"input\",\n  ColorSelectorHueSliderProps\n>((props) => {\n  const { size, shape, getHueSliderProps, hueSliderProps } =\n    useComponentContext()\n\n  return (\n    <HueSlider.Root\n      size={size}\n      shape={shape}\n      {...getHueSliderProps({ ...hueSliderProps, ...props })}\n    />\n  )\n}, \"hueSlider\")()\n\nexport interface ColorSelectorAlphaSliderProps\n  extends Partial<AlphaSlider.RootProps> {}\n\nexport const ColorSelectorAlphaSlider = withContext<\n  \"input\",\n  ColorSelectorAlphaSliderProps\n>((props) => {\n  const { size, alpha, shape, alphaSliderProps, getAlphaSliderProps } =\n    useComponentContext()\n\n  if (!alpha) return null\n\n  return (\n    <AlphaSlider.Root\n      size={size}\n      shape={shape}\n      {...getAlphaSliderProps({ ...alphaSliderProps, ...props })}\n    />\n  )\n}, \"alphaSlider\")()\n\nexport interface ColorSelectorEyeDropperProps extends HTMLStyledProps {\n  /**\n   * The icon to display in the eye dropper.\n   */\n  icon?: ReactNode\n}\n\nexport const ColorSelectorEyeDropper = withContext<\n  \"div\",\n  ColorSelectorEyeDropperProps\n>(\"div\", \"eyeDropper\")(undefined, ({ children, icon, ...rest }) => {\n  const { getEyeDropperProps } = useComponentContext()\n\n  return getEyeDropperProps({\n    children: icon || children || <PipetteIcon />,\n    ...rest,\n  })\n})\n\nexport interface ColorSelectorColorSwatchGroupLabelProps\n  extends HTMLStyledProps<\"span\"> {}\n\nexport const ColorSelectorColorSwatchGroupLabel = withContext<\n  \"span\",\n  ColorSelectorColorSwatchGroupLabelProps\n>(\"span\", \"colorSwatchGroupLabel\")(undefined, (props) => {\n  const { colorSwatchGroupLabelProps, getColorSwatchGroupLabelProps } =\n    useComponentContext()\n\n  return getColorSwatchGroupLabelProps({\n    ...colorSwatchGroupLabelProps,\n    ...props,\n  })\n})\n\nexport interface ColorSelectorColorSwatchGroupProps extends HTMLStyledProps {}\n\nexport const ColorSelectorColorSwatchGroup = withContext<\n  \"div\",\n  ColorSelectorColorSwatchGroupProps\n>(\"div\", \"colorSwatchGroup\")(undefined, ({ children, ...rest }) => {\n  const { colorSwatches, colorSwatchGroupProps, getColorSwatchGroupProps } =\n    useComponentContext()\n\n  return getColorSwatchGroupProps({\n    children:\n      children ??\n      colorSwatchGroupProps?.children ??\n      colorSwatches?.map((value, index) => (\n        <ColorSelectorColorSwatchItem key={index} value={value} />\n      )),\n    ...colorSwatchGroupProps,\n    ...rest,\n  })\n})\n\nexport interface ColorSelectorColorSwatchItemProps\n  extends Omit<ColorSwatchProps, \"color\"> {\n  /**\n   * The value of the color swatch.\n   */\n  value: string\n}\n\nexport const ColorSelectorColorSwatchItem = withContext<\n  \"div\",\n  ColorSelectorColorSwatchItemProps\n>(ColorSwatch, \"colorSwatchItem\")(undefined, (props) => {\n  const { colorSwatchItemProps, getColorSwatchItemProps } =\n    useComponentContext()\n\n  return getColorSwatchItemProps({ ...colorSwatchItemProps, ...props })\n})\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./color-selector.style\"\nexport {\n  ColorSelectorAlphaSlider,\n  ColorSelectorColorSwatchGroup,\n  ColorSelectorColorSwatchGroupLabel,\n  ColorSelectorColorSwatchItem,\n  ColorSelectorEyeDropper,\n  ColorSelectorHueSlider,\n  ColorSelectorPropsContext,\n  ColorSelectorRoot,\n  ColorSelectorSaturationSlider,\n  useColorSelectorPropsContext,\n} from \"./color-selector\"\nexport type {\n  ColorSelectorAlphaSliderProps,\n  ColorSelectorColorSwatchGroupLabelProps,\n  ColorSelectorColorSwatchGroupProps,\n  ColorSelectorColorSwatchItemProps,\n  ColorSelectorEyeDropperProps,\n  ColorSelectorHueSliderProps,\n  ColorSelectorRootProps,\n  ColorSelectorSaturationSliderProps,\n} from \"./color-selector\"\nexport * as ColorSelector from \"./namespace\"\nexport * from \"./use-color-selector\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  ColorSelectorAlphaSlider as AlphaSlider,\n  ColorSelectorColorSwatchGroup as ColorSwatchGroup,\n  ColorSelectorColorSwatchGroupLabel as ColorSwatchGroupLabel,\n  ColorSelectorColorSwatchItem as ColorSwatchItem,\n  ColorSelectorEyeDropper as EyeDropper,\n  ColorSelectorHueSlider as HueSlider,\n  ColorSelectorPropsContext as PropsContext,\n  ColorSelectorRoot as Root,\n  ColorSelectorSaturationSlider as SaturationSlider,\n  useColorSelectorPropsContext as usePropsContext,\n} from \"./color-selector\"\nexport type {\n  ColorSelectorAlphaSliderProps as AlphaSliderProps,\n  ColorSelectorColorSwatchGroupLabelProps as ColorSwatchGroupLabelProps,\n  ColorSelectorColorSwatchGroupProps as ColorSwatchGroupProps,\n  ColorSelectorColorSwatchItemProps as ColorSwatchItemProps,\n  ColorSelectorEyeDropperProps as EyeDropperProps,\n  ColorSelectorHueSliderProps as HueSliderProps,\n  ColorSelectorRootProps as RootProps,\n  ColorSelectorSaturationSliderProps as SaturationSliderProps,\n} from \"./color-selector\"\n"
    },
    {
      "name": "use-color-selector.ts",
      "content": "\"use client\"\n\nimport type {\n  HTMLProps,\n  PropGetter,\n  RequiredPropGetter,\n  ColorFormat,\n} from \"@yamada-ui/react\"\nimport type { UseSaturationSliderProps } from \"../saturation-slider\"\nimport type { UseSliderProps } from \"../slider\"\nimport { useCallback, useId, useRef, useState } from \"react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport { useEyeDropper } from \"../../hooks/use-eye-dropper\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport {\n  ariaAttr,\n  calcFormat,\n  convertColor,\n  cx,\n  dataAttr,\n  handlerAll,\n  hsvTo,\n  isString,\n  parseToHsv,\n  runKeyAction,\n  sameColor,\n  useUpdateEffect,\n} from \"@yamada-ui/react\"\n\ntype Hsva = [number, number, number, number]\n\nexport interface UseColorSelectorProps extends Omit<HTMLProps, \"onChange\"> {\n  /**\n   * The initial value of the color selector.\n   *\n   * @default fallbackValue\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the color selector will be disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * The fallback value of the color selector.\n   *\n   * @default '#FFFFFF'\n   */\n  fallbackValue?: string\n  /**\n   * The format of the color selector.\n   * Automatically determines the format of `value` or `defaultValue`.\n   *\n   * @default 'hex'\n   */\n  format?: ColorFormat\n  /**\n   * If `true`, the color selector will be read only.\n   *\n   * @default false\n   */\n  readOnly?: boolean\n  /**\n   * The value of the color selector.\n   */\n  value?: string\n  /**\n   * The callback invoked when the value changes.\n   */\n  onChange?: (value: string) => void\n  /**\n   * The callback invoked when the value changes ends.\n   */\n  onChangeEnd?: (value: string) => void\n  /**\n   * The callback invoked when the value changes starts.\n   */\n  onChangeStart?: (value: string) => void\n}\n\nexport const useColorSelector = ({\n  fallbackValue = \"#FFFFFF\",\n  defaultValue = fallbackValue,\n  disabled = false,\n  format: formatProp,\n  readOnly = false,\n  value: valueProp,\n  onChange: onChangeProp,\n  onChangeEnd: onChangeEndProp,\n  onChangeStart: onChangeStartProp,\n  ...rest\n}: UseColorSelectorProps) => {\n  const { t } = useI18n(\"colorSelector\")\n  const format = formatProp ?? calcFormat(valueProp ?? defaultValue)\n  const alpha = format.endsWith(\"a\")\n  const [value, setValue] = useControllableState({\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n  const [hsva, setHsva] = useState(parseToHsv(value, fallbackValue))\n  const [h, s, v, a] = hsva\n  const interactive = !(disabled || readOnly)\n  const swatchGroupLabelId = useId()\n  const activeRef = useRef(false)\n  const { supported: supportedEyeDropper, onOpen: onOpenEyeDropper } =\n    useEyeDropper()\n  const color = hsvTo([h, s, v, 1], fallbackValue)(\"hex\")\n\n  const onChange = useCallback(\n    (value: Hsva | string) => {\n      if (!interactive) return\n\n      if (isString(value)) {\n        setValue(convertColor(value, fallbackValue)(format))\n        setHsva(parseToHsv(value, fallbackValue))\n      } else {\n        setHsva(value)\n        setValue(hsvTo(value, fallbackValue)(format))\n      }\n    },\n    [fallbackValue, format, interactive, setValue],\n  )\n\n  const onChangeStart = useCallback(\n    ([h, s, v, a]: Hsva) => {\n      if (!interactive) return\n\n      activeRef.current = true\n\n      const value = hsvTo([h, s, v, a], fallbackValue)(format)\n\n      onChangeStartProp?.(value)\n    },\n    [interactive, fallbackValue, format, onChangeStartProp],\n  )\n\n  const onChangeEnd = useCallback(\n    ([h, s, v, a]: Hsva) => {\n      if (!interactive) return\n\n      activeRef.current = false\n\n      const value = hsvTo([h, s, v, a], fallbackValue)(format)\n\n      onChangeEndProp?.(value)\n    },\n    [interactive, fallbackValue, format, onChangeEndProp],\n  )\n\n  const onEyeDropperClick = useCallback(async () => {\n    if (!interactive) return\n\n    const result = await onOpenEyeDropper()\n\n    if (result?.sRGBHex) onChange(result.sRGBHex)\n  }, [interactive, onChange, onOpenEyeDropper])\n\n  useUpdateEffect(() => {\n    if (activeRef.current) return\n\n    if (valueProp) setHsva(parseToHsv(valueProp, fallbackValue))\n  }, [valueProp])\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"data-disabled\": dataAttr(disabled),\n      \"data-readonly\": dataAttr(readOnly),\n      ...rest,\n      ...props,\n    }),\n    [disabled, readOnly, rest],\n  )\n\n  const getSaturationSliderProps: PropGetter<UseSaturationSliderProps> =\n    useCallback(\n      (props = {}) => ({\n        disabled,\n        readOnly,\n        value: [h, s, v],\n        ...props,\n        onChange: handlerAll(props.onChange, ([h, s, v]) =>\n          onChange([h, s, v, a]),\n        ),\n        onChangeEnd: handlerAll(props.onChangeEnd, ([h, s, v]) =>\n          onChangeEnd([h, s, v, a]),\n        ),\n        onChangeStart: handlerAll(props.onChangeStart, ([h, s, v]) =>\n          onChangeStart([h, s, v, a]),\n        ),\n      }),\n      [disabled, readOnly, h, s, v, onChange, a, onChangeEnd, onChangeStart],\n    )\n\n  const getHueSliderProps: PropGetter<\n    Omit<UseSliderProps, \"betweenThumbs\" | \"orientation\">\n  > = useCallback(\n    (props = {}) => ({\n      disabled,\n      readOnly,\n      value: h,\n      ...props,\n      onChange: handlerAll(props.onChange, (h) => onChange([h, s, v, a])),\n      onChangeEnd: handlerAll(props.onChangeEnd, (h) =>\n        onChangeEnd([h, s, v, a]),\n      ),\n      onChangeStart: handlerAll(props.onChangeStart, (h) =>\n        onChangeStart([h, s, v, a]),\n      ),\n    }),\n    [disabled, readOnly, h, onChange, s, v, a, onChangeEnd, onChangeStart],\n  )\n\n  const getAlphaSliderProps: PropGetter<\n    Omit<UseSliderProps, \"betweenThumbs\" | \"orientation\">,\n    undefined,\n    Omit<UseSliderProps, \"betweenThumbs\" | \"orientation\"> & { color: string }\n  > = useCallback(\n    (props = {}) => ({\n      color,\n      disabled,\n      readOnly,\n      value: a,\n      ...props,\n      onChange: handlerAll(props.onChange, (a) => onChange([h, s, v, a])),\n      onChangeEnd: handlerAll(props.onChangeEnd, (a) =>\n        onChangeEnd([h, s, v, a]),\n      ),\n      onChangeStart: handlerAll(props.onChangeStart, (a) =>\n        onChangeStart([h, s, v, a]),\n      ),\n    }),\n    [\n      color,\n      disabled,\n      readOnly,\n      a,\n      onChange,\n      h,\n      s,\n      v,\n      onChangeEnd,\n      onChangeStart,\n    ],\n  )\n\n  const getEyeDropperProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"aria-disabled\": ariaAttr(!interactive),\n      \"aria-label\": t(\"Pick a color\"),\n      \"data-disabled\": dataAttr(disabled),\n      \"data-readonly\": dataAttr(readOnly),\n      hidden: !supportedEyeDropper,\n      role: \"button\",\n      tabIndex: interactive ? 0 : -1,\n      ...props,\n      onClick: handlerAll(props.onClick, onEyeDropperClick),\n      onKeyDown: handlerAll(props.onKeyDown, (ev) =>\n        runKeyAction(ev, {\n          Enter: onEyeDropperClick,\n          Space: onEyeDropperClick,\n        }),\n      ),\n    }),\n    [\n      disabled,\n      interactive,\n      onEyeDropperClick,\n      readOnly,\n      supportedEyeDropper,\n      t,\n    ],\n  )\n\n  const getColorSwatchGroupLabelProps: PropGetter<\"span\"> = useCallback(\n    (props) => ({\n      id: swatchGroupLabelId,\n      \"data-disabled\": dataAttr(disabled),\n      \"data-readonly\": dataAttr(readOnly),\n      ...props,\n    }),\n    [swatchGroupLabelId, disabled, readOnly],\n  )\n\n  const getColorSwatchGroupProps: PropGetter = useCallback(\n    ({ \"aria-labelledby\": ariaLabelledby, ...props } = {}) => ({\n      \"aria-labelledby\": cx(ariaLabelledby, swatchGroupLabelId),\n      \"data-disabled\": dataAttr(disabled),\n      \"data-readonly\": dataAttr(readOnly),\n      role: \"listbox\",\n      ...props,\n    }),\n    [swatchGroupLabelId, disabled, readOnly],\n  )\n\n  const getColorSwatchItemProps: RequiredPropGetter<\n    \"div\",\n    { value: string },\n    HTMLProps & { color: string }\n  > = useCallback(\n    ({ value, ...props }) => ({\n      \"aria-disabled\": ariaAttr(!interactive),\n      \"aria-selected\": sameColor(value, color),\n      \"data-disabled\": dataAttr(disabled),\n      \"data-readonly\": dataAttr(readOnly),\n      role: \"option\",\n      tabIndex: interactive ? 0 : -1,\n      ...props,\n      color: value,\n      onClick: handlerAll(props.onClick, () => onChange(value)),\n      onKeyDown: handlerAll(props.onKeyDown, (ev) =>\n        runKeyAction(ev, {\n          Enter: () => onChange(value),\n          Space: () => onChange(value),\n        }),\n      ),\n    }),\n    [disabled, color, interactive, onChange, readOnly],\n  )\n\n  return {\n    alpha,\n    format,\n    setValue,\n    value,\n    getAlphaSliderProps,\n    getColorSwatchGroupLabelProps,\n    getColorSwatchGroupProps,\n    getColorSwatchItemProps,\n    getEyeDropperProps,\n    getHueSliderProps,\n    getRootProps,\n    getSaturationSliderProps,\n    onChange,\n  }\n}\n\nexport type UseColorSelectorReturn = ReturnType<typeof useColorSelector>\n"
    }
  ]
}
