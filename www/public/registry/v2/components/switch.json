{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["field"],
    "externals": [],
    "hooks": ["use-controllable-state"],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./switch.style\"\nexport { Switch, SwitchPropsContext, useSwitchPropsContext } from \"./switch\"\nexport type { SwitchProps } from \"./switch\"\nexport * from \"./use-switch\"\n"
    },
    {
      "name": "switch.style.ts",
      "content": "import { defineComponentSlotStyle, focusRingStyle } from \"@yamada-ui/react\"\n\nexport const switchStyle = defineComponentSlotStyle({\n  base: {\n    label: {\n      userSelect: \"none\",\n    },\n    root: {\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      display: \"inline-flex\",\n      gap: \"2\",\n      _readOnly: {\n        layerStyle: \"readOnly\",\n        pointerEvents: \"none\",\n      },\n      _disabled: {\n        layerStyle: \"disabled\",\n      },\n    },\n    thumb: {\n      alignItems: \"center\",\n      bg: \"white\",\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      position: \"absolute\",\n      rounded: \"inherit\",\n      transitionDuration: \"fast\",\n      transitionProperty: \"background, transform\",\n      _checked: {\n        transform: \"translateX(100%)\",\n      },\n    },\n    track: {\n      \"--focus-ring-color\": \"{colorScheme.outline}\",\n      alignItems: \"center\",\n      bg: \"bg.muted\",\n      boxSizing: \"content-box\",\n      display: \"inline-flex\",\n      flexShrink: 0,\n      position: \"relative\",\n      rounded: \"full\",\n      transitionDuration: \"fast\",\n      transitionProperty: \"background\",\n      _peerFocusVisible: {\n        ...focusRingStyle.outline,\n      },\n    },\n  },\n\n  variants: {\n    thin: {\n      thumb: {\n        boxShadow: \"2xl\",\n        _checked: {\n          bg: \"colorScheme.solid\",\n        },\n      },\n      track: {\n        \"--focus-ring-offset\": \"4px\",\n        _checked: {\n          bg: [\"colorScheme.muted\", \"colorScheme.subtle\"],\n        },\n      },\n    },\n    thick: {\n      thumb: {\n        _checked: {\n          bg: \"colorScheme.contrast\",\n        },\n      },\n      track: {\n        p: \"1\",\n        _checked: {\n          bg: \"colorScheme.solid\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      label: { fontSize: \"sm\" },\n      thumb: { boxSize: \"3\" },\n      track: { w: \"6\" },\n    },\n    md: {\n      label: { fontSize: \"md\" },\n      thumb: { boxSize: \"4\" },\n      track: { w: \"8\" },\n    },\n    lg: {\n      label: { fontSize: \"lg\" },\n      thumb: { boxSize: \"5\" },\n      track: { w: \"10\" },\n    },\n  },\n\n  props: {\n    /**\n     * Change switch label from right to left.\n     *\n     * @default false\n     */\n    reverse: {\n      false: {\n        root: { flexDirection: \"row\" },\n      },\n      true: {\n        root: { flexDirection: \"row-reverse\" },\n      },\n    },\n    /**\n     * The shape of the switch.\n     *\n     * @default circle\n     */\n    shape: {\n      circle: {\n        track: { rounded: \"full\" },\n      },\n      rounded: {\n        thumb: { rounded: \"l1\" },\n        track: { rounded: \"l2\" },\n      },\n      square: {\n        track: { rounded: \"0\" },\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        track: { h: \"3\" },\n      },\n      size: \"sm\",\n      variant: \"thick\",\n    },\n    {\n      css: {\n        track: { h: \"4\" },\n      },\n      size: \"md\",\n      variant: \"thick\",\n    },\n    {\n      css: {\n        track: { h: \"5\" },\n      },\n      size: \"lg\",\n      variant: \"thick\",\n    },\n    {\n      css: {\n        track: { h: \"2\" },\n      },\n      size: \"sm\",\n      variant: \"thin\",\n    },\n    {\n      css: {\n        track: { h: \"3\" },\n      },\n      size: \"md\",\n      variant: \"thin\",\n    },\n    {\n      css: {\n        track: { h: \"4\" },\n      },\n      size: \"lg\",\n      variant: \"thin\",\n    },\n  ],\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"thick\",\n    shape: \"circle\",\n  },\n})\n\nexport type SwitchStyle = typeof switchStyle\n"
    },
    {
      "name": "switch.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps, Merge } from \"@yamada-ui/react\"\nimport type { SwitchStyle } from \"./switch.style\"\nimport type { UseSwitchProps } from \"./use-switch\"\nimport { createSlotComponent, styled, isObject } from \"@yamada-ui/react\"\nimport { switchStyle } from \"./switch.style\"\nimport { useSwitch } from \"./use-switch\"\n\nexport interface SwitchProps\n  extends Merge<HTMLStyledProps<\"label\">, UseSwitchProps>,\n    ThemeProps<SwitchStyle> {\n  /**\n   * The switch icon to use.\n   */\n  icon?: ReactNode | { off: ReactNode; on: ReactNode }\n  /**\n   * Props for switch input element.\n   */\n  inputProps?: HTMLStyledProps<\"input\">\n  /**\n   * Props for switch label element.\n   */\n  labelProps?: HTMLStyledProps<\"span\">\n}\n\nconst {\n  PropsContext: SwitchPropsContext,\n  usePropsContext: useSwitchPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<SwitchProps, SwitchStyle>(\"switch\", switchStyle)\n\nexport { SwitchPropsContext, useSwitchPropsContext }\n\n/**\n * `Switch` is a component used to toggle between on and off states.\n *\n * @see https://yamada-ui.com/components/switch\n */\nexport const Switch = withProvider<\"input\", SwitchProps>(\n  ({ children, icon, inputProps, labelProps, ...props }) => {\n    const {\n      checked,\n      getInputProps,\n      getLabelProps,\n      getRootProps,\n      getThumbProps,\n      getTrackProps,\n    } = useSwitch(props)\n\n    return (\n      <styled.label {...getRootProps()}>\n        <styled.input data-peer {...getInputProps(inputProps)} />\n\n        <SwitchTrack {...getTrackProps()}>\n          <SwitchThumb {...getThumbProps()}>\n            {icon && isObject(icon) && \"on\" in icon\n              ? checked\n                ? icon.on\n                : icon.off\n              : icon}\n          </SwitchThumb>\n        </SwitchTrack>\n\n        {children ? (\n          <SwitchLabel {...getLabelProps(labelProps)}>{children}</SwitchLabel>\n        ) : null}\n      </styled.label>\n    )\n  },\n  \"root\",\n)()\n\ninterface SwitchThumbProps extends HTMLStyledProps {}\n\nconst SwitchThumb = withContext<\"div\", SwitchThumbProps>(\"div\", \"thumb\")()\n\ninterface SwitchTrackProps extends HTMLStyledProps {}\n\nconst SwitchTrack = withContext<\"div\", SwitchTrackProps>(\"div\", \"track\")()\n\ninterface SwitchLabelProps extends HTMLStyledProps<\"span\"> {}\n\nconst SwitchLabel = withContext<\"span\", SwitchLabelProps>(\"span\", \"label\")()\n"
    },
    {
      "name": "use-switch.ts",
      "content": "\"use client\"\n\nimport type {\n  ChangeEvent,\n  ChangeEventHandler,\n  FocusEventHandler,\n  KeyboardEvent,\n} from \"react\"\nimport type { HTMLProps, HTMLRefAttributes, PropGetter } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport { useCallback, useId, useRef } from \"react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport {\n  dataAttr,\n  handlerAll,\n  mergeRefs,\n  visuallyHiddenAttributes,\n} from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\n\nexport interface UseSwitchProps<Y extends number | string = string>\n  extends Omit<HTMLProps<\"label\">, \"onBlur\" | \"onChange\" | \"onFocus\" | \"ref\">,\n    HTMLRefAttributes<\"input\">,\n    FieldProps {\n  /**\n   * id assigned to input.\n   */\n  id?: string\n  /**\n   * The HTML `name` attribute used for forms.\n   */\n  name?: string\n  /**\n   * If `true`, the switch will be checked.\n   *\n   * @default false\n   */\n  checked?: boolean\n  /**\n   * If `true`, the switch will be checked when the Enter key is pressed.\n   *\n   * @default true\n   */\n  checkOnEnter?: boolean\n  /**\n   * If `true`, the switch will be initially checked.\n   *\n   * @default false\n   */\n  defaultChecked?: boolean\n  /**\n   * The tab-index property of the underlying input element.\n   */\n  tabIndex?: number\n  /**\n   * The value to be used in the switch input.\n   */\n  value?: Y\n  /**\n   * The callback invoked when the switch is blurred.\n   */\n  onBlur?: FocusEventHandler<HTMLInputElement>\n  /**\n   * The callback invoked when the checked state changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * The callback invoked when the switch is focused.\n   */\n  onFocus?: FocusEventHandler<HTMLInputElement>\n}\n\nexport const useSwitch = <Y extends number | string = string>(\n  props: UseSwitchProps<Y> = {},\n) => {\n  const uuid = useId()\n  const {\n    props: {\n      id = uuid,\n      ref,\n      name,\n      checked: checkedProp,\n      checkOnEnter = true,\n      defaultChecked = false,\n      disabled,\n      readOnly,\n      required,\n      value,\n      onChange: onChangeProp,\n      ...rest\n    },\n    ariaProps,\n    dataProps,\n    eventProps,\n  } = useFieldProps(props)\n  const interactive = !(readOnly || disabled)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [checked, setChecked] = useControllableState({\n    defaultValue: defaultChecked,\n    value: checkedProp,\n  })\n\n  const onChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!interactive) return ev.preventDefault()\n\n      setChecked(ev.target.checked)\n      onChangeProp?.(ev)\n    },\n    [onChangeProp, setChecked, interactive],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLInputElement>) => {\n      if (interactive && checkOnEnter && ev.key === \"Enter\")\n        inputRef.current?.click()\n    },\n    [interactive, checkOnEnter],\n  )\n\n  const getRootProps: PropGetter<\"label\"> = useCallback(\n    (props = {}) => ({\n      ...dataProps,\n      htmlFor: id,\n      \"data-checked\": dataAttr(checked),\n      ...rest,\n      ...props,\n    }),\n    [checked, rest, id, dataProps],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"data-checked\": dataAttr(checked),\n      ...dataProps,\n      ...props,\n    }),\n    [checked, dataProps],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"data-checked\": dataAttr(checked),\n      ...dataProps,\n      ...props,\n    }),\n    [checked, dataProps],\n  )\n\n  const getInputProps: PropGetter<\"input\"> = useCallback(\n    (props = {}) => ({\n      ...ariaProps,\n      ...dataProps,\n      id,\n      type: \"checkbox\",\n      name,\n      style: visuallyHiddenAttributes.style,\n      checked,\n      disabled,\n      readOnly,\n      required,\n      role: \"switch\",\n      tabIndex: interactive ? 0 : -1,\n      value,\n      ...props,\n      ref: mergeRefs(inputRef, props.ref, ref),\n      onBlur: handlerAll(eventProps.onBlur, props.onBlur),\n      onChange: handlerAll(props.onChange, onChange),\n      onFocus: handlerAll(eventProps.onFocus, props.onFocus),\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n    }),\n    [\n      ariaProps,\n      dataProps,\n      id,\n      name,\n      checked,\n      disabled,\n      readOnly,\n      required,\n      interactive,\n      value,\n      ref,\n      eventProps,\n      onChange,\n      onKeyDown,\n    ],\n  )\n\n  const getLabelProps: PropGetter<\"span\"> = useCallback(\n    (props = {}) => ({\n      ...dataProps,\n      \"data-checked\": dataAttr(checked),\n      ...props,\n    }),\n    [dataProps, checked],\n  )\n\n  return {\n    checked,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    getThumbProps,\n    getTrackProps,\n  }\n}\n\nexport type UseSwitchReturn = ReturnType<typeof useSwitch>\n"
    }
  ]
}
