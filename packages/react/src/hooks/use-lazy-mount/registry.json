{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": ["steps", "tabs"],
    "hooks": [],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport { useRef } from \"react\"\n\nexport type LazyBehavior = \"keepMounted\" | \"unmount\"\n\nexport interface UseLazyMountProps {\n  children?: ReactNode\n  /**\n   * If `true`, rendering of the content will be deferred until it is selected.\n   *\n   * @default false\n   */\n  lazy?: boolean\n  /**\n   * The lazy behavior of content when not active. Only works when `lazy={true}`.\n   *\n   * - `unmount`: The content is always unmounted.\n   * - `keepMounted`: The content is initially unmounted, but stays mounted when selected.\n   *\n   * @default 'unmount'\n   */\n  lazyBehavior?: LazyBehavior\n  /**\n   * If `true`, the content is mounted.\n   *\n   * @default false\n   */\n  mounted?: boolean\n}\n\n/**\n * `useLazyMount` is a custom hook for lazily mounting content.\n *\n * @see https://yamada-ui.com/hooks/use-lazy-mount\n */\nexport const useLazyMount = ({\n  children,\n  lazy,\n  lazyBehavior = \"unmount\",\n  mounted,\n}: UseLazyMountProps): ReactNode => {\n  const beforeMounted = useRef<boolean>(false)\n\n  if (!lazy) {\n    beforeMounted.current = false\n\n    return children\n  }\n\n  if (mounted) {\n    beforeMounted.current = true\n\n    return children\n  }\n\n  if (lazyBehavior === \"keepMounted\" && beforeMounted.current) return children\n\n  return null\n}\n"
    }
  ]
}
