{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["group", "input", "radio"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "card-namespace.ts",
      "content": "export {\n  RadioCardAddon as Addon,\n  RadioCardDescription as Description,\n  RadioCardLabel as Label,\n  RadioCardPropsContext as PropsContext,\n  RadioCardRoot as Root,\n  useRadioCardPropsContext as usePropsContext,\n} from \"./radio-card\"\nexport type {\n  RadioCardAddonProps as AddonProps,\n  RadioCardDescriptionProps as DescriptionProps,\n  RadioCardLabelProps as LabelProps,\n  RadioCardRootProps as RootProps,\n} from \"./radio-card\"\n"
    },
    {
      "name": "group-namespace.ts",
      "content": "export * as Item from \"./card-namespace\"\nexport { RadioCardGroupRoot as Root } from \"./radio-card-group\"\nexport type { RadioCardGroupRootProps as RootProps } from \"./radio-card-group\"\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./radio-card.style\"\nexport * as RadioCard from \"./card-namespace\"\nexport * as RadioCardGroup from \"./group-namespace\"\nexport {\n  RadioCardAddon,\n  RadioCardDescription,\n  RadioCardLabel,\n  RadioCardPropsContext,\n  RadioCardRoot,\n  useRadioCardPropsContext,\n} from \"./radio-card\"\nexport type {\n  RadioCardAddonProps,\n  RadioCardDescriptionProps,\n  RadioCardLabelProps,\n  RadioCardRootProps,\n} from \"./radio-card\"\nexport { RadioCardGroupRoot } from \"./radio-card-group\"\nexport type { RadioCardGroupRootProps } from \"./radio-card-group\"\n"
    },
    {
      "name": "radio-card-group.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement } from \"react\"\nimport type {\n  GenericsComponent,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { GroupProps } from \"../group\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { UseRadioGroupProps } from \"../radio\"\nimport type { RadioCardRootProps } from \"./radio-card\"\nimport type { RadioCardStyle } from \"./radio-card.style\"\nimport { useMemo } from \"react\"\nimport { Group } from \"../group\"\nimport { RadioGroupContext, useRadioGroup } from \"../radio\"\nimport {\n  component,\n  RadioCardPropsContext,\n  RadioCardRoot,\n  useRootComponentProps,\n} from \"./radio-card\"\n\nexport interface RadioCardItem<Y extends string = string>\n  extends RadioCardRootProps<Y> {}\n\nexport interface RadioCardGroupRootProps<Y extends string = string>\n  extends Omit<\n      WithoutThemeProps<GroupProps, RadioCardStyle>,\n      \"defaultValue\" | \"onChange\" | \"value\"\n    >,\n    ThemeProps<RadioCardStyle>,\n    UseRadioGroupProps<Y>,\n    UseInputBorderProps,\n    Pick<RadioCardRootProps, \"withIndicator\"> {\n  /**\n   * If provided, generate options based on items.\n   *\n   * @default '[]'\n   */\n  items?: RadioCardItem<Y>[]\n}\n\n/**\n * `RadioCardGroup` is a component that groups `RadioCard` components.\n *\n * @see https://yamada-ui.com/components/radio-card\n */\nexport const RadioCardGroupRoot = component<\"div\", RadioCardGroupRootProps>(\n  (props) => {\n    const [\n      ,\n      {\n        colorScheme,\n        size,\n        variant,\n        children,\n        disabled,\n        errorBorderColor,\n        focusBorderColor,\n        invalid,\n        items = [],\n        justify,\n        readOnly,\n        shape,\n        withIndicator,\n        ...rest\n      },\n    ] = useRootComponentProps(props, \"group\", {\n      transferProps: [\n        \"variant\",\n        \"colorScheme\",\n        \"size\",\n        \"shape\",\n        \"justify\",\n        \"withIndicator\",\n      ],\n    })\n    const {\n      name,\n      value,\n      getInputProps,\n      getLabelProps,\n      getRootProps,\n      onChange,\n    } = useRadioGroup(rest)\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return items.map(({ value, ...rest }, index) => (\n        <RadioCardRoot key={value ?? index} value={value} {...rest} />\n      ))\n    }, [items, children])\n    const context = useMemo(\n      () => ({\n        colorScheme,\n        size,\n        variant,\n        disabled,\n        errorBorderColor,\n        focusBorderColor,\n        invalid,\n        justify,\n        readOnly,\n        shape,\n        withIndicator,\n      }),\n      [\n        colorScheme,\n        size,\n        variant,\n        disabled,\n        justify,\n        withIndicator,\n        errorBorderColor,\n        focusBorderColor,\n        invalid,\n        readOnly,\n        shape,\n      ],\n    )\n    const groupContext = useMemo(\n      () => ({ name, value, getInputProps, getLabelProps, onChange }),\n      [name, value, getInputProps, getLabelProps, onChange],\n    )\n\n    return (\n      <RadioCardPropsContext value={context}>\n        <RadioGroupContext value={groupContext}>\n          <Group {...getRootProps()}>{computedChildren}</Group>\n        </RadioGroupContext>\n      </RadioCardPropsContext>\n    )\n  },\n  \"group\",\n)() as GenericsComponent<{\n  <Y extends string = string>(props: RadioCardGroupRootProps<Y>): ReactElement\n}>\n"
    },
    {
      "name": "radio-card.style.ts",
      "content": "import { defineComponentSlotStyle, focusRingStyle } from \"@yamada-ui/react\"\nimport { radioStyle } from \"../radio\"\n\nexport const radioCardStyle = defineComponentSlotStyle({\n  base: {\n    addon: {\n      borderColor: \"{--addon-border-color}\",\n      borderTopWidth: \"1px\",\n      fontSize: \"{description-size}\",\n      mt: \"{space-y}\",\n      pt: \"{space-y}\",\n      px: \"{space-x}\",\n    },\n    description: { color: \"fg.muted\", fontSize: \"{description-size}\" },\n    group: { w: \"full\" },\n    indicator: {\n      ...radioStyle.base?.indicator,\n      \"input:focus-visible + &\": {\n        borderColor: \"{focus-ring-color}\",\n      },\n      position: \"absolute\",\n      top: \"calc({space-y} + ({label-size} * 1.5 - {label-size}) / 2)\",\n    },\n    root: {\n      ...radioStyle.base?.root,\n      \"&:has(input:focus-visible)\": focusRingStyle.outline,\n      \"--addon-border-color\": \"{root-border-color}\",\n      \"--root-border-color\": \"colors.border\",\n      alignItems: \"stretch\",\n      borderColor: \"{--root-border-color}\",\n      borderWidth: \"1px\",\n      flexDirection: \"column\",\n      focusRingColor: \"{focus-border-color}\",\n      gap: \"1\",\n      position: \"relative\",\n      px: \"{space-x}\",\n      py: \"{space-y}\",\n      rounded: \"l2\",\n      w: \"full\",\n      _invalid: {\n        borderColor: \"{error-border-color}\",\n        focusRingColor: \"{error-border-color}\",\n      },\n    },\n  },\n\n  props: {\n    /**\n     * The justify indicator of the component\n     *\n     * @default 'start'\n     */\n    justify: {\n      end: {\n        addon: {\n          me: \"calc({bleed-size} * -1)\",\n          ms: \"calc({space-x} * -1)\",\n        },\n        indicator: { right: \"{space-x}\" },\n        root: {\n          \"&:has([data-indicator])\": {\n            \"--bleed-size\": \"calc({indicator-size} + ({space-x} * 2))\",\n          },\n          \"--bleed-size\": \"{space-x}\",\n          pe: \"{bleed-size}\",\n        },\n      },\n      start: {\n        addon: {\n          me: \"calc({space-x} * -1)\",\n          ms: \"calc({bleed-size} * -1)\",\n        },\n        indicator: { left: \"{space-x}\" },\n        root: {\n          \"&:has([data-indicator])\": {\n            \"--bleed-size\": \"calc({indicator-size} + ({space-x} * 2))\",\n          },\n          \"--bleed-size\": \"{space-x}\",\n          ps: \"{bleed-size}\",\n        },\n      },\n    },\n    /**\n     * The shape of the component\n     *\n     * @default 'circle'\n     */\n    shape: { ...radioStyle.props?.shape },\n  },\n\n  variants: {\n    base: { indicator: radioStyle.variants?.base.indicator },\n    outline: {\n      root: {\n        _checked: {\n          \"--indicator-border-color\": \"colorScheme.outline\",\n          \"--root-border-color\": \"colorScheme.outline\",\n        },\n      },\n    },\n    subtle: {\n      indicator: { _checked: { bg: \"bg\" } },\n      root: {\n        _checked: {\n          \"--addon-border-color\": \"colorScheme.muted\",\n          \"--indicator-border-color\": \"colorScheme.emphasized\",\n          \"--root-border-color\": \"transparent\",\n          bg: \"colorScheme.subtle\",\n        },\n      },\n    },\n    surface: {\n      indicator: { _checked: { bg: \"bg\" } },\n      root: {\n        _checked: {\n          \"--indicator-border-color\": \"colorScheme.emphasized\",\n          \"--root-border-color\": \"colorScheme.muted\",\n          bg: \"colorScheme.subtle\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      indicator: radioStyle.sizes?.sm.indicator,\n      root: {\n        ...radioStyle.sizes?.sm.root,\n        \"--description-size\": \"fontSizes.xs\",\n        \"--space-x\": \"spaces.3\",\n        \"--space-y\": \"spaces.2\",\n      },\n    },\n    md: {\n      indicator: radioStyle.sizes?.md.indicator,\n      root: {\n        ...radioStyle.sizes?.md.root,\n        \"--description-size\": \"fontSizes.sm\",\n        \"--space-x\": \"spaces.4\",\n        \"--space-y\": \"spaces.3\",\n      },\n    },\n    lg: {\n      indicator: radioStyle.sizes?.lg.indicator,\n      root: {\n        ...radioStyle.sizes?.lg.root,\n        \"--description-size\": \"fontSizes.md\",\n        \"--space-x\": \"spaces.5\",\n        \"--space-y\": \"spaces.4\",\n      },\n    },\n    xl: {\n      indicator: radioStyle.sizes?.lg.indicator,\n      root: {\n        ...radioStyle.sizes?.lg.root,\n        \"--description-size\": \"fontSizes.md\",\n        \"--space-x\": \"spaces.6\",\n        \"--space-y\": \"spaces.5\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"surface\",\n    justify: \"start\",\n    shape: \"circle\",\n  },\n})\n\nexport type RadioCardStyle = typeof radioCardStyle\n"
    },
    {
      "name": "radio-card.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement, ReactNode } from \"react\"\nimport type {\n  GenericsComponent,\n  HTMLStyledProps,\n  ThemeProps,\n  Merge,\n} from \"@yamada-ui/react\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { UseRadioProps } from \"../radio\"\nimport type { RadioCardStyle } from \"./radio-card.style\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { useInputBorder } from \"../input\"\nimport { useRadio } from \"../radio\"\nimport { radioCardStyle } from \"./radio-card.style\"\n\nexport interface RadioCardRootProps<Y extends string = string>\n  extends Merge<HTMLStyledProps<\"label\">, UseRadioProps<Y>>,\n    ThemeProps<RadioCardStyle>,\n    UseInputBorderProps {\n  /**\n   * The addon of the radio card.\n   */\n  addon?: ReactNode\n  /**\n   * The description of the radio card.\n   */\n  description?: ReactNode\n  /**\n   * The label of the radio card.\n   */\n  label?: ReactNode\n  /**\n   * If `true`, the indicator will be displayed.\n   *\n   * @default true\n   */\n  withIndicator?: boolean\n  /**\n   * Props for the addon component.\n   */\n  addonProps?: RadioCardAddonProps\n  /**\n   * Props for the description component.\n   */\n  descriptionProps?: RadioCardDescriptionProps\n  /**\n   * Props for the indicator component.\n   */\n  indicatorProps?: RadioCardIndicatorProps\n  /**\n   * Props for the input element.\n   */\n  inputProps?: HTMLStyledProps<\"input\">\n  /**\n   * Props for the label component.\n   */\n  labelProps?: RadioCardLabelProps\n  /**\n   * Props for the label element.\n   */\n  rootProps?: HTMLStyledProps<\"label\">\n}\n\nconst {\n  component,\n  PropsContext: RadioCardPropsContext,\n  usePropsContext: useRadioCardPropsContext,\n  withContext,\n  withProvider,\n  useRootComponentProps,\n} = createSlotComponent<RadioCardRootProps, RadioCardStyle>(\n  \"radio-card\",\n  radioCardStyle,\n)\n\nexport {\n  component,\n  RadioCardPropsContext,\n  useRadioCardPropsContext,\n  useRootComponentProps,\n}\n\n/**\n * `RadioCard` is a component used for allowing users to select one option from multiple choices.\n *\n * @see https://yamada-ui.com/components/radio-card\n */\nexport const RadioCardRoot = withProvider<\"label\", RadioCardRootProps>(\n  ({\n    addon,\n    children,\n    description,\n    errorBorderColor,\n    focusBorderColor,\n    label,\n    withIndicator = true,\n    addonProps,\n    descriptionProps,\n    indicatorProps,\n    inputProps,\n    labelProps,\n    rootProps,\n    ...rest\n  }) => {\n    const { getIndicatorProps, getInputProps, getRootProps } = useRadio(rest)\n    const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return (\n        <>\n          {label ? (\n            <RadioCardLabel {...labelProps}>{label}</RadioCardLabel>\n          ) : null}\n          {description ? (\n            <RadioCardDescription {...descriptionProps}>\n              {description}\n            </RadioCardDescription>\n          ) : null}\n          {addon ? (\n            <RadioCardAddon {...addonProps}>{addon}</RadioCardAddon>\n          ) : null}\n        </>\n      )\n    }, [\n      addon,\n      addonProps,\n      children,\n      description,\n      descriptionProps,\n      label,\n      labelProps,\n    ])\n\n    return (\n      <styled.label {...getRootProps({ ...varProps, ...rootProps })}>\n        <styled.input {...getInputProps(inputProps)} />\n        {withIndicator ? (\n          <RadioCardIndicator {...getIndicatorProps(indicatorProps)} />\n        ) : null}\n\n        {computedChildren}\n      </styled.label>\n    )\n  },\n  \"root\",\n)() as GenericsComponent<{\n  <Y extends string = string>(props: RadioCardRootProps<Y>): ReactElement\n}>\n\ninterface RadioCardIndicatorProps extends HTMLStyledProps {}\n\nconst RadioCardIndicator = withContext<\"div\", RadioCardIndicatorProps>(\n  \"div\",\n  \"indicator\",\n)({ \"data-indicator\": \"\" })\n\nexport interface RadioCardLabelProps extends HTMLStyledProps {}\n\nexport const RadioCardLabel = withContext<\"span\", RadioCardLabelProps>(\n  \"span\",\n  \"label\",\n)()\n\nexport interface RadioCardDescriptionProps extends HTMLStyledProps {}\n\nexport const RadioCardDescription = withContext<\n  \"span\",\n  RadioCardDescriptionProps\n>(\"span\", \"description\")()\n\nexport interface RadioCardAddonProps extends HTMLStyledProps {}\n\nexport const RadioCardAddon = withContext<\"span\", RadioCardAddonProps>(\n  \"span\",\n  \"addon\",\n)()\n"
    }
  ]
}
