{
  "ColorPicker": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "\"amber\" | \"black\" | \"blackAlpha\" | \"blue\" | \"cyan\" | \"danger\" | \"emerald\" | \"error\" | \"flashy\" | \"fuchsia\" ...",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
      "defaultValue": "\"md\"",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "\"filled\" | \"flushed\" | \"outline\" | \"plain\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the component.",
      "required": false
    },
    "allowInput": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, allows input.",
      "required": false
    },
    "alphaSliderProps": {
      "type": "ColorSelectorAlphaSliderProps",
      "description": "Props for the alpha slider.",
      "required": false
    },
    "animationScheme": {
      "type": "\"none\" | \"scale\" | SimplePlacement",
      "defaultValue": "\"scale\"",
      "description": "The animation of the element.",
      "required": false
    },
    "autoUpdate": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, automatically updates the position of the floating element when necessary.",
      "required": false
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens.",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out.",
      "required": false
    },
    "closeOnChange": {
      "type": "((ev: ChangeEvent<HTMLInputElement>) => boolean) | boolean",
      "defaultValue": "false",
      "description": "If `true`, the color picker will be closed when the input value changes.",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the popover will hide on pressing Esc key.",
      "required": false
    },
    "closeOnScroll": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the popover will hide on scroll.",
      "required": false
    },
    "colorSwatches": {
      "type": "string[]",
      "description": "An array of colors in one of the supported formats.\nUsed to render swatches list below the color selector.",
      "required": false
    },
    "colorSwatchGroupColumns": {
      "type": "number",
      "defaultValue": "8",
      "description": "The number of columns in the color swatch group.",
      "required": false
    },
    "colorSwatchGroupLabel": {
      "type": "string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>",
      "description": "The label of the color swatch group.",
      "required": false
    },
    "colorSwatchGroupLabelProps": {
      "type": "ColorSelectorColorSwatchGroupLabelProps",
      "description": "Props for the color swatch group label.",
      "required": false
    },
    "colorSwatchGroupProps": {
      "type": "ColorSelectorColorSwatchGroupProps",
      "description": "Props for the color swatch group.",
      "required": false
    },
    "colorSwatchItemProps": {
      "type": "Omit<ColorSelectorColorSwatchItemProps, \"value\">",
      "description": "Props for the color swatch item.",
      "required": false
    },
    "colorSwatchProps": {
      "type": "ColorPickerColorSwatchProps",
      "description": "Props for the color swatch component.",
      "required": false
    },
    "contentProps": {
      "type": "ColorPickerContentProps",
      "description": "Props for content element.",
      "required": false
    },
    "defaultOpen": {
      "type": "boolean",
      "description": "If `true`, the element will be initially opened.",
      "required": false
    },
    "defaultValue": {
      "type": "string",
      "description": "The initial value of the color picker.",
      "required": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the combobox will be disabled.",
      "required": false
    },
    "duration": {
      "type": "MotionTransitionProps[\"duration\"]",
      "defaultValue": "0.2",
      "description": "The animation duration.",
      "required": false
    },
    "elementProps": {
      "type": "InputGroup.ElementProps",
      "description": "The props for the input element.",
      "required": false
    },
    "elements": {
      "type": "{ floating?: HTMLElement | null | undefined; reference?: HTMLButtonElement | null | undefined }",
      "description": "Object containing the reference and floating elements.",
      "required": false
    },
    "endElementProps": {
      "type": "InputGroup.ElementProps",
      "description": "The props for the end element.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "eyeDropperProps": {
      "type": "ColorPickerEyeDropperProps",
      "description": "Props for the eye dropper component.",
      "required": false
    },
    "fallbackValue": {
      "type": "string",
      "defaultValue": "\"#FFFFFF\"",
      "description": "The fallback value of the color picker.",
      "required": false
    },
    "fieldProps": {
      "type": "ColorPickerFieldProps",
      "description": "The props for the field component.",
      "required": false
    },
    "flip": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area.",
      "required": false
    },
    "focusBorderColor": {
      "type": "\"-moz-initial\" | \"ActiveBorder\" | \"ActiveCaption\" | \"aliceblue\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.50\" | \"amber.500\" ...",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "format": {
      "type": "ColorFormat",
      "defaultValue": "\"hex\"",
      "description": "The format of the color picker.\nAutomatically determines the format of `value` or `defaultValue`.",
      "required": false
    },
    "formatInput": {
      "type": "(value: string) => string",
      "description": "The function to format the input value.",
      "required": false
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.",
      "required": false
    },
    "hueSliderProps": {
      "type": "ColorSelectorHueSliderProps",
      "description": "Props for the hue slider.",
      "required": false
    },
    "inputProps": {
      "type": "HTMLStyledProps<\"input\">",
      "description": "The props for the input element.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be invalid.",
      "required": false
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns.",
      "required": false
    },
    "middleware": {
      "type": "(false | { name: string; options?: any; fn: (state: { x: number; y: number; placement: Placement; platform: Platform; strategy: Strategy; initialPlacement: Placement; middlewareData: MiddlewareData; rects: ElementRects; elements: Elements; }) => Promisable<...>; } | null | undefined)[]",
      "description": "Array of middleware objects to modify the positioning or provide data for\nrendering.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The `name` attribute of the input element.",
      "required": false
    },
    "offset": {
      "type": "[number, number]",
      "description": "The main and cross-axis offset to displace popper element from its reference element.",
      "required": false
    },
    "onChange": {
      "type": "(value: string) => void",
      "description": "The callback invoked when the value changes.",
      "required": false
    },
    "onClose": {
      "type": "() => void | Promise<void>",
      "description": "Callback invoked to close the element.",
      "required": false
    },
    "onInputChange": {
      "type": "(ev: ChangeEvent<HTMLInputElement>) => void",
      "description": "The callback invoked when input value state changes.",
      "required": false
    },
    "onOpen": {
      "type": "() => void | Promise<void>",
      "description": "Callback invoked to open the element.",
      "required": false
    },
    "open": {
      "type": "boolean",
      "description": "If `true`, the element will be opened.",
      "required": false
    },
    "openOnChange": {
      "type": "((ev: ChangeEvent<HTMLInputElement>) => boolean) | boolean",
      "defaultValue": "true",
      "description": "If `true`, the color picker will be opened when the input value changes.",
      "required": false
    },
    "openOnClick": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the combobox will be opened when click on the field.",
      "required": false
    },
    "openOnEnter": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the combobox will be opened when enter is pressed.",
      "required": false
    },
    "openOnFocus": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the color picker will be opened when the input is focused.",
      "required": false
    },
    "openOnSpace": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the combobox will be opened when space is pressed.",
      "required": false
    },
    "pattern": {
      "type": "RegExp",
      "description": "The pattern used to check the input element.",
      "required": false
    },
    "placeholder": {
      "type": "string",
      "description": "The placeholder for color picker.",
      "required": false
    },
    "placement": {
      "type": "Direction",
      "defaultValue": "\"end-start\"",
      "description": "The placement of the popper relative to its reference.",
      "required": false
    },
    "platform": {
      "type": "Platform",
      "description": "Custom or extended platform object.",
      "required": false
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area.",
      "required": false
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the combobox will be readonly.",
      "required": false
    },
    "required": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be required.",
      "required": false
    },
    "rootProps": {
      "type": "InputGroup.RootProps",
      "description": "Props for root element.",
      "required": false
    },
    "saturationSliderProps": {
      "type": "ColorSelectorSaturationSliderProps",
      "description": "Props for the saturation slider.",
      "required": false
    },
    "selectorProps": {
      "type": "ColorSelector.RootProps",
      "description": "Props for the selector component.",
      "required": false
    },
    "startElementProps": {
      "type": "InputGroup.ElementProps",
      "description": "The props for the start element.",
      "required": false
    },
    "strategy": {
      "type": "Strategy",
      "defaultValue": "\"absolute\"",
      "description": "The CSS positioning strategy to use.",
      "required": false
    },
    "transferFocus": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the focus will be transferred to the popover content when the tab key is pressed.",
      "required": false
    },
    "value": {
      "type": "string",
      "description": "The value of the color picker.",
      "required": false
    },
    "whileElementsMounted": {
      "type": "(reference: HTMLButtonElement, floating: HTMLElement, update: () => void) => () => void",
      "description": "A callback invoked when both the reference and floating elements are\nmounted, and cleaned up when either is unmounted. This is useful for\nsetting up event listeners (e.g. pass `autoUpdate`).",
      "required": false
    },
    "withColorSwatch": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the color swatch component will be displayed.",
      "required": false
    },
    "withEyeDropper": {
      "type": "boolean",
      "defaultValue": "true",
      "description": "If `true`, the eye dropper component will be displayed.",
      "required": false
    }
  }
}
