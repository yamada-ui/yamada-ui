{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon"],
    "externals": [],
    "hooks": [],
    "providers": ["i18n-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "avatar-group.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { AvatarStyle } from \"./avatar.style\"\nimport type { UseAvatarGroupProps } from \"./use-avatar-group\"\nimport { useMemo } from \"react\"\nimport { styled } from \"@yamada-ui/react\"\nimport {\n  Avatar,\n  AvatarPropsContext,\n  component,\n  useRootComponentProps,\n} from \"./avatar\"\nimport { useAvatarGroup } from \"./use-avatar-group\"\n\nexport interface AvatarGroupRootProps\n  extends HTMLStyledProps,\n    ThemeProps<AvatarStyle>,\n    UseAvatarGroupProps {}\n\n/**\n * `Avatar` is a component that displays a profile picture or an icon with initials representing a user.\n *\n * @see https://yamada-ui.com/components/avatar\n */\nexport const AvatarGroupRoot = component<\"div\", AvatarGroupRootProps>(\n  (props) => {\n    const [, { colorScheme, size, variant, shape, ...rest }] =\n      useRootComponentProps(props, \"group\", {\n        transferProps: [\"variant\", \"colorScheme\", \"size\", \"shape\"],\n      })\n    const { children, excess, getRootProps } = useAvatarGroup(rest)\n    const context = useMemo(\n      () => ({ colorScheme, size, variant, shape }),\n      [variant, size, colorScheme, shape],\n    )\n\n    return (\n      <AvatarPropsContext value={context}>\n        <styled.div {...getRootProps()}>\n          {excess > 0 ? <Avatar fallback={`+${excess}`} /> : null}\n          {children}\n        </styled.div>\n      </AvatarPropsContext>\n    )\n  },\n  \"group\",\n)()\n"
    },
    {
      "name": "avatar.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const avatarStyle = defineComponentSlotStyle({\n  base: {\n    fallback: {\n      alignItems: \"center\",\n      boxSize: \"100%\",\n      display: \"inline-flex\",\n      fontWeight: \"medium\",\n      justifyContent: \"center\",\n      textTransform: \"uppercase\",\n    },\n    group: {\n      alignItems: \"center\",\n      display: \"flex\",\n      flexDirection: \"row-reverse\",\n      justifyContent: \"flex-end\",\n      _notFirstChild: {\n        me: \"-2\",\n      },\n    },\n    image: {\n      boxSize: \"100%\",\n      objectFit: \"cover\",\n    },\n    root: {\n      flexShrink: \"0\",\n      overflow: \"hidden\",\n      position: \"relative\",\n      userSelect: \"none\",\n      verticalAlign: \"top\",\n    },\n  },\n\n  props: {\n    /**\n     * The shape of the component\n     *\n     * @default 'circle'\n     */\n    shape: {\n      circle: {\n        root: { rounded: \"full\" },\n      },\n      rounded: {\n        root: { rounded: \"l2\" },\n      },\n      square: {\n        root: { rounded: \"0\" },\n      },\n    },\n  },\n\n  variants: {\n    outline: {\n      group: {\n        _child: {\n          _loaded: {\n            borderColor: \"bg !important\",\n            borderWidth: \"1px\",\n          },\n        },\n      },\n      root: {\n        layerStyle: \"outline\",\n        _loaded: {\n          bg: \"transparent\",\n          borderColor: \"transparent\",\n        },\n      },\n    },\n    solid: {\n      group: {\n        _child: {\n          borderColor: \"bg\",\n          borderWidth: \"1px\",\n        },\n      },\n      root: {\n        layerStyle: \"solid\",\n        _loaded: {\n          bg: \"transparent\",\n        },\n      },\n    },\n    subtle: {\n      group: {\n        _child: {\n          borderColor: \"bg\",\n          borderWidth: \"1px\",\n        },\n      },\n      root: {\n        layerStyle: \"subtle\",\n        _loaded: {\n          bg: \"transparent\",\n        },\n      },\n    },\n    surface: {\n      root: {\n        layerStyle: \"surface\",\n        _loaded: {\n          bg: \"transparent\",\n          borderColor: \"transparent\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      fallback: {\n        fontSize: \"xs\",\n        lineHeight: \"{sizes.8}\",\n      },\n      root: {\n        boxSize: \"8\",\n      },\n    },\n    sm: {\n      fallback: {\n        fontSize: \"sm\",\n        lineHeight: \"{sizes.9}\",\n      },\n      root: {\n        boxSize: \"9\",\n      },\n    },\n    md: {\n      fallback: {\n        fontSize: \"md\",\n        lineHeight: \"{sizes.10}\",\n      },\n      root: {\n        boxSize: \"10\",\n      },\n    },\n    lg: {\n      fallback: {\n        fontSize: \"md\",\n        lineHeight: \"{sizes.11}\",\n      },\n      root: {\n        boxSize: \"11\",\n      },\n    },\n    xl: {\n      fallback: {\n        fontSize: \"lg\",\n        lineHeight: \"{sizes.12}\",\n      },\n      root: {\n        boxSize: \"12\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"solid\",\n    shape: \"circle\",\n  },\n})\n\nexport type AvatarStyle = typeof avatarStyle\n"
    },
    {
      "name": "avatar.tsx",
      "content": "\"use client\"\n\nimport type { ReactElement } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { AvatarStyle } from \"./avatar.style\"\nimport type { UseAvatarProps } from \"./use-avatar\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { UserRoundIcon } from \"../icon\"\nimport { avatarStyle } from \"./avatar.style\"\nimport { useAvatar } from \"./use-avatar\"\n\nexport interface AvatarProps\n  extends HTMLStyledProps,\n    ThemeProps<AvatarStyle>,\n    UseAvatarProps {\n  /**\n   * The avatar icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The props to pass to the fallback component.\n   */\n  fallbackProps?: AvatarFallbackProps\n  /**\n   * The props to pass to the image component.\n   */\n  imageProps?: AvatarImageProps\n}\n\nconst {\n  component,\n  PropsContext: AvatarPropsContext,\n  usePropsContext: useAvatarPropsContext,\n  withContext,\n  withProvider,\n  useRootComponentProps,\n} = createSlotComponent<AvatarProps, AvatarStyle>(\"avatar\", avatarStyle)\n\nexport {\n  AvatarPropsContext,\n  component,\n  useAvatarPropsContext,\n  useRootComponentProps,\n}\n\n/**\n * `Avatar` is a component that displays a profile picture or an icon with initials representing a user.\n *\n * @see https://yamada-ui.com/components/avatar\n */\nexport const Avatar = withProvider<\"div\", AvatarProps>(\n  ({ fallbackProps, imageProps, ...rest }) => {\n    const { getFallbackProps, getImageProps, getRootProps } = useAvatar(rest)\n\n    return (\n      <styled.div {...getRootProps()}>\n        <AvatarFallback {...getFallbackProps(fallbackProps)} />\n        <AvatarImage {...getImageProps(imageProps)} />\n      </styled.div>\n    )\n  },\n  \"root\",\n)({ icon: <UserRoundIcon fontSize=\"1.2em\" /> })\n\ninterface AvatarImageProps extends HTMLStyledProps<\"img\"> {}\n\nconst AvatarImage = withContext<\"img\", AvatarImageProps>(\"img\", \"image\")()\n\ninterface AvatarFallbackProps extends HTMLStyledProps {}\n\nconst AvatarFallback = withContext<\"div\", AvatarFallbackProps>(\n  \"div\",\n  \"fallback\",\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./avatar.style\"\nexport { Avatar, AvatarPropsContext, useAvatarPropsContext } from \"./avatar\"\nexport type { AvatarProps } from \"./avatar\"\nexport { AvatarGroupRoot } from \"./avatar-group\"\nexport type { AvatarGroupRootProps } from \"./avatar-group\"\nexport * as AvatarGroup from \"./namespace\"\nexport * from \"./use-avatar\"\nexport * from \"./use-avatar-group\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  Avatar as Item,\n  AvatarPropsContext as PropsContext,\n  useAvatarPropsContext as usePropsContext,\n} from \"./avatar\"\nexport type { AvatarProps as ItemProps } from \"./avatar\"\nexport { AvatarGroupRoot as Root } from \"./avatar-group\"\nexport type { AvatarGroupRootProps as RootProps } from \"./avatar-group\"\n"
    },
    {
      "name": "use-avatar-group.ts",
      "content": "import type { HTMLProps, PropGetter } from \"@yamada-ui/react\"\nimport { useCallback, useMemo } from \"react\"\nimport { isUndefined, useValidChildren } from \"@yamada-ui/react\"\n\nexport interface UseAvatarGroupProps extends HTMLProps {\n  /**\n   * The maximum number of visible avatars.\n   */\n  max?: number\n  /**\n   * Whether to reverse the order of the avatars.\n   */\n  reverse?: boolean\n}\n\nexport const useAvatarGroup = ({\n  children,\n  max,\n  reverse,\n  ...rest\n}: UseAvatarGroupProps = {}) => {\n  const validChildren = useValidChildren(children)\n  const excess = !isUndefined(max) ? validChildren.length - max : 0\n\n  const getRootProps: PropGetter = useCallback(\n    (props) => ({ ...rest, ...props, role: \"group\" }),\n    [rest],\n  )\n\n  const cloneChildren = useMemo(() => {\n    const omittedChildren = !isUndefined(max)\n      ? validChildren.slice(0, max)\n      : [...validChildren]\n\n    return reverse ? omittedChildren.reverse() : omittedChildren\n  }, [max, validChildren, reverse])\n\n  return {\n    children: cloneChildren,\n    excess,\n    getRootProps,\n  }\n}\n\nexport type UseAvatarGroupReturn = ReturnType<typeof useAvatarGroup>\n"
    },
    {
      "name": "use-avatar.ts",
      "content": "\"use client\"\n\nimport type { ReactElement, ReactNode } from \"react\"\nimport type { HTMLProps, PropGetter } from \"@yamada-ui/react\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { dataAttr, handlerAll, mergeRefs } from \"@yamada-ui/react\"\n\nconst defaultFormat = (name: string) => {\n  const names = name.trim().split(\" \")\n  const firstName = names[0] ?? \"\"\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\"\n\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\nexport interface UseAvatarProps extends HTMLProps {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - If `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * The image url of the avatar.\n   */\n  src?: HTMLProps<\"img\">[\"src\"]\n  /**\n   * List of sources to use for different screen resolutions.\n   */\n  srcSet?: HTMLProps<\"img\">[\"srcSet\"]\n  /**\n   * The `HTMLImageElement` property `alt`.\n   */\n  alt?: HTMLProps<\"img\">[\"alt\"]\n  /**\n   * The `HTMLImageElement` property `crossOrigin`.\n   */\n  crossOrigin?: HTMLProps<\"img\">[\"crossOrigin\"]\n  /**\n   * The fallback text to display if the image is not provided.\n   */\n  fallback?: ReactNode\n  /**\n   * Function to get the initials to display.\n   */\n  format?: (name: string) => string\n  /**\n   * The avatar icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * Defines loading strategy.\n   */\n  loading?: HTMLProps<\"img\">[\"loading\"]\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   *\n   * @default 'no-referrer'\n   */\n  referrerPolicy?: HTMLProps<\"img\">[\"referrerPolicy\"]\n}\n\nexport const useAvatar = ({\n  name,\n  src,\n  srcSet,\n  alt,\n  crossOrigin,\n  fallback: fallbackMessage,\n  format = defaultFormat,\n  icon,\n  loading,\n  referrerPolicy = \"no-referrer\",\n  ...rest\n}: UseAvatarProps = {}) => {\n  const imageRef = useRef<HTMLImageElement>(null)\n  const initials = name ? format(name) : undefined\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const fallback = !src || !loaded\n  const { t } = useI18n(\"avatar\")\n\n  useEffect(() => {\n    if (!imageRef.current) return\n\n    if (!!imageRef.current.src && imageRef.current.complete) setLoaded(true)\n  }, [])\n\n  const getGroupProps: PropGetter = useCallback((props) => ({ ...props }), [])\n\n  const getRootProps: PropGetter = useCallback(\n    (props) => ({\n      ...rest,\n      ...props,\n      \"data-fallback\": dataAttr(!!fallbackMessage),\n      \"data-loaded\": dataAttr(loaded),\n    }),\n    [loaded, fallbackMessage, rest],\n  )\n\n  const getImageProps: PropGetter<\"img\"> = useCallback(\n    ({ ref, onLoad, ...props } = {}) => ({\n      ...props,\n      ref: mergeRefs(ref, imageRef),\n      src,\n      srcSet,\n      alt: name || alt,\n      crossOrigin,\n      draggable: false,\n      hidden: fallback,\n      loading,\n      referrerPolicy,\n      onLoad: handlerAll(onLoad, () => setLoaded(true)),\n    }),\n    [src, srcSet, alt, crossOrigin, loading, referrerPolicy, fallback, name],\n  )\n\n  const getFallbackProps: PropGetter = useCallback(\n    (props) => ({\n      ...props,\n      \"aria-label\": !fallbackMessage\n        ? name || alt || t(\"Avatar Icon\")\n        : undefined,\n      children: fallbackMessage || initials || icon,\n      hidden: !fallback,\n      role: \"img\",\n    }),\n    [name, initials, fallback, icon, fallbackMessage, alt, t],\n  )\n\n  return {\n    name,\n    loaded,\n    getFallbackProps,\n    getGroupProps,\n    getImageProps,\n    getRootProps,\n  }\n}\n\nexport type UseAvatarReturn = ReturnType<typeof useAvatar>\n"
    }
  ]
}
