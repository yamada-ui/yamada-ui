{
  "MultiSelect": {
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "description": "The animation of the popover.",
      "required": false
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "'clippingParents'",
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier.",
      "required": false
    },
    "clearIconProps": {
      "type": "SelectIconProps",
      "description": "Props for multi select clear icon element.",
      "required": false
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to close.",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out.",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you hit the `Esc` key.",
      "required": false
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the list element will be closed when value is selected.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "component": {
      "type": "FC<{\n  index: number\n  label: string\n  value: string\n  onRemove: MouseEventHandler<HTMLElement>\n}>",
      "description": "The custom display value to use.",
      "required": false
    },
    "containerProps": {
      "type": "Omit<HTMLUIProps, \"children\">",
      "description": "Props for multi select container element.",
      "required": false
    },
    "defaultIsOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be initially opened.",
      "required": false
    },
    "defaultValue": {
      "type": "string[]",
      "description": "The initial value of the select.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "The animation duration.",
      "required": false
    },
    "errorBorderColor": {
      "type": "string",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { resize?: boolean | undefined; scroll?: boolean | undefined }",
      "defaultValue": true,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window.",
      "required": false
    },
    "fieldProps": {
      "type": "Omit<MultiSelectFieldProps, \"children\">",
      "description": "Props for multi select field element.",
      "required": false
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area.",
      "required": false
    },
    "focusBorderColor": {
      "type": "string",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "footer": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | FC<...>",
      "description": "The footer of the multi select content element.",
      "required": false
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.",
      "required": false
    },
    "header": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | FC<...>",
      "description": "The header of the multi select content element.",
      "required": false
    },
    "iconProps": {
      "type": "SelectIconProps",
      "description": "Props for multi select icon element.",
      "required": false
    },
    "isClearable": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the multi select clear icon.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open.",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be opened.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "items": {
      "type": "SelectItem[]",
      "description": "If provided, generate options based on items.",
      "required": false
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.",
      "required": false
    },
    "listProps": {
      "type": "Omit<SelectListProps, \"children\">",
      "description": "Props for multi select list element.",
      "required": false
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns.",
      "required": false
    },
    "maxSelectValues": {
      "type": "number",
      "description": "The maximum selectable value.",
      "required": false
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "required": false,
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "name": {
      "type": "string",
      "description": "The HTML `name` attribute used for forms.",
      "required": false
    },
    "offset": {
      "type": "[number, number]",
      "description": "The main and cross-axis offset to displace popper element from its reference element.",
      "required": false
    },
    "omitSelectedValues": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the selected item(s) will be excluded from the list.",
      "required": false
    },
    "onChange": {
      "type": "(value: string[]) => void",
      "description": "The callback invoked when value state changes.",
      "required": false
    },
    "onClose": {
      "type": "() => void",
      "description": "Callback fired when the popover closes.",
      "required": false
    },
    "onOpen": {
      "type": "() => void",
      "description": "Callback fired when the popover opens.",
      "required": false
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to open.",
      "required": false
    },
    "optionProps": {
      "type": "Omit<OptionProps, \"children\" | \"value\">",
      "description": "Props for select option element.",
      "required": false
    },
    "placeholder": {
      "type": "string",
      "description": "The placeholder of the select.",
      "required": false
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "description": "The placement of the popper relative to its reference.",
      "required": false
    },
    "portalProps": {
      "type": "Omit<PortalProps, \"children\">",
      "defaultValue": "'{ isDisabled: true }'",
      "description": "Props to be forwarded to the portal component.",
      "required": false
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area.",
      "required": false
    },
    "separator": {
      "type": "string",
      "defaultValue": "','",
      "description": "The visual separator between each value.",
      "required": false
    },
    "size": {
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the MultiSelect.",
      "required": false
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "'absolute'",
      "description": "The CSS positioning strategy to use.",
      "required": false
    },
    "value": {
      "type": "string[]",
      "description": "The value of the select.",
      "required": false
    },
    "variant": {
      "type": "\"filled\" | \"flushed\" | \"outline\" | \"unstyled\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the MultiSelect.",
      "required": false
    }
  },
  "Option": {
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the list element will be closed when selected.",
      "required": false
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the select option will be disabled.",
      "required": false
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the select option will be focusable.",
      "required": false
    },
    "value": {
      "type": "string",
      "description": "The value of the select option.",
      "required": false
    }
  },
  "OptionGroup": {
    "label": {
      "type": "string",
      "description": "The label of the option group.",
      "required": true
    },
    "labelProps": {
      "type": "HTMLUIProps<\"span\">",
      "description": "Props for option group element.",
      "required": false
    }
  },
  "Select": {
    "animation": {
      "type": "\"bottom\" | \"left\" | \"right\" | \"scale\" | \"top\" | \"none\"",
      "defaultValue": "'scale'",
      "description": "The animation of the popover.",
      "required": false
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "'clippingParents'",
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier.",
      "required": false
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to close.",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out.",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you hit the `Esc` key.",
      "required": false
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the list element will be closed when value is selected.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "containerProps": {
      "type": "Omit<HTMLUIProps, \"children\">",
      "description": "Props for select container element.",
      "required": false
    },
    "contentProps": {
      "type": "Omit<MotionProps, \"children\">",
      "description": "Props for select content element.",
      "required": false
    },
    "defaultIsOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be initially opened.",
      "required": false
    },
    "defaultValue": {
      "type": "string",
      "description": "The initial value of the select.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "The animation duration.",
      "required": false
    },
    "errorBorderColor": {
      "type": "string",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { resize?: boolean | undefined; scroll?: boolean | undefined }",
      "defaultValue": true,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window.",
      "required": false
    },
    "fieldProps": {
      "type": "Omit<SelectFieldProps, \"children\">",
      "description": "Props for select field element.",
      "required": false
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area.",
      "required": false
    },
    "focusBorderColor": {
      "type": "string",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "footer": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | FC<...>",
      "description": "The footer of the select content element.",
      "required": false
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.",
      "required": false
    },
    "header": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | FC<...>",
      "description": "The header of the select content element.",
      "required": false
    },
    "iconProps": {
      "type": "SelectIconProps",
      "description": "Props for select icon element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open.",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be opened.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "items": {
      "type": "SelectItem[]",
      "description": "If provided, generate options based on items.",
      "required": false
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.",
      "required": false
    },
    "listProps": {
      "type": "Omit<SelectListProps, \"children\">",
      "description": "Props for select list element.",
      "required": false
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns.",
      "required": false
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "required": false,
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "name": {
      "type": "string",
      "description": "The HTML `name` attribute used for forms.",
      "required": false
    },
    "offset": {
      "type": "[number, number]",
      "description": "The main and cross-axis offset to displace popper element from its reference element.",
      "required": false
    },
    "onChange": {
      "type": "(value: string) => void",
      "description": "The callback invoked when value state changes.",
      "required": false
    },
    "onClose": {
      "type": "() => void",
      "description": "Callback fired when the popover closes.",
      "required": false
    },
    "onOpen": {
      "type": "() => void",
      "description": "Callback fired when the popover opens.",
      "required": false
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to open.",
      "required": false
    },
    "optionProps": {
      "type": "Omit<OptionProps, \"children\" | \"value\">",
      "description": "Props for select option element.",
      "required": false
    },
    "placeholder": {
      "type": "string",
      "description": "The placeholder of the select.",
      "required": false
    },
    "placeholderInOptions": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, include placeholders in options.",
      "required": false
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "description": "The placement of the popper relative to its reference.",
      "required": false
    },
    "portalProps": {
      "type": "Omit<PortalProps, \"children\">",
      "defaultValue": "'{ isDisabled: true }'",
      "description": "Props to be forwarded to the portal component.",
      "required": false
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area.",
      "required": false
    },
    "size": {
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the Select.",
      "required": false
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "'absolute'",
      "description": "The CSS positioning strategy to use.",
      "required": false
    },
    "value": {
      "type": "string",
      "description": "The value of the select.",
      "required": false
    },
    "variant": {
      "type": "\"filled\" | \"flushed\" | \"outline\" | \"unstyled\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the Select.",
      "required": false
    }
  }
}
