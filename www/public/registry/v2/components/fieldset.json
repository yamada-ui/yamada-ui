{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": { "components": ["field"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "fieldset.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const fieldsetStyle = defineComponentSlotStyle({\n  base: {\n    content: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      w: \"full\",\n    },\n    errorMessage: {\n      alignItems: \"center\",\n      color: \"fg.error\",\n      display: \"inline-flex\",\n      gap: \"1\",\n    },\n    header: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      w: \"full\",\n    },\n    helperMessage: {\n      alignItems: \"center\",\n      color: \"fg.muted\",\n      display: \"inline-flex\",\n      gap: \"1\",\n    },\n    legend: {\n      fontWeight: \"medium\",\n      _disabled: {\n        opacity: 0.4,\n      },\n    },\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      w: \"full\",\n    },\n  },\n\n  variants: {\n    elevated: {\n      root: {\n        bg: \"bg.panel\",\n        boxShadow: \"md\",\n      },\n    },\n    outline: {\n      root: {\n        borderWidth: \"1px\",\n      },\n    },\n    panel: {\n      root: {\n        layerStyle: \"panel\",\n      },\n    },\n    plain: {},\n  },\n\n  sizes: {\n    sm: {\n      content: {\n        gap: \"3\",\n      },\n      errorMessage: {\n        fontSize: \"sm\",\n      },\n      header: {\n        gap: \"1\",\n      },\n      helperMessage: {\n        fontSize: \"sm\",\n      },\n      legend: {\n        fontSize: \"md\",\n      },\n      root: {\n        gap: \"3\",\n      },\n    },\n    md: {\n      content: {\n        gap: \"4\",\n      },\n      errorMessage: {\n        fontSize: \"sm\",\n      },\n      header: {\n        gap: \"1\",\n      },\n      helperMessage: {\n        fontSize: \"sm\",\n      },\n      legend: {\n        fontSize: \"md\",\n      },\n      root: {\n        gap: \"4\",\n      },\n    },\n    lg: {\n      content: {\n        gap: \"6\",\n      },\n      errorMessage: {\n        fontSize: \"md\",\n      },\n      header: {\n        gap: \"1\",\n      },\n      helperMessage: {\n        fontSize: \"md\",\n      },\n      legend: {\n        fontSize: \"lg\",\n      },\n      root: {\n        gap: \"6\",\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        root: {\n          p: \"3\",\n          rounded: \"l2\",\n        },\n      },\n      size: \"sm\",\n      variant: [\"elevated\", \"outline\", \"panel\"],\n    },\n    {\n      css: {\n        root: {\n          p: \"4\",\n          rounded: \"l2\",\n        },\n      },\n      size: \"md\",\n      variant: [\"elevated\", \"outline\", \"panel\"],\n    },\n    {\n      css: {\n        root: {\n          p: \"6\",\n          rounded: \"l2\",\n        },\n      },\n      size: \"lg\",\n      variant: [\"elevated\", \"outline\", \"panel\"],\n    },\n  ],\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"plain\",\n  },\n})\n\nexport type FieldsetStyle = typeof fieldsetStyle\n"
    },
    {
      "name": "fieldset.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FieldsetStyle } from \"./fieldset.style\"\nimport { useId, useMemo } from \"react\"\nimport {\n  createSlotComponent,\n  styled,\n  createContext,\n  dataAttr,\n  useSplitChildren,\n} from \"@yamada-ui/react\"\nimport { fieldsetStyle } from \"./fieldset.style\"\n\ninterface FieldsetContext\n  extends Pick<FieldsetRootProps, \"disabled\" | \"invalid\"> {\n  id?: string\n}\n\nconst [FieldsetContext, useFieldsetContext] = createContext<FieldsetContext>({\n  name: \"FieldsetContext\",\n  strict: false,\n})\n\nexport { FieldsetContext, useFieldsetContext }\n\nexport interface FieldsetRootProps\n  extends HTMLStyledProps<\"fieldset\">,\n    ThemeProps<FieldsetStyle> {\n  /**\n   * If `true`, the fieldset will be disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * The fieldset error message to use.\n   */\n  errorMessage?: ReactNode\n  /**\n   * The fieldset helper message to use.\n   */\n  helperMessage?: ReactNode\n  /**\n   * If `true`, the fieldset will be invalid.\n   *\n   * @default false\n   */\n  invalid?: boolean\n  /**\n   * The fieldset legend to use.\n   */\n  legend?: ReactNode\n  /**\n   * Props the content component.\n   */\n  contentProps?: FieldsetContentProps\n  /**\n   * Props the error message component.\n   */\n  errorMessageProps?: FieldsetErrorMessageProps\n  /**\n   * Props the header component.\n   */\n  headerProps?: FieldsetHeaderProps\n  /**\n   * Props the helper message component.\n   */\n  helperMessageProps?: FieldsetHelperMessageProps\n  /**\n   * Props the legend component.\n   */\n  legendProps?: FieldsetLegendProps\n}\n\nconst {\n  PropsContext: FieldsetPropsContext,\n  usePropsContext: useFieldsetPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<FieldsetRootProps, FieldsetStyle, FieldsetContext>(\n  \"fieldset\",\n  fieldsetStyle,\n)\n\nexport { FieldsetPropsContext, useFieldsetPropsContext }\n\n/**\n * `Fieldset` is a component used to group multiple controls.\n *\n * @see https://yamada-ui.com/components/fieldset\n */\nexport const FieldsetRoot = withProvider<\"fieldset\", FieldsetRootProps>(\n  ({\n    id,\n    children,\n    disabled,\n    errorMessage,\n    helperMessage,\n    invalid,\n    legend,\n    contentProps,\n    errorMessageProps,\n    headerProps,\n    helperMessageProps,\n    legendProps,\n    ...rest\n  }) => {\n    const uuid = useId()\n    const [\n      omittedChildren,\n      customLegend,\n      customHeader,\n      customContent,\n      customHelperMessage,\n      customErrorMessage,\n    ] = useSplitChildren(\n      children,\n      FieldsetLegend,\n      FieldsetHeader,\n      FieldsetContent,\n      FieldsetHelperMessage,\n      FieldsetErrorMessage,\n    )\n\n    id ??= uuid\n\n    const context = useMemo(\n      () => ({\n        id,\n        disabled,\n        invalid,\n      }),\n      [id, disabled, invalid],\n    )\n\n    return (\n      <FieldsetContext value={context}>\n        <styled.fieldset {...rest}>\n          {customHeader || (\n            <FieldsetHeader {...headerProps}>\n              {customLegend ||\n                (legend ? (\n                  <FieldsetLegend {...legendProps}>{legend}</FieldsetLegend>\n                ) : null)}\n\n              {customHelperMessage ||\n                (helperMessage ? (\n                  <FieldsetHelperMessage {...helperMessageProps}>\n                    {helperMessage}\n                  </FieldsetHelperMessage>\n                ) : null)}\n            </FieldsetHeader>\n          )}\n\n          {customContent || (\n            <FieldsetContent {...contentProps}>\n              {omittedChildren}\n            </FieldsetContent>\n          )}\n\n          {customErrorMessage ||\n            (errorMessage ? (\n              <FieldsetErrorMessage {...errorMessageProps}>\n                {errorMessage}\n              </FieldsetErrorMessage>\n            ) : null)}\n        </styled.fieldset>\n      </FieldsetContext>\n    )\n  },\n  \"root\",\n)()\n\nexport interface FieldsetLegendProps extends HTMLStyledProps<\"legend\"> {}\n\nexport const FieldsetLegend = withContext<\"legend\", FieldsetLegendProps>(\n  \"legend\",\n  \"legend\",\n)(undefined, (props) => {\n  const { id, disabled, invalid } = useFieldsetContext() ?? {}\n\n  return {\n    id,\n    \"data-disabled\": dataAttr(disabled),\n    \"data-invalid\": dataAttr(invalid),\n    ...props,\n  }\n})\n\nexport interface FieldsetHeaderProps extends HTMLStyledProps {}\n\nexport const FieldsetHeader = withContext<\"div\", FieldsetHeaderProps>(\n  \"div\",\n  \"header\",\n)()\n\nexport interface FieldsetContentProps extends HTMLStyledProps {}\n\nexport const FieldsetContent = withContext<\"div\", FieldsetContentProps>(\n  \"div\",\n  \"content\",\n)()\n\nexport interface FieldsetHelperMessageProps extends HTMLStyledProps<\"span\"> {}\n\nexport const FieldsetHelperMessage = withContext<\n  \"span\",\n  FieldsetHelperMessageProps\n>(\"span\", \"helperMessage\")(undefined, (props) => {\n  const { id } = useFieldsetContext() ?? {}\n\n  return { \"aria-describedby\": id, ...props }\n})\n\nexport interface FieldsetErrorMessageProps extends HTMLStyledProps<\"span\"> {}\n\nexport const FieldsetErrorMessage = withContext<\n  \"span\",\n  FieldsetErrorMessageProps\n>((props) => {\n  const { invalid } = useFieldsetContext() ?? {}\n\n  return (\n    <styled.span\n      aria-live={invalid ? \"polite\" : undefined}\n      hidden={!invalid}\n      {...props}\n    />\n  )\n}, \"errorMessage\")()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./fieldset.style\"\nexport {\n  FieldsetContent,\n  FieldsetContext,\n  FieldsetErrorMessage,\n  FieldsetHeader,\n  FieldsetHelperMessage,\n  FieldsetLegend,\n  FieldsetPropsContext,\n  FieldsetRoot,\n  useFieldsetContext,\n  useFieldsetPropsContext,\n} from \"./fieldset\"\nexport type {\n  FieldsetContentProps,\n  FieldsetErrorMessageProps,\n  FieldsetHeaderProps,\n  FieldsetHelperMessageProps,\n  FieldsetLegendProps,\n  FieldsetRootProps,\n} from \"./fieldset\"\nexport * as Fieldset from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  FieldsetContent as Content,\n  FieldsetErrorMessage as ErrorMessage,\n  FieldsetHeader as Header,\n  FieldsetHelperMessage as HelperMessage,\n  FieldsetLegend as Legend,\n  FieldsetPropsContext as PropsContext,\n  FieldsetRoot as Root,\n  useFieldsetPropsContext as usePropsContext,\n} from \"./fieldset\"\nexport type {\n  FieldsetContentProps as ContentProps,\n  FieldsetErrorMessageProps as ErrorMessageProps,\n  FieldsetHeaderProps as HeaderProps,\n  FieldsetHelperMessageProps as HelperMessageProps,\n  FieldsetLegendProps as LegendProps,\n  FieldsetRootProps as RootProps,\n} from \"./fieldset\"\n"
    }
  ]
}
