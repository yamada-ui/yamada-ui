{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["slider"],
    "externals": [],
    "hooks": ["use-value"],
    "providers": ["i18n-provider"]
  },
  "dependents": {
    "components": ["alpha-slider"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "hue-slider.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { sliderStyle } from \"../slider\"\n\nexport const hueSliderStyle = defineComponentSlotStyle({\n  base: {\n    overlay: {\n      position: \"absolute\",\n      rounded: \"{track-rounded}\",\n      top: \"0\",\n      _horizontal: {\n        h: \"full\",\n        left: \"calc({thumb-size} / 2 * -1)\",\n        w: \"calc(full + {thumb-size})\",\n      },\n      _vertical: {\n        h: \"calc(full + {thumb-size})\",\n        top: \"calc({thumb-size} / 2 * -1)\",\n        w: \"full\",\n      },\n    },\n    root: {},\n    thumb: {\n      \"--thumb-stroke\": \"colors.white\",\n      borderWidth: \"3px\",\n      boxShadow: \"md\",\n    },\n    track: {\n      flex: \"inherit\",\n      _horizontal: {\n        ms: \"calc({thumb-size} / 2)\",\n        w: \"calc(full - {thumb-size})\",\n      },\n      _vertical: {\n        h: \"calc(full - {thumb-size})\",\n        mt: \"calc({thumb-size} / 2)\",\n      },\n    },\n  },\n\n  props: {\n    /**\n     * The shape of the thumb.\n     *\n     * @default 'circle'\n     */\n    shape: {\n      circle: {\n        root: {\n          ...sliderStyle.props?.shape.circle.root,\n          \"--track-rounded\": \"{thumb-rounded}\",\n        },\n      },\n      rounded: {\n        root: {\n          ...sliderStyle.props?.shape.rounded.root,\n          \"--track-rounded\": \"{thumb-rounded}\",\n        },\n      },\n      square: {\n        root: {\n          ...sliderStyle.props?.shape.square.root,\n          \"--track-rounded\": \"{thumb-rounded}\",\n        },\n      },\n    },\n  },\n\n  variants: {},\n\n  sizes: {\n    sm: {\n      root: {\n        \"--thumb-size\": sliderStyle.sizes?.sm.root[\"--thumb-size\"],\n        \"--track-size\": sliderStyle.sizes?.sm.root[\"--thumb-size\"],\n      },\n    },\n    md: {\n      root: {\n        \"--thumb-size\": sliderStyle.sizes?.md.root[\"--thumb-size\"],\n        \"--track-size\": sliderStyle.sizes?.md.root[\"--thumb-size\"],\n      },\n    },\n    lg: {\n      root: {\n        \"--thumb-size\": sliderStyle.sizes?.lg.root[\"--thumb-size\"],\n        \"--track-size\": sliderStyle.sizes?.lg.root[\"--thumb-size\"],\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    shape: \"circle\",\n  },\n})\n\nexport type HueSliderStyle = typeof hueSliderStyle\n"
    },
    {
      "name": "hue-slider.tsx",
      "content": "\"use client\"\n\nimport type {\n  HTMLStyledProps,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { HueSliderStyle } from \"./hue-slider.style\"\nimport { useCallback, useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { Slider } from \"../slider\"\nimport { hueSliderStyle } from \"./hue-slider.style\"\n\ninterface ComponentContext\n  extends Pick<Required<HueSliderRootProps>, \"max\" | \"min\" | \"orientation\"> {}\n\nexport interface HueSliderRootProps\n  extends WithoutThemeProps<\n      Omit<\n        Slider.RootProps,\n        | \"betweenThumbs\"\n        | \"marks\"\n        | \"marksProps\"\n        | \"max\"\n        | \"rangeFill\"\n        | \"rangeProps\"\n        | \"thumbFill\"\n        | \"thumbProps\"\n        | \"trackFill\"\n        | \"trackProps\"\n      >,\n      HueSliderStyle\n    >,\n    ThemeProps<HueSliderStyle> {\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   *\n   * @default 360\n   */\n  max?: number\n  /**\n   * Props for the overlay element.\n   */\n  overlayProps?: HueSliderOverlayProps\n  /**\n   * Props for the thumb element.\n   */\n  thumbProps?: HueSliderThumbProps\n  /**\n   * Props for the track element.\n   */\n  trackProps?: HueSliderTrackProps\n}\n\nconst {\n  ComponentContext,\n  PropsContext: HueSliderPropsContext,\n  useComponentContext,\n  usePropsContext: useHueSliderPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<HueSliderRootProps, HueSliderStyle, ComponentContext>(\n  \"hue-slider\",\n  hueSliderStyle,\n)\n\nexport { HueSliderPropsContext, useHueSliderPropsContext }\n\n/**\n * `HueSlider` is a component used to allow the user to select a color hue.\n *\n * @see https://yamada-ui.com/components/hue-slider\n */\nexport const HueSliderRoot = withProvider<\"div\", HueSliderRootProps>(\n  ({\n    children,\n    max = 360,\n    min = 0,\n    orientation: orientationProp = \"horizontal\",\n    overlayProps,\n    thumbProps,\n    trackProps,\n    ...rest\n  }) => {\n    const { t } = useI18n(\"hueSlider\")\n    const orientation = useValue(orientationProp)\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return (\n        <HueSliderTrack {...trackProps}>\n          <HueSliderThumb {...thumbProps} />\n\n          <HueSliderOverlay {...overlayProps} />\n        </HueSliderTrack>\n      )\n    }, [children, overlayProps, thumbProps, trackProps])\n    const context = useMemo(\n      () => ({ max, min, orientation }),\n      [max, min, orientation],\n    )\n    const getColorName = useCallback(\n      (hue: number): string => {\n        if (hue < 30 || hue >= 330) return t(\"Red\")\n        if (hue < 90) return t(\"Yellow\")\n        if (hue < 150) return t(\"Green\")\n        if (hue < 210) return t(\"Cyan\")\n        if (hue < 270) return t(\"Blue\")\n        return t(\"Magenta\")\n      },\n      [t],\n    )\n    const getAriaValueText = useCallback(\n      (hue: number) => `${hue}Â°, ${getColorName(hue)}`,\n      [getColorName],\n    )\n\n    return (\n      <ComponentContext value={context}>\n        <Slider.Root\n          getAriaValueText={getAriaValueText}\n          max={max}\n          min={min}\n          orientation={orientation}\n          {...rest}\n        >\n          {computedChildren}\n        </Slider.Root>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)({\n  \"--thumb-fill\": \"transparent\",\n  \"--track-fill\": \"transparent\",\n})\n\nexport interface HueSliderTrackProps extends Slider.TrackProps {}\n\nexport const HueSliderTrack = withContext<\"div\", HueSliderTrackProps>(\n  Slider.Track,\n  \"track\",\n)()\n\nexport interface HueSliderOverlayProps extends HTMLStyledProps {\n  /**\n   * The layers used for the overlay element.\n   */\n  layers?: HTMLStyledProps[]\n}\n\nexport const HueSliderOverlay = withContext<\"fragment\", HueSliderOverlayProps>(\n  ({ layers, ...rest }) => {\n    const { max, min, orientation } = useComponentContext()\n\n    layers ??= [\n      {\n        bgGradient: `linear(${[\n          orientation === \"horizontal\" ? \"to-r\" : \"to-t\",\n          ...Array.from({ length: 7 }).map(\n            (_, index) =>\n              `hsl(${Math.round(min + ((max - min) / 6) * index)}, 100%, 50%)`,\n          ),\n        ].join(\", \")})`,\n        boxShadow: \"inner\",\n      },\n    ]\n\n    return (\n      <>\n        {layers.map((props, index) => (\n          <styled.div\n            key={index}\n            data-orientation={orientation}\n            {...rest}\n            {...props}\n          />\n        ))}\n      </>\n    )\n  },\n  \"overlay\",\n)()\n\nexport interface HueSliderThumbProps extends Slider.ThumbProps {}\n\nexport const HueSliderThumb = withContext<\"div\", HueSliderThumbProps>(\n  Slider.Thumb,\n  \"thumb\",\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./hue-slider.style\"\nexport type {\n  HueSliderOverlayProps,\n  HueSliderRootProps,\n  HueSliderThumbProps,\n  HueSliderTrackProps,\n} from \"./hue-slider\"\nexport {\n  HueSliderOverlay,\n  HueSliderPropsContext,\n  HueSliderRoot,\n  HueSliderThumb,\n  HueSliderTrack,\n  useHueSliderPropsContext,\n} from \"./hue-slider\"\nexport * as HueSlider from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  HueSliderOverlay as Overlay,\n  HueSliderPropsContext as PropsContext,\n  HueSliderRoot as Root,\n  HueSliderThumb as Thumb,\n  HueSliderTrack as Track,\n  useHueSliderPropsContext as usePropsContext,\n} from \"./hue-slider\"\nexport type {\n  HueSliderOverlayProps as OverlayProps,\n  HueSliderRootProps as RootProps,\n  HueSliderThumbProps as ThumbProps,\n  HueSliderTrackProps as TrackProps,\n} from \"./hue-slider\"\n"
    }
  ]
}
