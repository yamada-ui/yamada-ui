{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon"],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "blockquote.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const blockquoteStyle = defineComponentSlotStyle({\n  base: {\n    caption: {\n      color: \"muted\",\n      fontSize: \"sm\",\n    },\n    cite: {},\n    content: {},\n    icon: {\n      fontSize: \"xl\",\n      left: \"0\",\n      position: \"absolute\",\n      top: \"0.5\",\n    },\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"sm\",\n      position: \"relative\",\n    },\n  },\n\n  props: {\n    /**\n     * The alignment of the blockquote.\n     *\n     * @default \"start\"\n     */\n    justify: {\n      center: {\n        root: {\n          alignItems: \"center\",\n          textAlign: \"center\",\n        },\n      },\n      end: {\n        root: {\n          alignItems: \"end\",\n          textAlign: \"end\",\n        },\n      },\n      start: {\n        root: {\n          alignItems: \"start\",\n          textAlign: \"start\",\n        },\n      },\n    },\n  },\n\n  variants: {\n    plain: {\n      icon: {\n        color: \"colorScheme.solid\",\n      },\n      root: {\n        _hasIcon: {\n          ps: \"lg\",\n        },\n      },\n    },\n    solid: {\n      icon: {\n        color: \"colorScheme.solid\",\n      },\n      root: {\n        borderStart: \"4px solid {colorScheme.solid}\",\n        px: \"md\",\n      },\n    },\n    subtle: {\n      icon: {\n        color: \"colorScheme.fg\",\n      },\n      root: {\n        borderStart: \"4px solid {colorScheme.muted}\",\n        px: \"md\",\n      },\n    },\n  },\n\n  defaultProps: {\n    variant: \"subtle\",\n    justify: \"start\",\n  },\n})\n\nexport type BlockquoteStyle = typeof blockquoteStyle\n"
    },
    {
      "name": "blockquote.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { BlockquoteStyle } from \"./blockquote.style\"\nimport { useMemo } from \"react\"\nimport {\n  createSlotComponent,\n  styled,\n  useFindChild,\n  useValidChildren,\n} from \"@yamada-ui/react\"\nimport { QuoteIcon } from \"../icon\"\nimport { blockquoteStyle } from \"./blockquote.style\"\n\ninterface ComponentContext\n  extends Pick<BlockquoteContentProps, \"citeUrl\">,\n    Pick<BlockquoteCaptionProps, \"withDash\"> {}\n\nexport interface BlockquoteRootProps\n  extends Omit<HTMLStyledProps<\"figure\">, \"cite\">,\n    ThemeProps<BlockquoteStyle>,\n    Pick<BlockquoteContentProps, \"citeUrl\">,\n    Pick<BlockquoteCaptionProps, \"withDash\"> {\n  /**\n   * The citation of the blockquote.\n   */\n  cite?: ReactNode\n  /**\n   * The icon of the blockquote.\n   */\n  icon?: ReactNode\n  /**\n   * The props for the `BlockquoteCaption` component.\n   */\n  captionProps?: HTMLStyledProps<\"figcaption\">\n  /**\n   * The props for the `BlockquoteCite` component.\n   */\n  citeProps?: HTMLStyledProps<\"cite\">\n  /**\n   * The props for the `BlockquoteContent` component.\n   */\n  contentProps?: HTMLStyledProps<\"blockquote\">\n}\n\nconst {\n  ComponentContext,\n  PropsContext: BlockquotePropsContext,\n  useComponentContext,\n  usePropsContext: useBlockquotePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<BlockquoteRootProps, BlockquoteStyle, ComponentContext>(\n  \"blockquote\",\n  blockquoteStyle,\n)\n\nexport { BlockquotePropsContext, useBlockquotePropsContext }\n\n/**\n * `Blockquote` is a component that represents a blockquote. By default, it renders a `blockquote` element.\n *\n * @see https://yamada-ui.com/components/blockquote\n */\nexport const BlockquoteRoot = withProvider<\"figure\", BlockquoteRootProps>(\n  ({\n    children,\n    cite,\n    citeUrl,\n    icon,\n    withDash,\n    captionProps,\n    citeProps,\n    contentProps,\n    ...rest\n  }) => {\n    const validChildren = useValidChildren(children)\n    const customBlockquoteContent = useFindChild(\n      validChildren,\n      BlockquoteContent,\n    )\n    const customBlockquoteCaption = useFindChild(\n      validChildren,\n      BlockquoteCaption,\n    )\n\n    const context = useMemo(() => ({ citeUrl, withDash }), [citeUrl, withDash])\n\n    return (\n      <ComponentContext value={context}>\n        <styled.figure {...rest}>\n          {icon}\n\n          {customBlockquoteContent ?? (\n            <BlockquoteContent {...contentProps}>{children}</BlockquoteContent>\n          )}\n\n          {customBlockquoteCaption ??\n            (cite ? (\n              <BlockquoteCaption {...captionProps}>\n                <BlockquoteCite {...citeProps}>{cite}</BlockquoteCite>\n              </BlockquoteCaption>\n            ) : null)}\n        </styled.figure>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)()\n\nexport interface BlockquoteContentProps extends HTMLStyledProps<\"blockquote\"> {\n  /**\n   * The URL of the citation of the blockquote.\n   */\n  citeUrl?: string\n}\n\nexport const BlockquoteContent = withContext<\n  \"blockquote\",\n  BlockquoteContentProps\n>(\"blockquote\", \"content\")(\n  undefined,\n  ({ cite, citeUrl: citeUrlProp, ...rest }) => {\n    const { citeUrl } = useComponentContext()\n\n    return { ...rest, citeurl: cite ?? citeUrlProp ?? citeUrl }\n  },\n)\n\nexport interface BlockquoteCaptionProps extends HTMLStyledProps<\"figcaption\"> {\n  /**\n   * If `true`, the dash will be shown.\n   *\n   * @default false\n   */\n  withDash?: boolean\n}\n\nexport const BlockquoteCaption = withContext<\n  \"figcaption\",\n  BlockquoteCaptionProps\n>(\"figcaption\", \"caption\")(\n  undefined,\n  ({ children, withDash: withDashProp, ...rest }) => {\n    const { withDash } = useComponentContext()\n\n    withDashProp ??= withDash\n\n    return {\n      ...rest,\n      children: (\n        <>\n          {withDashProp ? <>&mdash;</> : null} {children}\n        </>\n      ),\n    }\n  },\n)\n\nexport interface BlockquoteCiteProps extends HTMLStyledProps<\"cite\"> {}\n\nexport const BlockquoteCite = withContext<\"cite\", BlockquoteCiteProps>(\n  \"cite\",\n  \"cite\",\n)()\n\nexport interface BlockquoteIconProps extends HTMLStyledProps<\"svg\"> {}\n\nexport const BlockquoteIcon = withContext<\"svg\", BlockquoteIconProps>(\n  QuoteIcon,\n  \"icon\",\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./blockquote.style\"\nexport {\n  BlockquoteCaption,\n  BlockquoteCite,\n  BlockquoteContent,\n  BlockquoteIcon,\n  BlockquotePropsContext,\n  BlockquoteRoot,\n  useBlockquotePropsContext,\n} from \"./blockquote\"\nexport type {\n  BlockquoteCaptionProps,\n  BlockquoteCiteProps,\n  BlockquoteContentProps,\n  BlockquoteIconProps,\n  BlockquoteRootProps,\n} from \"./blockquote\"\nexport * as Blockquote from \"./namespace\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export type {\n  BlockquoteCaptionProps as CaptionProps,\n  BlockquoteCiteProps as CiteProps,\n  BlockquoteContentProps as ContentProps,\n  BlockquoteIconProps as IconProps,\n  BlockquoteRootProps as RootProps,\n} from \"./blockquote\"\nexport {\n  BlockquoteCaption as Caption,\n  BlockquoteCite as Cite,\n  BlockquoteContent as Content,\n  BlockquoteIcon as Icon,\n  BlockquotePropsContext as PropsContext,\n  BlockquoteRoot as Root,\n  useBlockquotePropsContext as usePropsContext,\n} from \"./blockquote\"\n"
    }
  ]
}
