{
  "InfiniteScrollArea": {
    "behavior": {
      "type": "ScrollBehavior",
      "description": "Determines whether scrolling is instant or animates smoothly.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "finish": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The infinite scroll area finish to use.",
      "required": false
    },
    "indexRef": {
      "type": "RefObject<(index: number) => void>",
      "description": "Ref to a reset index function.",
      "required": false
    },
    "initialLoad": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, invoke `onLoad` function for the first time.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the infinite scroll is disabled.",
      "required": false
    },
    "isReverse": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, reverse direction.",
      "required": false
    },
    "loading": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The infinite scroll area loading to use.",
      "required": false
    },
    "onLoad": {
      "type": "({\n  entry,\n  finish,\n  index,\n}: {\n  finish: () => void\n  index: number\n  entry?: IntersectionObserverEntry | undefined\n}) => void | Promise<void>",
      "description": "The callback invoked when trigger is intersect.",
      "required": false
    },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'vertical'",
      "description": "The orientation of the infinite scroll.",
      "required": false
    },
    "resetRef": {
      "type": "RefObject<\n  (index?: number | undefined, runScroll?: boolean | undefined) => void\n>",
      "description": "Ref to a reset function.",
      "required": false
    },
    "rootMargin": {
      "type": "string",
      "description": "Margin around the root. Can have values similar to the CSS margin property,\ne.g. \"10px 20px 30px 40px\" (top, right, bottom, left).",
      "required": false
    },
    "rootRef": {
      "type": "RefObject<HTMLElement>",
      "description": "The element that is used as the viewport for checking visibility of the target.\nDefaults to the browser viewport if not specified or if `null`.",
      "required": false
    },
    "size": {
      "type": "string",
      "description": "The size of the InfiniteScrollArea.",
      "required": false
    },
    "startIndex": {
      "type": "number",
      "defaultValue": "1",
      "description": "If set the `onLoad` function will start from the given index.\nIf `initialLoad` is `true`, index starts from `0`.",
      "required": false
    },
    "threshold": {
      "type": "number | number[]",
      "description": "Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.",
      "required": false
    },
    "triggerProps": {
      "type": "HTMLUIProps",
      "description": "Props for infinite scroll area trigger component.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the InfiniteScrollArea.",
      "required": false
    }
  }
}
