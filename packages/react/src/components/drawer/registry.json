{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [
      "modal",
      "button",
      "close-button",
      "focus-lock",
      "motion",
      "portal",
      "slide",
      "fade"
    ],
    "externals": ["motion@12.18.1", "react-remove-scroll@^2.7.1"],
    "hooks": ["use-value"],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "drawer.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { modalStyle } from \"../modal\"\n\nexport const drawerStyle = defineComponentSlotStyle({\n  base: {\n    ...modalStyle.base,\n    body: {\n      ...modalStyle.base?.body,\n      overflow: \"auto\",\n    },\n    content: {\n      ...modalStyle.base?.content,\n      position: \"fixed\",\n      rounded: \"l4\",\n    },\n    dragBar: {\n      bg: \"bg.subtle\",\n      position: \"absolute\",\n      rounded: \"full\",\n    },\n  },\n\n  props: {\n    /**\n     * The placement of the drawer.\n     *\n     * @default 'inline-end'\n     */\n    placement: {\n      \"block-end\": {\n        content: { maxW: \"full\", roundedBottom: \"0\" },\n        dragBar: {\n          left: \"50%\",\n          minH: \"2\",\n          top: \"md\",\n          transform: \"translateX(-50%)\",\n          w: \"3xs\",\n        },\n      },\n      \"block-start\": {\n        content: { maxW: \"full\", roundedTop: \"0\" },\n        dragBar: {\n          bottom: \"md\",\n          left: \"50%\",\n          minH: \"2\",\n          transform: \"translateX(-50%)\",\n          w: \"3xs\",\n        },\n      },\n      \"inline-end\": {\n        content: { roundedRight: \"0\" },\n        dragBar: {\n          h: \"3xs\",\n          left: \"md\",\n          minW: \"2\",\n          top: \"50%\",\n          transform: \"translateY(-50%)\",\n        },\n      },\n      \"inline-start\": {\n        content: { roundedLeft: \"0\" },\n        dragBar: {\n          h: \"3xs\",\n          minW: \"2\",\n          right: \"md\",\n          top: \"50%\",\n          transform: \"translateY(-50%)\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    xs: { content: { maxW: \"xs\" } },\n    sm: { content: { maxW: \"sm\" } },\n    md: { content: { maxW: \"md\" } },\n    lg: { content: { maxW: \"lg\" } },\n    xl: { content: { maxW: \"xl\" } },\n    \"2xl\": { content: { maxW: \"2xl\" } },\n    \"3xl\": { content: { maxW: \"3xl\" } },\n    \"4xl\": { content: { maxW: \"4xl\" } },\n    \"5xl\": { content: { maxW: \"5xl\" } },\n    \"6xl\": { content: { maxW: \"6xl\" } },\n    full: { content: { minH: \"dvh\", minW: \"vw\", rounded: \"0\" } },\n  },\n\n  compounds: [\n    {\n      css: {\n        content: {\n          pb: \"md\",\n          _after: {\n            bg: \"bg.panel\",\n            display: \"block\",\n            h: \"dvh\",\n            left: \"0\",\n            position: \"absolute\",\n            right: \"0\",\n            top: \"calc(-100dvh + 1px)\",\n            w: \"full\",\n          },\n        },\n      },\n      closeOnDrag: true,\n      placement: \"block-start\",\n      withDragBar: true,\n    },\n    {\n      css: {\n        content: {\n          pt: \"md\",\n          _after: {\n            bg: \"bg.panel\",\n            bottom: \"calc(-100dvh + 1px)\",\n            display: \"block\",\n            h: \"dvh\",\n            left: \"0\",\n            position: \"absolute\",\n            right: \"0\",\n            w: \"full\",\n          },\n        },\n      },\n      closeOnDrag: true,\n      placement: \"block-end\",\n      withDragBar: true,\n    },\n    {\n      css: {\n        content: {\n          ps: \"md\",\n          _after: {\n            bg: \"bg.panel\",\n            bottom: \"0\",\n            display: \"block\",\n            h: \"dvh\",\n            position: \"absolute\",\n            right: \"calc(-100% + 1px)\",\n            top: \"0\",\n            w: \"full\",\n          },\n        },\n      },\n      closeOnDrag: true,\n      placement: \"inline-end\",\n      withDragBar: true,\n    },\n    {\n      css: {\n        content: {\n          pe: \"md\",\n          _after: {\n            bg: \"bg.panel\",\n            bottom: \"0\",\n            display: \"block\",\n            h: \"dvh\",\n            left: \"calc(-100% + 1px)\",\n            position: \"absolute\",\n            top: \"0\",\n            w: \"full\",\n          },\n        },\n      },\n      closeOnDrag: true,\n      placement: \"inline-start\",\n      withDragBar: true,\n    },\n  ],\n\n  defaultProps: {\n    size: \"lg\",\n    placement: \"inline-end\",\n  },\n})\n\nexport type DrawerStyle = typeof drawerStyle\n"
    },
    {
      "name": "drawer.tsx",
      "content": "\"use client\"\n\nimport type { FC, PropsWithChildren, ReactNode } from \"react\"\nimport type {\n  HTMLProps,\n  HTMLStyledProps,\n  SimplePlacement,\n  StyleValue,\n  ThemeProps,\n} from \"@yamada-ui/react\"\nimport type { ButtonProps } from \"../button\"\nimport type { CloseButtonProps } from \"../close-button\"\nimport type { FocusLockProps } from \"../focus-lock\"\nimport type { HTMLMotionProps, MotionTransitionProps } from \"../motion\"\nimport type { PortalProps } from \"../portal\"\nimport type { SlideProps } from \"../slide\"\nimport type { DrawerStyle } from \"./drawer.style\"\nimport type { UseDrawerProps, UseDrawerReturn } from \"./use-drawer\"\nimport { AnimatePresence } from \"motion/react\"\nimport { useMemo } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport {\n  createSlotComponent,\n  styled,\n  cast,\n  isArray,\n  useSplitChildren,\n  wrapOrPassProps,\n} from \"@yamada-ui/react\"\nimport { useValue } from \"../../hooks/use-value\"\nimport { Button } from \"../button\"\nimport { CloseButton } from \"../close-button\"\nimport { fadeVariants } from \"../fade\"\nimport { FocusLock } from \"../focus-lock\"\nimport { motion } from \"../motion\"\nimport { Portal } from \"../portal\"\nimport { Slide } from \"../slide\"\nimport { drawerStyle } from \"./drawer.style\"\nimport { useDrawer } from \"./use-drawer\"\n\ninterface ComponentContext\n  extends Omit<UseDrawerReturn, \"getRootProps\">,\n    Pick<\n      DrawerRootProps,\n      \"duration\" | \"placement\" | \"withCloseButton\" | \"withDragBar\"\n    > {}\n\nexport interface DrawerRootProps\n  extends ThemeProps<DrawerStyle>,\n    Omit<UseDrawerProps, \"placement\" | \"title\">,\n    Pick<\n      FocusLockProps,\n      | \"autoFocus\"\n      | \"finalFocusRef\"\n      | \"initialFocusRef\"\n      | \"lockFocusAcrossFrames\"\n      | \"restoreFocus\"\n    >,\n    ShorthandDrawerContentProps {\n  /**\n   * Handle zoom or pinch gestures on iOS devices when scroll locking is enabled.\n   *\n   * @default false.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the drawer opens.\n   *\n   * @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * The animation duration.\n   */\n  duration?: MotionTransitionProps[\"duration\"]\n  /**\n   * The placement of the drawer.\n   *\n   * @default 'inline-end'\n   */\n  placement?: StyleValue<SimplePlacement>\n  /**\n   * The modal trigger to use.\n   */\n  trigger?: ReactNode\n  /**\n   * If `true`, display the drawer close button.\n   *\n   * @default true\n   */\n  withCloseButton?: boolean\n  /**\n   * If `true`, display the drag bar when `closeOnDrag` is `true`.\n   *\n   * @default true\n   */\n  withDragBar?: boolean\n  /**\n   * If `true`, display the drawer overlay.\n   *\n   * @default true\n   */\n  withOverlay?: boolean\n  /**\n   * Props to be forwarded to the portal component.\n   */\n  portalProps?: Omit<PortalProps, \"children\">\n  /**\n   * Callback function to run side effects after the drawer has closed.\n   */\n  onCloseComplete?: () => void\n}\n\nconst {\n  ComponentContext,\n  PropsContext: DrawerPropsContext,\n  useComponentContext,\n  usePropsContext: useDrawerPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<DrawerRootProps, DrawerStyle, ComponentContext>(\n  \"drawer\",\n  drawerStyle,\n)\n\nexport { DrawerPropsContext, useDrawerPropsContext }\n\n/**\n * `Drawer` is a component for a panel that appears from the edge of the screen.\n *\n * @see https://yamada-ui.com/components/drawer\n */\nexport const DrawerRoot = withProvider<\"div\", DrawerRootProps, \"placement\">(\n  ({\n    allowPinchZoom = false,\n    autoFocus,\n    blockScrollOnMount = true,\n    body,\n    cancel,\n    children,\n    closeOnDrag,\n    dragConstraints,\n    dragElastic,\n    dragOffset,\n    dragVelocity,\n    duration = { enter: 0.4, exit: 0.3 },\n    finalFocusRef,\n    footer,\n    header,\n    initialFocusRef,\n    lockFocusAcrossFrames = true,\n    middle,\n    placement: placementProp,\n    restoreFocus,\n    success,\n    title,\n    trigger,\n    withCloseButton = !closeOnDrag,\n    withDragBar = true,\n    withOverlay = true,\n    portalProps,\n    onCancel,\n    onCloseComplete,\n    onMiddle,\n    onSuccess,\n    ...props\n  }) => {\n    const placement = useValue(placementProp)\n    const [omittedChildren, openTrigger, customOverlay] = useSplitChildren(\n      children,\n      DrawerOpenTrigger,\n      DrawerOverlay,\n    )\n    const hasChildren = isArray(omittedChildren) && !!omittedChildren.length\n    const { open, getRootProps, ...rest } = useDrawer({\n      closeOnDrag,\n      dragConstraints,\n      dragElastic,\n      dragOffset,\n      dragVelocity,\n      placement,\n      ...props,\n    })\n    const customOpenTrigger = trigger ? (\n      <DrawerOpenTrigger>{trigger}</DrawerOpenTrigger>\n    ) : null\n\n    const context = useMemo(\n      () => ({\n        duration,\n        open,\n        placement,\n        withCloseButton,\n        withDragBar,\n        ...rest,\n      }),\n      [duration, open, withDragBar, placement, withCloseButton, rest],\n    )\n\n    return (\n      <ComponentContext value={context}>\n        {openTrigger ?? customOpenTrigger}\n\n        <AnimatePresence onExitComplete={onCloseComplete}>\n          {open ? (\n            <Portal {...portalProps}>\n              <FocusLock\n                autoFocus={autoFocus}\n                finalFocusRef={finalFocusRef}\n                initialFocusRef={initialFocusRef}\n                lockFocusAcrossFrames={lockFocusAcrossFrames}\n                restoreFocus={restoreFocus}\n              >\n                <RemoveScroll\n                  allowPinchZoom={allowPinchZoom}\n                  enabled={blockScrollOnMount}\n                  forwardProps\n                >\n                  <styled.div {...getRootProps()}>\n                    {customOverlay ?? (withOverlay ? <DrawerOverlay /> : null)}\n\n                    {hasChildren ? (\n                      omittedChildren\n                    ) : (\n                      <ShorthandDrawerContent\n                        body={body}\n                        cancel={cancel}\n                        footer={footer}\n                        header={header}\n                        middle={middle}\n                        success={success}\n                        title={title}\n                        onCancel={onCancel}\n                        onMiddle={onMiddle}\n                        onSuccess={onSuccess}\n                      />\n                    )}\n                  </styled.div>\n                </RemoveScroll>\n              </FocusLock>\n            </Portal>\n          ) : null}\n        </AnimatePresence>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n  { transferProps: [\"placement\"] },\n)()\n\nexport interface DrawerOpenTriggerProps extends HTMLStyledProps<\"button\"> {}\n\nexport const DrawerOpenTrigger = withContext<\"button\", DrawerOpenTriggerProps>(\n  \"button\",\n  { name: \"OpenTrigger\", slot: [\"trigger\", \"open\"] },\n)(undefined, (props) => {\n  const { getOpenTriggerProps } = useComponentContext()\n\n  return { asChild: true, ...getOpenTriggerProps(props) }\n})\n\nexport interface DrawerCloseTriggerProps extends HTMLStyledProps<\"button\"> {}\n\nexport const DrawerCloseTrigger = withContext<\n  \"button\",\n  DrawerCloseTriggerProps\n>(\"button\", { name: \"CloseTrigger\", slot: [\"trigger\", \"close\"] })(\n  undefined,\n  (props) => {\n    const { getCloseTriggerProps } = useComponentContext()\n\n    return { asChild: true, ...getCloseTriggerProps(props) }\n  },\n)\n\nexport interface DrawerCloseButtonProps extends CloseButtonProps {}\n\nexport const DrawerCloseButton = withContext<\"button\", DrawerCloseButtonProps>(\n  CloseButton,\n  \"closeButton\",\n)(undefined, (props) => {\n  const { getCloseButtonProps } = useComponentContext()\n\n  return { ...getCloseButtonProps(props) }\n})\n\nexport interface DrawerOverlayProps extends HTMLMotionProps {}\n\nexport const DrawerOverlay = withContext<\"div\", DrawerOverlayProps>((props) => {\n  const { duration, getOverlayProps } = useComponentContext()\n\n  return (\n    <motion.div\n      animate=\"enter\"\n      custom={{ duration }}\n      exit=\"exit\"\n      initial=\"exit\"\n      variants={fadeVariants}\n      {...cast<HTMLMotionProps>(getOverlayProps(cast<HTMLProps>(props)))}\n    />\n  )\n}, \"overlay\")()\n\nexport interface DrawerContentProps\n  extends Omit<HTMLMotionProps<\"section\">, \"children\">,\n    PropsWithChildren {}\n\nexport const DrawerContent = withContext<\"div\", DrawerContentProps>(\n  ({ children, ...rest }) => {\n    const {\n      closeOnDrag,\n      duration,\n      open,\n      placement,\n      withCloseButton,\n      withDragBar,\n      getContentProps,\n    } = useComponentContext()\n    const [omittedChildren, customCloseButton, customDragBar] =\n      useSplitChildren(children, DrawerCloseButton, DrawerDragBar)\n\n    return (\n      <Slide\n        as=\"section\"\n        duration={duration}\n        open={open}\n        placement={placement}\n        {...(getContentProps(rest) as SlideProps)}\n      >\n        {customCloseButton ?? (withCloseButton ? <DrawerCloseButton /> : null)}\n        {customDragBar ??\n          (withDragBar && closeOnDrag ? <DrawerDragBar /> : null)}\n\n        {omittedChildren}\n      </Slide>\n    )\n  },\n  \"content\",\n)()\n\ninterface ShorthandDrawerContentProps {\n  /**\n   * The drawer body to use.\n   */\n  body?: DrawerBodyProps | ReactNode\n  /**\n   * The drawer cancel button to use.\n   */\n  cancel?: ButtonProps | ReactNode\n  /**\n   * The drawer footer to use.\n   */\n  footer?: DrawerFooterProps | ReactNode\n  /**\n   * The drawer header to use.\n   */\n  header?: DrawerHeaderProps | ReactNode\n  /**\n   * The drawer middle button to use.\n   */\n  middle?: ButtonProps | ReactNode\n  /**\n   * The drawer success button to use.\n   */\n  success?: ButtonProps | ReactNode\n  /**\n   * The drawer title to use.\n   */\n  title?: DrawerTitleProps | ReactNode\n  /**\n   * The callback invoked when cancel button clicked.\n   */\n  onCancel?: (onClose: () => void) => void\n  /**\n   * The callback invoked when middle button clicked.\n   */\n  onMiddle?: (onClose: () => void) => void\n  /**\n   * The callback invoked when success button clicked.\n   */\n  onSuccess?: (onClose: () => void) => void\n}\n\nexport const ShorthandDrawerContent: FC<ShorthandDrawerContentProps> = ({\n  body,\n  cancel,\n  footer,\n  header,\n  middle,\n  success,\n  title,\n  onCancel,\n  onMiddle,\n  onSuccess,\n}) => {\n  const { onClose } = useComponentContext()\n  const customHeader = wrapOrPassProps(DrawerHeader, header)\n  const customTitle = wrapOrPassProps(DrawerTitle, title)\n  const customBody = wrapOrPassProps(DrawerBody, body)\n  const customFooter = wrapOrPassProps(DrawerFooter, footer)\n  const customCancel = wrapOrPassProps(Button, cancel, {\n    variant: \"ghost\",\n    onClick: () => (onCancel ? onCancel(onClose) : onClose()),\n  })\n  const customMiddle = wrapOrPassProps(Button, middle, {\n    colorScheme: \"secondary\",\n    onClick: () => (onMiddle ? onMiddle(onClose) : onClose()),\n  })\n  const customSuccess = wrapOrPassProps(Button, success, {\n    colorScheme: \"primary\",\n    onClick: () => (onSuccess ? onSuccess(onClose) : onClose()),\n  })\n\n  return (\n    <DrawerContent>\n      {customHeader ??\n        (customTitle ? <DrawerHeader>{customTitle}</DrawerHeader> : null)}\n      {customBody}\n      {customFooter ??\n        (customCancel || customMiddle || customSuccess ? (\n          <DrawerFooter>\n            {customCancel}\n            {customMiddle}\n            {customSuccess}\n          </DrawerFooter>\n        ) : null)}\n    </DrawerContent>\n  )\n}\n\nexport interface DrawerDragBarProps extends HTMLStyledProps {}\n\nexport const DrawerDragBar = withContext<\"div\", DrawerDragBarProps>(\n  \"div\",\n  \"dragBar\",\n)(undefined, (props) => {\n  const { getDragBarProps } = useComponentContext()\n\n  return { ...getDragBarProps(props) }\n})\n\nexport interface DrawerHeaderProps extends HTMLStyledProps<\"header\"> {}\n\nexport const DrawerHeader = withContext<\"header\", DrawerHeaderProps>(\n  \"header\",\n  \"header\",\n)(undefined, (props) => {\n  const { getHeaderProps } = useComponentContext()\n\n  return { ...getHeaderProps(props) }\n})\n\nexport interface DrawerTitleProps extends HTMLStyledProps<\"h2\"> {}\n\nexport const DrawerTitle = withContext<\"h2\", DrawerTitleProps>(\"h2\", \"title\")(\n  undefined,\n  (props) => {\n    const { getTitleProps } = useComponentContext()\n\n    return { ...getTitleProps(props) }\n  },\n)\n\nexport interface DrawerBodyProps extends HTMLStyledProps {}\n\nexport const DrawerBody = withContext<\"div\", DrawerBodyProps>(\"div\", \"body\")(\n  undefined,\n  (props) => {\n    const { getBodyProps } = useComponentContext()\n\n    return { ...getBodyProps(props) }\n  },\n)\n\nexport interface DrawerFooterProps extends HTMLStyledProps<\"footer\"> {}\n\nexport const DrawerFooter = withContext<\"footer\", DrawerFooterProps>(\n  \"footer\",\n  \"footer\",\n)(undefined, (props) => {\n  const { getFooterProps } = useComponentContext()\n\n  return { ...getFooterProps(props) }\n})\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./drawer.style\"\nexport {\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerCloseTrigger,\n  DrawerContent,\n  DrawerDragBar,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOpenTrigger,\n  DrawerOverlay,\n  DrawerPropsContext,\n  DrawerRoot,\n  DrawerTitle,\n  useDrawerPropsContext,\n} from \"./drawer\"\nexport type {\n  DrawerBodyProps,\n  DrawerCloseButtonProps,\n  DrawerCloseTriggerProps,\n  DrawerContentProps,\n  DrawerDragBarProps,\n  DrawerFooterProps,\n  DrawerHeaderProps,\n  DrawerOpenTriggerProps,\n  DrawerOverlayProps,\n  DrawerRootProps,\n  DrawerTitleProps,\n} from \"./drawer\"\nexport * as Drawer from \"./namespace\"\nexport * from \"./use-drawer\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  DrawerBody as Body,\n  DrawerCloseButton as CloseButton,\n  DrawerCloseTrigger as CloseTrigger,\n  DrawerContent as Content,\n  DrawerDragBar as DragBar,\n  DrawerFooter as Footer,\n  DrawerHeader as Header,\n  DrawerOpenTrigger as OpenTrigger,\n  DrawerOverlay as Overlay,\n  DrawerPropsContext as PropsContext,\n  DrawerRoot as Root,\n  DrawerTitle as Title,\n  useDrawerPropsContext as usePropsContext,\n} from \"./drawer\"\nexport type {\n  DrawerCloseButtonProps as CloseButtonProps,\n  DrawerCloseTriggerProps as CloseTriggerProps,\n  DrawerContentProps as ContentProps,\n  DrawerDragBarProps as DragBarProps,\n  DrawerFooterProps as FooterProps,\n  DrawerHeaderProps as HeaderProps,\n  DrawerOpenTriggerProps as OpenTriggerProps,\n  DrawerOverlayProps as OverlayProps,\n  DrawerRootProps as RootProps,\n  DrawerTitleProps as TitleProps,\n} from \"./drawer\"\n"
    },
    {
      "name": "use-drawer.ts",
      "content": "\"use client\"\n\nimport type { HTMLProps, PropGetter, SimplePlacement } from \"@yamada-ui/react\"\nimport type { UseModalProps } from \"../modal\"\nimport type { HTMLMotionProps } from \"../motion\"\nimport { useCallback, useMemo } from \"react\"\nimport { cast, handlerAll } from \"@yamada-ui/react\"\nimport { useModal } from \"../modal\"\n\ntype DragEndEventHandler = Required<HTMLMotionProps>[\"onDragEnd\"]\n\nexport interface UseDrawerProps extends UseModalProps {\n  /**\n   * If `true`, then the drawer will close on drag.\n   *\n   * @default false\n   */\n  closeOnDrag?: boolean\n  /**\n   * Applies constraints on the permitted draggable area.\n   *\n   * @default 0\n   */\n  dragConstraints?: number\n  /**\n   * The degree of movement allowed outside constraints. 0 = no movement, 1 = full movement.\n   *\n   * @default 0.1\n   */\n  dragElastic?: number\n  /**\n   * Offset from being dragged to closing.\n   *\n   * @default 80\n   */\n  dragOffset?: number\n  /**\n   * Velocity of the drag that triggers close.\n   *\n   * @default 100\n   */\n  dragVelocity?: number\n  /**\n   * The placement of the drawer.\n   *\n   * @default 'inline-end'\n   */\n  placement?: SimplePlacement\n}\n\nexport const useDrawer = ({\n  closeOnDrag = false,\n  closeOnEsc,\n  closeOnOverlay,\n  dragConstraints = 0,\n  dragElastic = 0.1,\n  dragOffset = 80,\n  dragVelocity = 100,\n  placement = \"inline-end\",\n  onEsc,\n  ...rest\n}: UseDrawerProps = {}) => {\n  const {\n    getContentProps: getModalContentProps,\n    onClose,\n    ...modalProps\n  } = useModal({\n    closeOnEsc,\n    closeOnOverlay,\n    onEsc,\n    ...rest,\n  })\n\n  const drag = useMemo<HTMLMotionProps[\"drag\"]>(() => {\n    if (!closeOnDrag) return false\n\n    switch (placement) {\n      case \"block-start\":\n      case \"block-end\":\n        return \"y\"\n      case \"inline-start\":\n      case \"inline-end\":\n        return \"x\"\n    }\n  }, [placement, closeOnDrag])\n\n  const getDragRestriction = useCallback(\n    (value: number) => {\n      switch (placement) {\n        case \"block-start\":\n          return { bottom: value }\n        case \"block-end\":\n          return { top: value }\n        case \"inline-start\":\n          return { right: value }\n        case \"inline-end\":\n          return { left: value }\n      }\n    },\n    [placement],\n  )\n\n  const onDragEnd: DragEndEventHandler = useCallback(\n    (_, info) => {\n      switch (placement) {\n        case \"block-start\":\n          if (\n            info.velocity.y <= dragVelocity * -1 ||\n            info.offset.y <= dragOffset * -1\n          )\n            onClose()\n          break\n\n        case \"block-end\":\n          if (info.velocity.y >= dragVelocity || info.offset.y >= dragOffset)\n            onClose()\n          break\n\n        case \"inline-start\":\n          if (\n            info.velocity.x <= dragVelocity * -1 ||\n            info.offset.x <= dragOffset * -1\n          )\n            onClose()\n          break\n\n        case \"inline-end\":\n          if (info.velocity.x >= dragVelocity || info.offset.x >= dragOffset)\n            onClose()\n          break\n      }\n    },\n    [placement, dragVelocity, dragOffset, onClose],\n  )\n\n  const getContentProps: PropGetter<HTMLMotionProps<\"section\">> = useCallback(\n    (props = {}) => ({\n      drag,\n      dragConstraints: getDragRestriction(dragConstraints),\n      dragElastic: getDragRestriction(dragElastic),\n      dragMomentum: false,\n      dragSnapToOrigin: true,\n      ...cast<HTMLMotionProps<\"section\">>(\n        getModalContentProps(cast<HTMLProps<\"section\">>(props)),\n      ),\n      onDragEnd: handlerAll(props.onDragEnd, onDragEnd),\n    }),\n    [\n      drag,\n      getDragRestriction,\n      dragConstraints,\n      dragElastic,\n      onDragEnd,\n      getModalContentProps,\n    ],\n  )\n\n  const getDragBarProps: PropGetter = useCallback(\n    (props) => ({\n      ...props,\n    }),\n    [],\n  )\n\n  return {\n    ...modalProps,\n    closeOnDrag,\n    getContentProps,\n    getDragBarProps,\n    onClose,\n  }\n}\n\nexport type UseDrawerReturn = ReturnType<typeof useDrawer>\n"
    }
  ]
}
