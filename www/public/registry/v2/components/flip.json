{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["motion"],
    "externals": ["motion@12.18.1"],
    "hooks": ["use-controllable-state"],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "flip.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const flipStyle = defineComponentSlotStyle({\n  base: {\n    from: {},\n    item: {\n      backfaceVisibility: \"hidden\",\n      position: \"absolute\",\n      top: 0,\n    },\n    root: {\n      position: \"relative\",\n      rounded: \"l1\",\n      userSelect: \"none\",\n      _readOnly: {\n        layerStyle: \"readOnly\",\n      },\n      _disabled: {\n        layerStyle: \"disabled\",\n      },\n    },\n    to: {},\n  },\n})\n\nexport type FlipStyle = typeof flipStyle\n"
    },
    {
      "name": "flip.tsx",
      "content": "\"use client\"\n\nimport type { Variants } from \"motion/react\"\nimport type { ReactNode } from \"react\"\nimport type { KeyframeIdent, Orientation, ThemeProps } from \"@yamada-ui/react\"\nimport type { HTMLMotionProps } from \"../motion\"\nimport type { FlipStyle } from \"./flip.style\"\nimport { useMemo, useRef, useState } from \"react\"\nimport {\n  createSlotComponent,\n  dataAttr,\n  handlerAll,\n  useSafeLayoutEffect,\n} from \"@yamada-ui/react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport { motion } from \"../motion\"\nimport { flipStyle } from \"./flip.style\"\n\nconst flipVariants: Variants = {\n  enter: ({ ident, orientation, visible }) => ({\n    [orientation === \"horizontal\" ? \"rotateY\" : \"rotateX\"]:\n      ident === \"from\" ? (visible ? 180 : 0) : visible ? 0 : 180,\n  }),\n  exit: ({ ident, orientation }) => ({\n    [orientation === \"horizontal\" ? \"rotateY\" : \"rotateX\"]:\n      ident === \"from\" ? 0 : 180,\n  }),\n}\n\ninterface Rect {\n  height?: number\n  width?: number\n}\n\nexport interface FlipProps\n  extends Omit<HTMLMotionProps<\"button\">, \"onChange\">,\n    ThemeProps<FlipStyle> {\n  /**\n   * Passing React elements to \"from\" is required.\n   */\n  from: ReactNode\n  /**\n   * Passing React elements to \"to\" is required.\n   */\n  to: ReactNode\n  /**\n   * You can set the initial state.\n   *\n   * @default 'from'\n   */\n  defaultValue?: KeyframeIdent\n  /**\n   *ã€€The animation delay.\n   *\n   * @default 0\n   */\n  delay?: number\n  /**\n   * If `true`, the component is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * The animation duration.\n   *\n   * @default 0.4\n   */\n  duration?: number\n  /**\n   * The orientation of the flip effect. Determines whether the flip occurs horizontally or vertically.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: Orientation\n  /**\n   * If `true`, the component is readonly.\n   *\n   * @default false\n   */\n  readOnly?: boolean\n  /**\n   * Use this when you want to control the animation from outside the component.\n   */\n  value?: KeyframeIdent\n  /**\n   * This is a callback function that is called when the animation state changes.\n   */\n  onChange?: (value: KeyframeIdent) => void\n}\n\nconst {\n  PropsContext: FlipPropsContext,\n  usePropsContext: useFlipPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<FlipProps, FlipStyle>(\"flip\", flipStyle)\n\nexport { FlipPropsContext, useFlipPropsContext }\n\n/**\n * `Flip` is an animation component that alternates between flipping two elements.\n *\n * @see https://yamada-ui.com/components/flip\n */\nexport const Flip = withProvider(\n  ({\n    defaultValue = \"from\",\n    delay = 0,\n    disabled,\n    duration = 0.4,\n    from,\n    orientation = \"horizontal\",\n    readOnly,\n    to,\n    transition = {},\n    value: valueProp,\n    onChange,\n    onClick: onClickProp,\n    ...rest\n  }) => {\n    const [{ height, width }, setRect] = useState<Rect>({})\n    const fromRef = useRef<HTMLDivElement | null>(null)\n    const toRef = useRef<HTMLDivElement | null>(null)\n    const [value, setValue] = useControllableState({\n      defaultValue,\n      value: valueProp,\n      onChange,\n    })\n    const visible = value === \"to\"\n\n    const style = useMemo(\n      () => ({\n        height: height ? `${height}px` : \"auto\",\n        width: width ? `${width}px` : \"auto\",\n      }),\n      [width, height],\n    )\n\n    const onClick = () => {\n      if (readOnly) return\n\n      setValue((prev) => (prev === \"from\" ? \"to\" : \"from\"))\n    }\n\n    useSafeLayoutEffect(() => {\n      const from = fromRef.current\n      const to = toRef.current\n\n      if (!from || !to) return\n\n      if (\n        from.offsetWidth !== to.offsetWidth ||\n        from.offsetHeight !== to.offsetHeight\n      ) {\n        console.warn(\n          `Flip: \"from\" element (width: ${from.offsetWidth}px, height: ${from.offsetHeight}px) does not match \"to\" element (width: ${to.offsetWidth}px, height: ${to.offsetHeight}px). Please ensure both elements have the same dimensions.`,\n        )\n      }\n\n      setRect({ height: from.offsetHeight, width: from.offsetWidth })\n    }, [fromRef, toRef])\n\n    return (\n      <motion.button\n        type=\"button\"\n        style={style}\n        data-disabled={dataAttr(disabled)}\n        data-orientation={orientation}\n        data-readonly={dataAttr(readOnly)}\n        data-value={value}\n        disabled={disabled}\n        onClick={handlerAll(onClickProp, onClick)}\n        {...rest}\n      >\n        <FlipFrom\n          ref={fromRef}\n          custom={{ orientation, visible }}\n          transition={{ delay, duration, ...transition }}\n        >\n          {from}\n        </FlipFrom>\n\n        <FlipTo\n          ref={toRef}\n          custom={{ orientation, visible }}\n          transition={{ delay, duration, ...transition }}\n        >\n          {to}\n        </FlipTo>\n      </motion.button>\n    )\n  },\n  \"root\",\n)()\n\ninterface FlipFromProps extends HTMLMotionProps<\"span\"> {}\n\nconst FlipFrom = withContext<\"span\", FlipFromProps>(\n  ({ custom, ...rest }) => {\n    return (\n      <motion.span\n        animate=\"enter\"\n        custom={{ ident: \"from\", ...custom }}\n        initial=\"exit\"\n        variants={flipVariants}\n        {...rest}\n      />\n    )\n  },\n  [\"item\", \"from\"],\n)()\n\ninterface FlipToProps extends HTMLMotionProps<\"span\"> {}\n\nconst FlipTo = withContext<\"span\", FlipToProps>(\n  ({ custom, ...rest }) => {\n    return (\n      <motion.span\n        animate=\"enter\"\n        custom={{ ident: \"to\", ...custom }}\n        initial=\"exit\"\n        variants={flipVariants}\n        {...rest}\n      />\n    )\n  },\n  [\"item\", \"to\"],\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./flip.style\"\nexport { Flip, FlipPropsContext, useFlipPropsContext } from \"./flip\"\nexport type { FlipProps } from \"./flip\"\n"
    }
  ]
}
