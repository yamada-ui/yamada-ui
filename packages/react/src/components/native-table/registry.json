{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./native-table.style\"\nexport * as NativeTable from \"./namespace\"\nexport type {\n  CaptionProps,\n  ColgroupProps,\n  ColProps,\n  NativeTableRootProps,\n  TbodyProps,\n  TdProps,\n  TfootProps,\n  TheadProps,\n  ThProps,\n  TrProps,\n} from \"./native-table\"\nexport {\n  Caption,\n  Col,\n  Colgroup,\n  NativeTablePropsContext,\n  NativeTableRoot,\n  Tbody,\n  Td,\n  Tfoot,\n  Th,\n  Thead,\n  Tr,\n  useNativeTablePropsContext,\n} from \"./native-table\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  Caption,\n  Col,\n  Colgroup,\n  NativeTablePropsContext as PropsContext,\n  NativeTableRoot as Root,\n  Tbody,\n  Td,\n  Tfoot,\n  Th,\n  Thead,\n  Tr,\n  useNativeTablePropsContext as usePropsContext,\n} from \"./native-table\"\nexport type {\n  CaptionProps,\n  ColgroupProps,\n  ColProps,\n  NativeTableRootProps as RootProps,\n  TbodyProps,\n  TdProps,\n  TfootProps,\n  TheadProps,\n  ThProps,\n  TrProps,\n} from \"./native-table\"\n"
    },
    {
      "name": "native-table.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const nativeTableStyle = defineComponentSlotStyle({\n  base: {\n    caption: {\n      \"&[data-placement='end']\": {\n        mt: \"sm\",\n      },\n      \"&[data-placement='start']\": {\n        mb: \"sm\",\n      },\n      color: \"fg.muted\",\n      fontSize: \"xs\",\n      fontWeight: \"medium\",\n      textAlign: \"center\",\n    },\n    col: {},\n    colgroup: {},\n    root: {\n      borderCollapse: \"collapse\",\n      fontVariantNumeric: \"lining-nums tabular-nums\",\n      h: \"full\",\n      w: \"full\",\n    },\n    scrollArea: {\n      display: \"block\",\n      maxW: \"full\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      whiteSpace: \"nowrap\",\n    },\n    tbody: {},\n    td: {\n      verticalAlign: \"top\",\n      _numeric: {\n        textAlign: \"end\",\n      },\n    },\n    tfoot: {},\n    th: {\n      fontWeight: \"medium\",\n      verticalAlign: \"middle\",\n      _numeric: {\n        textAlign: \"end\",\n      },\n    },\n    thead: {},\n    tr: {\n      _disabled: {\n        layerStyle: \"disabled\",\n      },\n    },\n  },\n\n  props: {\n    /**\n     * If `true`, highlight the row when the table row is hovered.\n     *\n     * @default false\n     */\n    highlightOnHover: {\n      true: {\n        tbody: {\n          \"& tr\": {\n            cursor: \"pointer\",\n            transitionDuration: \"moderate\",\n            transitionProperty: \"common\",\n            _hover: {\n              bg: \"colorScheme.bg\",\n            },\n          },\n        },\n      },\n    },\n    /**\n     * If `true`, highlight the row when the table row is selected.\n     *\n     * @default false\n     */\n    highlightOnSelected: {\n      true: {\n        tbody: {\n          \"& tr\": {\n            _selected: {\n              bg: \"colorScheme.bg\",\n            },\n          },\n        },\n      },\n    },\n    /**\n     * If `true`, display the sticky footer.\n     *\n     * @default false\n     */\n    stickyFooter: {\n      true: {\n        root: {\n          borderCollapse: \"separate\",\n        },\n        tfoot: {\n          \"& tr\": {\n            bottom: \"0\",\n            position: \"sticky\",\n            zIndex: \"yamcha\",\n          },\n        },\n      },\n    },\n    /**\n     * If `true`, display the sticky header.\n     *\n     * @default false\n     */\n    stickyHeader: {\n      true: {\n        root: {\n          borderCollapse: \"separate\",\n        },\n        thead: {\n          \"& tr\": {\n            position: \"sticky\",\n            top: \"0\",\n            zIndex: \"yamcha\",\n          },\n        },\n      },\n    },\n    /**\n     * If `true`, display striped rows.\n     *\n     * @default false\n     */\n    striped: {\n      true: {},\n    },\n    /**\n     * If `true`, display the outer border of the table.\n     *\n     * @default false\n     */\n    withBorder: {\n      true: {\n        root: { borderWidth: \"1px\" },\n      },\n    },\n    /**\n     * If `true`, display line on the columns of the table.\n     *\n     * @default false\n     */\n    withColumnBorders: {\n      true: {\n        tr: {\n          _notLastChild: { borderRightWidth: \"1px\" },\n        },\n      },\n    },\n  },\n\n  variants: {\n    line: {\n      tbody: {\n        \"& tr\": {\n          _last: {\n            \"& th, td\": {\n              borderBottomWidth: 0,\n            },\n          },\n        },\n      },\n      td: {\n        borderBottomWidth: \"1px\",\n      },\n      tfoot: {\n        \"& tr\": {\n          \"& th\": {\n            borderBottomWidth: 0,\n            borderTopWidth: \"1px\",\n          },\n        },\n      },\n      th: {\n        borderBottomWidth: \"1px\",\n      },\n      tr: {\n        bg: \"bg\",\n      },\n    },\n    outline: {\n      root: {\n        borderWidth: \"1px\",\n      },\n      scrollArea: {\n        borderWidth: \"1px\",\n      },\n      tbody: {\n        \"& tr\": {\n          _last: {\n            \"& th, td\": {\n              borderBottomWidth: 0,\n            },\n          },\n        },\n      },\n      td: {\n        borderBottomWidth: \"1px\",\n      },\n      tfoot: {\n        \"& tr\": {\n          \"& th\": {\n            borderBottomWidth: 0,\n            borderTopWidth: \"1px\",\n          },\n          bg: \"colorScheme.bg\",\n        },\n      },\n      th: {\n        borderBottomWidth: \"1px\",\n      },\n      thead: {\n        \"& tr\": {\n          bg: \"colorScheme.bg\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      root: {\n        fontSize: \"xs\",\n      },\n      td: {\n        px: \"2\",\n        py: \"1\",\n      },\n      th: {\n        px: \"2\",\n        py: \"1\",\n      },\n    },\n    md: {\n      root: {\n        fontSize: \"sm\",\n      },\n      td: {\n        px: \"3\",\n        py: \"2\",\n      },\n      th: {\n        px: \"3\",\n        py: \"2\",\n      },\n    },\n    lg: {\n      root: {\n        fontSize: \"md\",\n      },\n      td: {\n        px: \"4\",\n        py: \"3\",\n      },\n      th: {\n        px: \"4\",\n        py: \"3\",\n      },\n    },\n  },\n\n  compounds: [\n    {\n      css: {\n        tbody: {\n          \"& tr\": {\n            _odd: {\n              bg: \"colorScheme.bg\",\n            },\n          },\n        },\n      },\n      variant: \"line\",\n      layer: \"props\",\n      striped: true,\n    },\n    {\n      css: {\n        tbody: {\n          \"& tr\": {\n            _even: {\n              bg: \"colorScheme.bg\",\n            },\n          },\n        },\n      },\n      variant: \"outline\",\n      layer: \"props\",\n      striped: true,\n    },\n    {\n      css: {\n        root: {\n          borderWidth: \"0\",\n        },\n      },\n      variant: \"outline\",\n      withScrollArea: true,\n    },\n  ],\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"line\",\n  },\n})\n\nexport type NativeTableStyle = typeof nativeTableStyle\n"
    },
    {
      "name": "native-table.tsx",
      "content": "\"use client\"\n\nimport type {\n  CSSProps,\n  HTMLStyledProps,\n  SimpleDirection,\n  ThemeProps,\n} from \"@yamada-ui/react\"\nimport type { NativeTableStyle } from \"./native-table.style\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { nativeTableStyle } from \"./native-table.style\"\n\nexport interface NativeTableRootProps\n  extends HTMLStyledProps<\"table\">,\n    ThemeProps<NativeTableStyle> {\n  /**\n   * The CSS `table-layout` property.\n   */\n  layout?: CSSProps[\"tableLayout\"]\n  /**\n   * Whether to enable the scroll area.\n   *\n   * @default false\n   */\n  withScrollArea?: boolean\n  /**\n   * The props for the scroll area.\n   */\n  scrollAreaProps?: NativeTableAreaProps\n}\n\nconst {\n  PropsContext: NativeTablePropsContext,\n  usePropsContext: useNativeTablePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<NativeTableRootProps, NativeTableStyle>(\n  \"native-table\",\n  nativeTableStyle,\n)\n\nexport { NativeTablePropsContext, useNativeTablePropsContext }\n\n/**\n * `NativeTable` is a component for efficiently organizing and displaying data.\n *\n * @see https://yamada-ui.com/components/native-table\n */\nexport const NativeTableRoot = withProvider(\n  ({ withScrollArea, scrollAreaProps, ...rest }) => {\n    if (withScrollArea) {\n      return (\n        <NativeTableScrollArea {...scrollAreaProps}>\n          <styled.table {...rest} />\n        </NativeTableScrollArea>\n      )\n    } else {\n      return <styled.table {...rest} />\n    }\n  },\n  \"root\",\n)(undefined, ({ layout: tableLayout, ...rest }) => ({\n  tableLayout,\n  ...rest,\n}))\n\ninterface NativeTableAreaProps\n  extends HTMLStyledProps,\n    ThemeProps<NativeTableStyle> {}\n\nconst NativeTableScrollArea = withContext<\"div\", NativeTableAreaProps>(\n  \"div\",\n  \"scrollArea\",\n)()\n\nexport interface CaptionProps extends HTMLStyledProps<\"caption\"> {\n  /**\n   * The placement of the table caption.\n   *\n   * @default 'end'\n   */\n  placement?: SimpleDirection\n}\n\nexport const Caption = withContext<\"caption\", CaptionProps>(\n  \"caption\",\n  \"caption\",\n)(undefined, ({ placement = \"end\", ...rest }) => ({\n  \"data-placement\": placement,\n  captionSide: placement === \"end\" ? \"bottom\" : \"top\",\n  ...rest,\n}))\n\nexport interface TheadProps extends HTMLStyledProps<\"thead\"> {}\n\nexport const Thead = withContext<\"thead\", TheadProps>(\"thead\", \"thead\")()\n\nexport interface TbodyProps extends HTMLStyledProps<\"tbody\"> {}\n\nexport const Tbody = withContext<\"tbody\", TbodyProps>(\"tbody\", \"tbody\")()\n\nexport interface TfootProps extends HTMLStyledProps<\"tfoot\"> {}\n\nexport const Tfoot = withContext<\"tfoot\", TfootProps>(\"tfoot\", \"tfoot\")()\n\nexport interface ColgroupProps extends HTMLStyledProps<\"colgroup\"> {}\n\nexport const Colgroup = withContext<\"colgroup\", ColgroupProps>(\n  \"colgroup\",\n  \"colgroup\",\n)()\n\nexport interface ColProps extends HTMLStyledProps<\"col\"> {}\n\nexport const Col = withContext<\"col\", ColProps>(\"col\", \"col\")()\n\nexport interface ThProps extends HTMLStyledProps<\"th\"> {\n  /**\n   * Aligns the cell content to the right.\n   *\n   * @default false\n   */\n  numeric?: boolean\n}\n\nexport const Th = withContext<\"th\", ThProps>(\"th\", \"th\")(\n  undefined,\n  ({ numeric, ...rest }) => ({\n    \"data-numeric\": numeric,\n    ...rest,\n  }),\n)\n\nexport interface TrProps extends HTMLStyledProps<\"tr\"> {}\n\nexport const Tr = withContext<\"tr\", TrProps>(\"tr\", \"tr\")()\n\nexport interface TdProps extends HTMLStyledProps<\"td\"> {\n  /**\n   * Aligns the cell content to the right.\n   *\n   * @default false\n   */\n  numeric?: boolean\n}\n\nexport const Td = withContext<\"td\", TdProps>(\"td\", \"td\")(\n  undefined,\n  ({ numeric, ...rest }) => ({\n    \"data-numeric\": numeric,\n    ...rest,\n  }),\n)\n"
    }
  ]
}
