{
  "$schema": "https://yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["input", "field", "portal"],
    "externals": [],
    "hooks": ["use-clickable", "use-controllable-state"],
    "providers": []
  },
  "dependents": { "components": ["file-button"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "file-input.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { getInputPaddingStartResetStyle, inputStyle } from \"../input\"\n\nexport const fileInputStyle = defineComponentSlotStyle({\n  base: {\n    root: {\n      ...inputStyle.base,\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      gapX: \"1\",\n      lineHeight: \"1\",\n      _readOnly: {\n        layerStyle: \"readOnly\",\n      },\n    },\n    tag: {\n      display: \"inline-block\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n    },\n  },\n\n  variants: {\n    filled: {\n      root: inputStyle.variants?.filled,\n    },\n    flushed: {\n      root: {\n        ...inputStyle.variants?.flushed,\n        ...getInputPaddingStartResetStyle(),\n      },\n    },\n    outline: {\n      root: inputStyle.variants?.outline,\n    },\n    plain: {\n      root: inputStyle.variants?.plain,\n    },\n  },\n\n  sizes: {\n    xs: {\n      root: { py: \"{--space-y}\", ...inputStyle.sizes?.xs },\n    },\n    sm: {\n      root: { py: \"{--space-y}\", ...inputStyle.sizes?.sm },\n    },\n    md: {\n      root: { py: \"{--space-y}\", ...inputStyle.sizes?.md },\n    },\n    lg: {\n      root: { py: \"{--space-y}\", ...inputStyle.sizes?.lg },\n    },\n    xl: {\n      root: { py: \"{--space-y}\", ...inputStyle.sizes?.xl },\n    },\n    \"2xl\": {\n      root: { py: \"{--space-y}\", ...inputStyle.sizes?.[\"2xl\"] },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n  },\n})\n\nexport type FileInputStyle = typeof fileInputStyle\n"
    },
    {
      "name": "file-input.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport type { UseInputBorderProps } from \"../input\"\nimport type { FileInputStyle } from \"./file-input.style\"\nimport type { UseFileInputProps } from \"./use-file-input\"\nimport { cloneElement, isValidElement, useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { useInputBorder, useInputPropsContext } from \"../input\"\nimport { Portal } from \"../portal\"\nimport { fileInputStyle } from \"./file-input.style\"\nimport { useFileInput } from \"./use-file-input\"\n\nconst defaultFormat: (value: File, index: number) => string = ({ name }) => name\n\nexport interface FileInputProps\n  extends Omit<\n      HTMLStyledProps<\"input\">,\n      \"children\" | \"defaultValue\" | \"onChange\" | \"value\"\n    >,\n    ThemeProps<FileInputStyle>,\n    UseInputBorderProps,\n    FieldProps,\n    Omit<UseFileInputProps, \"children\"> {\n  /**\n   * A callback that returns a React node.\n   */\n  children?: (files: File[] | undefined) => ReactNode\n  /**\n   * The component that displays uploaded files.\n   */\n  component?: (props: { index: number; value: File }) => ReactNode\n  /**\n   * A callback that formats the name of the uploaded file.\n   */\n  format?: (value: File, index: number) => string\n  /**\n   * The string to separate uploaded files.\n   *\n   * @default ','\n   */\n  separator?: string\n}\n\nconst {\n  PropsContext: FileInputPropsContext,\n  usePropsContext: useFileInputPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<FileInputProps, FileInputStyle>(\n  \"file-input\",\n  fileInputStyle,\n)\n\nexport { FileInputPropsContext, useFileInputPropsContext }\n\n/**\n * `FileInput` is a component used for users to select files.\n *\n * @see https://yamada-ui.com/docs/components/file-input\n */\nexport const FileInput = withProvider<\"input\", FileInputProps>(\n  ({\n    children,\n    component,\n    errorBorderColor,\n    focusBorderColor,\n    format = defaultFormat,\n    placeholder,\n    separator = \",\",\n    ...props\n  }) => {\n    const varProps = useInputBorder({ errorBorderColor, focusBorderColor })\n    const { values, getFieldProps, getInputProps } = useFileInput(props)\n\n    const cloneChildren = useMemo(() => {\n      if (!values?.length)\n        return (\n          <styled.span overflow=\"hidden\" whiteSpace=\"nowrap\">\n            {placeholder}\n          </styled.span>\n        )\n\n      if (children) return children(values)\n\n      return values.map((value, index) => {\n        const last = values.length === index + 1\n\n        if (component) {\n          const node = component({ index, value })\n\n          if (isValidElement(node)) {\n            return cloneElement(node, { key: index })\n          } else {\n            return node\n          }\n        } else {\n          return (\n            <FileInputTag key={index}>\n              {format(value, index)}\n              {!last ? separator : null}\n            </FileInputTag>\n          )\n        }\n      })\n    }, [children, format, placeholder, separator, component, values])\n\n    return (\n      <>\n        <Portal>\n          <styled.input {...getInputProps()} />\n        </Portal>\n\n        <styled.div {...varProps} {...getFieldProps()}>\n          {cloneChildren}\n        </styled.div>\n      </>\n    )\n  },\n  \"root\",\n)((props) => {\n  const context = useInputPropsContext()\n\n  return { ...context, ...props }\n})\n\ninterface FileInputTagProps extends HTMLStyledProps {}\n\nconst FileInputTag = withContext<\"span\", FileInputTagProps>(\"span\", \"tag\")()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./file-input.style\"\nexport {\n  FileInput,\n  FileInputPropsContext,\n  useFileInputPropsContext,\n} from \"./file-input\"\nexport type { FileInputProps } from \"./file-input\"\nexport * from \"./use-file-input\"\n"
    },
    {
      "name": "use-file-input.ts",
      "content": "\"use client\"\n\nimport type { ChangeEvent, RefObject } from \"react\"\nimport type { HTMLProps, PropGetter, Dict } from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport { useCallback, useRef } from \"react\"\nimport { useClickable } from \"../../hooks/use-clickable\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport {\n  assignRef,\n  dataAttr,\n  handlerAll,\n  isNull,\n  mergeRefs,\n  visuallyHiddenAttributes,\n} from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\n\nexport type UseFileInputProps<Y extends \"button\" | \"input\" = \"input\"> =\n  FieldProps &\n    Omit<HTMLProps<Y>, \"defaultValue\" | \"onChange\" | \"ref\" | \"value\"> &\n    Pick<HTMLProps<\"input\">, \"accept\" | \"multiple\" | \"ref\"> & {\n      /**\n       * The initial value of the file input.\n       */\n      defaultValue?: File[]\n      /**\n       * Ref to a reset function.\n       */\n      resetRef?: RefObject<(() => void) | null>\n      /**\n       * The value of the file input.\n       */\n      value?: File[]\n      /**\n       * Function to be called when a file change event occurs.\n       */\n      onChange?: (files: File[] | undefined) => void\n    }\n\nexport const useFileInput = <Y extends \"button\" | \"input\" = \"input\">(\n  props: UseFileInputProps<Y>,\n) => {\n  const {\n    props: {\n      id,\n      ref,\n      form,\n      name,\n      accept,\n      defaultValue,\n      disabled,\n      multiple,\n      readOnly,\n      required,\n      resetRef,\n      value,\n      onChange: onChangeProp,\n      onClick: onClickProp,\n      ...rest\n    },\n    ariaProps,\n    dataProps,\n    eventProps,\n  } = useFieldProps<HTMLElement, UseFileInputProps<Y>>(props)\n  const interactive = !(readOnly || disabled)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [values, setValues] = useControllableState<File[] | undefined>({\n    defaultValue,\n    value,\n    onChange: onChangeProp,\n  })\n  const count = values?.length ?? 0\n\n  const onClick = useCallback(() => {\n    if (!interactive) return\n\n    inputRef.current?.click()\n  }, [interactive])\n\n  const onReset = useCallback(() => {\n    if (inputRef.current) inputRef.current.value = \"\"\n\n    setValues(undefined)\n  }, [setValues])\n\n  const onChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      const files = !isNull(ev.currentTarget.files)\n        ? Array.from(ev.currentTarget.files)\n        : undefined\n\n      setValues(files?.length ? files : undefined)\n    },\n    [setValues],\n  )\n\n  const clickableProps = useClickable<HTMLElement, Dict>({\n    ...dataProps,\n    ...eventProps,\n    ...rest,\n    disabled,\n    focusOnClick: interactive,\n    onClick: handlerAll(onClickProp, onClick),\n  })\n\n  assignRef(resetRef, onReset)\n\n  const getInputProps: PropGetter<\"input\"> = useCallback(\n    (props = {}) => ({\n      ...visuallyHiddenAttributes,\n      ...ariaProps,\n      ...dataProps,\n      id,\n      form,\n      type: \"file\",\n      name,\n      accept,\n      disabled,\n      multiple,\n      readOnly,\n      required,\n      ...props,\n      ref: mergeRefs(inputRef, props.ref, ref),\n      onChange: handlerAll(props.onChange, onChange),\n    }),\n    [\n      required,\n      ariaProps,\n      dataProps,\n      id,\n      form,\n      name,\n      accept,\n      disabled,\n      multiple,\n      readOnly,\n      ref,\n      onChange,\n    ],\n  )\n\n  const getFieldProps: PropGetter = useCallback(\n    (props = {}) => ({\n      \"data-placeholder\": dataAttr(!count),\n      ...clickableProps,\n      tabIndex: interactive ? 0 : clickableProps.tabIndex,\n      ...props,\n    }),\n    [clickableProps, count, interactive],\n  )\n\n  return {\n    disabled,\n    interactive,\n    readOnly,\n    required,\n    values,\n    clickableProps,\n    getFieldProps,\n    getInputProps,\n  }\n}\n\nexport type UseFileInputReturn = ReturnType<typeof useFileInput>\n"
    }
  ]
}
