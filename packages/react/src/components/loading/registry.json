{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon", "motion", "text", "portal", "center"],
    "externals": ["motion@12.18.1", "react-remove-scroll@^2.7.1"],
    "hooks": ["use-timeout"],
    "providers": []
  },
  "dependents": {
    "components": ["alert", "button", "dropzone"],
    "hooks": ["use-async-callback"],
    "providers": ["ui-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "audio.tsx",
      "content": "\"use client\"\n\nimport type { Dict } from \"@yamada-ui/react\"\nimport type { LoadingProps } from \"./loading\"\nimport { styled, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface AudioProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Audio = withContext<\"svg\", AudioProps>(\n  ({ dur = \"1.4s\", ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon fill=\"currentColor\" viewBox=\"0 0 55 80\" {...rest}>\n        <g transform=\"matrix(1 0 0 -1 0 80)\">\n          {[\n            {\n              factor: 3,\n              values: [\n                20, 45, 57, 80, 64, 32, 66, 45, 64, 23, 66, 13, 64, 56, 34, 34,\n                2, 23, 76, 79, 20,\n              ],\n              x: \"0px\",\n            },\n            {\n              factor: 1.4,\n              values: [80, 55, 33, 5, 75, 23, 73, 33, 12, 14, 60, 80],\n              x: \"15px\",\n            },\n            {\n              factor: 1,\n              values: [50, 34, 78, 23, 56, 23, 34, 76, 80, 54, 21, 50],\n              x: \"30px\",\n            },\n            {\n              factor: 1.4,\n              values: [30, 45, 13, 80, 56, 72, 45, 76, 34, 23, 67, 30],\n              x: \"45px\",\n            },\n          ].map(({ factor, values, ...props }, index) => {\n            const length = values.length\n\n            const keyframes = values.reduce<Dict>((acc, value, index) => {\n              const percent = `${Math.round((index / (length - 1)) * 100)}%`\n\n              acc[percent] = { transform: `scaleY(${value / 80})` }\n\n              return acc\n            }, {})\n\n            return (\n              <styled.rect\n                key={index}\n                {...props}\n                animationDuration={`${dur * factor}s`}\n                animationIterationCount=\"infinite\"\n                animationTimingFunction=\"linear\"\n                h=\"80px\"\n                rx=\"3px\"\n                w=\"10px\"\n                _keyframes={keyframes}\n              />\n            )\n          })}\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "background.tsx",
      "content": "import type { Variants } from \"motion/react\"\nimport type { FC } from \"react\"\nimport type { LoadingSharedProps } from \"./loading-provider\"\nimport { memo } from \"react\"\nimport { useTimeout } from \"../../hooks/use-timeout\"\nimport { isValidElement } from \"@yamada-ui/react\"\nimport { motion } from \"../motion\"\nimport { Text } from \"../text\"\nimport { useLoadingComponent } from \"./use-loading-component\"\n\nconst variants: Variants = {\n  animate: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  initial: {\n    opacity: 0,\n    scale: 0.95,\n  },\n}\n\nexport interface BackgroundProps extends LoadingSharedProps {}\n\nexport const Background: FC<BackgroundProps> = memo(\n  ({ duration, initial, loadingScheme, message, onFinish }) => {\n    const Component = useLoadingComponent(loadingScheme)\n\n    useTimeout(onFinish, duration)\n\n    return (\n      <motion.div\n        data-loading\n        alignItems=\"center\"\n        animate=\"animate\"\n        bg=\"bg.panel\"\n        bottom=\"md\"\n        boxShadow=\"lg\"\n        display=\"flex\"\n        exit=\"exit\"\n        gap=\"sm\"\n        initial={initial}\n        justifyContent=\"center\"\n        maxW=\"20rem\"\n        p=\"sm\"\n        position=\"fixed\"\n        right=\"md\"\n        rounded=\"l2\"\n        variants={variants}\n        zIndex=\"beerus\"\n      >\n        <Component fontSize=\"xl\" />\n\n        {message ? (\n          isValidElement(message) ? (\n            message\n          ) : (\n            <Text fontSize=\"sm\" lineClamp={1}>\n              {message}\n            </Text>\n          )\n        ) : null}\n      </motion.div>\n    )\n  },\n)\n\nBackground.displayName = \"Background\"\n"
    },
    {
      "name": "circles.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface CirclesProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Circles = withContext<\"svg\", CirclesProps>(\n  ({ dur = \"3s\", ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 58 58\" {...rest}>\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g stroke=\"currentColor\" strokeWidth=\"1.5\" transform=\"translate(2 1)\">\n            {[\n              { cx: \"42.601px\", cy: \"11.462px\" },\n              { animationDelay: \"0.375s\", cx: \"49.063px\", cy: \"27.063px\" },\n              { animationDelay: \"0.75s\", cx: \"42.601px\", cy: \"42.663px\" },\n              { animationDelay: \"1.125s\", cx: \"27px\", cy: \"49.125px\" },\n              { animationDelay: \"1.5s\", cx: \"11.399px\", cy: \"42.663px\" },\n              { animationDelay: \"1.875s\", cx: \"4.938px\", cy: \"27.063px\" },\n              { animationDelay: \"2.25s\", cx: \"11.399px\", cy: \"11.462px\" },\n              { animationDelay: \"2.625s\", cx: \"27px\", cy: \"5px\" },\n            ].map((props, index) => (\n              <styled.circle\n                key={index}\n                {...props}\n                animationDuration={`${dur}s`}\n                animationIterationCount=\"infinite\"\n                animationTimingFunction=\"linear\"\n                fill=\"currentColor\"\n                fillOpacity={!index ? \"1\" : \"0\"}\n                r=\"5px\"\n                _keyframes={{\n                  \"0%, 25%, 100%\": { fillOpacity: 0 },\n                  \"12.5%\": { fillOpacity: 1 },\n                }}\n              />\n            ))}\n          </g>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "dots.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface DotsProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Dots = withContext<\"svg\", DotsProps>(({ dur = \"1s\", ...rest }) => {\n  dur = isString(dur) ? parseFloat(dur) : dur\n\n  return (\n    <Icon fill=\"currentColor\" viewBox=\"0 0 120 30\" {...rest}>\n      <styled.circle\n        animationDuration={`${dur}s`}\n        animationIterationCount=\"infinite\"\n        animationTimingFunction=\"linear\"\n        cx=\"15px\"\n        cy=\"15px\"\n        r=\"15px\"\n        transformBox=\"fill-box\"\n        transformOrigin=\"center\"\n        _keyframes={{\n          \"0%, 100%\": { opacity: \"1\", transform: \"scale(1)\" },\n          \"50%\": { opacity: \"0.5\", transform: `scale(calc(9 / 15))` },\n        }}\n      />\n      <styled.circle\n        animationDuration={`${dur}s`}\n        animationIterationCount=\"infinite\"\n        animationTimingFunction=\"linear\"\n        cx=\"60px\"\n        cy=\"15px\"\n        fillOpacity=\"1\"\n        r=\"9px\"\n        transformBox=\"fill-box\"\n        transformOrigin=\"center\"\n        _keyframes={{\n          \"0%, 100%\": { opacity: \"0.5\", transform: \"scale(1)\" },\n          \"50%\": { opacity: \"1\", transform: `scale(calc(15 / 9))` },\n        }}\n      />\n      <styled.circle\n        animationDuration={`${dur}s`}\n        animationIterationCount=\"infinite\"\n        animationTimingFunction=\"linear\"\n        cx=\"105px\"\n        cy=\"15px\"\n        r=\"15px\"\n        transformBox=\"fill-box\"\n        transformOrigin=\"center\"\n        _keyframes={{\n          \"0%, 100%\": { opacity: \"1\", transform: \"scale(1)\" },\n          \"50%\": { opacity: \"0.5\", transform: `scale(calc(9 / 15))` },\n        }}\n      />\n    </Icon>\n  )\n})(initialProps, superProps)\n"
    },
    {
      "name": "grid.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface GridProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Grid = withContext<\"svg\", GridProps>(({ dur = \"1s\", ...rest }) => {\n  dur = isString(dur) ? parseFloat(dur) : dur\n\n  return (\n    <Icon fill=\"currentColor\" viewBox=\"0 0 105 105\" {...rest}>\n      {[\n        { cx: \"12.5px\", cy: \"12.5px\" },\n        { animationDelay: \"0.1s\", cx: \"12.5px\", cy: \"52.5px\" },\n        { animationDelay: \"0.3s\", cx: \"52.5px\", cy: \"12.5px\" },\n        { animationDelay: \"0.6s\", cx: \"52.5px\", cy: \"52.5px\" },\n        { animationDelay: \"0.8s\", cx: \"92.5px\", cy: \"12.5px\" },\n        { animationDelay: \"0.4s\", cx: \"92.5px\", cy: \"52.5px\" },\n        { animationDelay: \"0.7s\", cx: \"12.5px\", cy: \"92.5px\" },\n        { animationDelay: \"0.5s\", cx: \"52.5px\", cy: \"92.5px\" },\n        { animationDelay: \"0.2s\", cx: \"92.5px\", cy: \"92.5px\" },\n      ].map((props, index) => (\n        <styled.circle\n          key={index}\n          {...props}\n          animationDuration={`${dur}s`}\n          animationIterationCount=\"infinite\"\n          animationTimingFunction=\"linear\"\n          r=\"12.5px\"\n          _keyframes={{\n            \"0%, 100%\": { fillOpacity: \"1\" },\n            \"50%\": { fillOpacity: \"0.2\" },\n          }}\n        />\n      ))}\n    </Icon>\n  )\n})(initialProps, superProps)\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./loading.style\"\nexport { LoadingPropsContext, useLoadingPropsContext } from \"./loading\"\nexport * from \"./loading-provider\"\nexport * as Loading from \"./namespace\"\nexport * from \"./use-loading-component\"\n"
    },
    {
      "name": "loading-provider.tsx",
      "content": "\"use client\"\n\nimport type { FC, PropsWithChildren, ReactNode, RefObject } from \"react\"\nimport type {\n  LoadingConfig,\n  LoadingScheme,\n  ThemeConfig,\n} from \"@yamada-ui/react\"\nimport { AnimatePresence } from \"motion/react\"\nimport { createContext, createRef, use, useMemo, useRef, useState } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { assignRef, isNumber, useUpdateEffect } from \"@yamada-ui/react\"\nimport { Portal } from \"../portal\"\nimport { Background } from \"./background\"\nimport { Page } from \"./page\"\nimport { Screen } from \"./screen\"\n\ninterface LoadingMethods {\n  /**\n   * Function to finish loading.\n   */\n  finish: () => void\n  /**\n   * Function to forcefully update the loading state.\n   *\n   * Please be careful, as it will forcefully overwrite the state of the loading component.\n   */\n  force: (state: Partial<LoadingState>) => void\n  /**\n   * Function to start loading.\n   *\n   * If you specify a `message` etc. as an argument, the loading will change accordingly.\n   */\n  start: (options?: LoadingOptions) => void\n  /**\n   * Function to update loading.\n   *\n   * If you specify a `message` etc. as an argument, the loading will change accordingly.\n   */\n  update: (options: LoadingOptions) => void\n}\n\nexport interface LoadingOptions {\n  duration?: null | number\n  loadingScheme?: LoadingScheme\n  message?: ReactNode\n}\n\ninterface LoadingState {\n  duration: null | number\n  loadingCount: number\n  loadingScheme: LoadingScheme\n  message: ReactNode | undefined\n}\n\ninterface LoadingContext {\n  /**\n   * The background loading methods.\n   */\n  background: LoadingMethods\n  /**\n   * The page loading methods.\n   */\n  page: LoadingMethods\n  /**\n   * The screen loading methods.\n   */\n  screen: LoadingMethods\n}\n\nconst LoadingContext = createContext({} as LoadingContext)\n\nconst createController = () => ({\n  finish: createRef<LoadingMethods[\"finish\"]>(),\n  force: createRef<LoadingMethods[\"force\"]>(),\n  start: createRef<LoadingMethods[\"start\"]>(),\n  update: createRef<LoadingMethods[\"update\"]>(),\n})\n\ntype Controller = ReturnType<typeof createController>\n\nconst createMethods = (refs: RefObject<Controller>): LoadingMethods => ({\n  finish: () => refs.current.finish.current?.(),\n  force: (state) => refs.current.force.current?.(state),\n  start: (props) => refs.current.start.current?.(props),\n  update: (props) => refs.current.update.current?.(props),\n})\n\nconst incrementCount = (prev: number) => prev + 1\nconst decrementCount = (prev: number) => (prev === 0 ? prev : prev - 1)\n\nexport interface LoadingProviderProps\n  extends PropsWithChildren<ThemeConfig[\"loading\"]> {}\n\nexport const LoadingProvider: FC<LoadingProviderProps> = ({\n  background: backgroundConfig,\n  children,\n  page: pageConfig,\n  screen: screenConfig,\n}) => {\n  const screen = useRef(createController())\n  const page = useRef(createController())\n  const background = useRef(createController())\n\n  const value = useMemo(\n    () => ({\n      background: createMethods(background),\n      page: createMethods(page),\n      screen: createMethods(screen),\n    }),\n    [],\n  )\n\n  return (\n    <LoadingContext value={value}>\n      {children}\n\n      <Controller ref={screen} {...screenConfig} component={Screen} />\n\n      <Controller ref={page} {...pageConfig} component={Page} />\n\n      <Controller\n        ref={background}\n        {...backgroundConfig}\n        blockScrollOnMount={backgroundConfig?.blockScrollOnMount ?? false}\n        component={Background}\n      />\n    </LoadingContext>\n  )\n}\n\nexport interface LoadingSharedProps {\n  duration: null | number\n  loadingScheme: LoadingScheme\n  message: ReactNode | undefined\n  onFinish: () => void\n  initial?: boolean | string\n}\n\ninterface ControllerProps extends LoadingConfig {\n  ref: RefObject<Controller>\n  component: FC<LoadingSharedProps>\n}\n\nconst Controller: FC<ControllerProps> = ({\n  ref,\n  allowPinchZoom = false,\n  blockScrollOnMount = true,\n  component: Component,\n  duration: durationProp = null,\n  loadingCount: loadingCountProp = 0,\n  loadingScheme: loadingSchemeProp = \"oval\",\n}) => {\n  const loading = useRef<boolean>(false)\n  const [{ duration, loadingCount, loadingScheme, message }, setState] =\n    useState<LoadingState>({\n      duration: durationProp,\n      loadingCount: loadingCountProp,\n      loadingScheme: loadingSchemeProp,\n      message: undefined,\n    })\n\n  const { finish, force, start, update } = useMemo<LoadingMethods>(\n    () => ({\n      finish: () => {\n        loading.current = false\n\n        setState(({ loadingCount }) => ({\n          duration: durationProp,\n          loadingCount: decrementCount(loadingCount),\n          loadingScheme: loadingSchemeProp,\n          message: undefined,\n        }))\n      },\n\n      force: ({\n        duration = durationProp,\n        loadingCount = 0,\n        loadingScheme = loadingSchemeProp,\n        message,\n      }) => {\n        loading.current = !!loadingCount\n\n        setState({\n          duration,\n          loadingCount,\n          loadingScheme,\n          message,\n        })\n      },\n\n      start: ({\n        duration = durationProp,\n        loadingScheme = loadingSchemeProp,\n        message,\n      } = {}) => {\n        loading.current = true\n\n        setState(({ loadingCount }) => ({\n          duration,\n          loadingCount: incrementCount(loadingCount),\n          loadingScheme,\n          message,\n        }))\n      },\n\n      update: (next) => setState((prev) => ({ ...prev, ...next })),\n    }),\n    [durationProp, loadingSchemeProp],\n  )\n\n  assignRef(ref.current.start, start)\n  assignRef(ref.current.finish, finish)\n  assignRef(ref.current.update, update)\n  assignRef(ref.current.force, force)\n\n  const props: LoadingSharedProps = {\n    duration,\n    initial: loadingCountProp > 0 ? false : \"initial\",\n    loadingScheme,\n    message,\n    onFinish: finish,\n  }\n\n  useUpdateEffect(() => {\n    if (loadingCountProp > 0 || isNumber(durationProp))\n      setState({\n        duration: durationProp,\n        loadingCount: loadingCountProp,\n        loadingScheme: loadingSchemeProp,\n        message: undefined,\n      })\n  }, [loadingCountProp, durationProp, loadingSchemeProp])\n\n  return (\n    <AnimatePresence initial={false}>\n      {loadingCount ? (\n        <Portal>\n          <RemoveScroll\n            allowPinchZoom={allowPinchZoom}\n            enabled={blockScrollOnMount}\n            forwardProps\n          >\n            <Component {...props} />\n          </RemoveScroll>\n        </Portal>\n      ) : null}\n    </AnimatePresence>\n  )\n}\n\n/**\n * `useLoading` is a custom hook for controlling the loading of the application.\n *\n * @see https://yamada-ui.com/docs/hooks/use-loading\n */\nexport const useLoading = (): LoadingContext => {\n  const { background, page, screen } = use(LoadingContext)\n\n  const context = useMemo(\n    () => ({ background, page, screen }),\n    [background, page, screen],\n  )\n\n  return context\n}\n"
    },
    {
      "name": "loading.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const loadingStyle = defineComponentStyle({\n  base: {\n    color: [\"colorScheme.500\", \"colorScheme.600\"],\n    fontSize: \"1em\",\n  },\n})\n\nexport type LoadingStyle = typeof loadingStyle\n"
    },
    {
      "name": "loading.tsx",
      "content": "\"use client\"\n\nimport type {\n  CSSProps,\n  InitialProps,\n  ThemeProps,\n  WithoutThemeProps,\n} from \"@yamada-ui/react\"\nimport type { IconProps } from \"../icon\"\nimport type { LoadingStyle } from \"./loading.style\"\nimport { createComponent } from \"@yamada-ui/react\"\nimport { loadingStyle } from \"./loading.style\"\n\nexport const initialProps: InitialProps<LoadingProps> = {\n  \"data-loading\": \"\",\n}\n\nexport const superProps = ({\n  css,\n  duration,\n  dur = duration,\n  ...rest\n}: WithoutThemeProps<LoadingProps, LoadingStyle>): WithoutThemeProps<\n  LoadingProps,\n  LoadingStyle\n> => ({\n  css,\n  dur,\n  ...rest,\n})\n\nexport interface LoadingProps\n  extends WithoutThemeProps<IconProps>,\n    ThemeProps<LoadingStyle> {\n  /**\n   * The CSS `dur` property.\n   */\n  duration?: IconProps[\"dur\"]\n  /**\n   * The CSS `color` property.\n   */\n  secondaryColor?: CSSProps[\"color\"]\n}\n\nconst {\n  PropsContext: LoadingPropsContext,\n  usePropsContext: useLoadingPropsContext,\n  withContext,\n} = createComponent<LoadingProps, LoadingStyle>(\"loading\", loadingStyle)\n\nexport { LoadingPropsContext, useLoadingPropsContext, withContext }\n"
    },
    {
      "name": "namespace.ts",
      "content": "export type { LoadingScheme as Scheme } from \"../../core\"\nexport type { LoadingMethod as Method } from \"../../core\"\nexport { Audio } from \"./audio\"\nexport type { AudioProps } from \"./audio\"\nexport { Circles } from \"./circles\"\nexport type { CirclesProps } from \"./circles\"\nexport { Dots } from \"./dots\"\nexport type { DotsProps } from \"./dots\"\nexport { Grid } from \"./grid\"\nexport type { GridProps } from \"./grid\"\nexport type { LoadingProps as Props } from \"./loading\"\nexport type { LoadingOptions as Options } from \"./loading-provider\"\nexport { Oval } from \"./oval\"\nexport type { OvalProps } from \"./oval\"\nexport { Puff } from \"./puff\"\nexport type { PuffProps } from \"./puff\"\nexport { Rings } from \"./rings\"\nexport type { RingsProps } from \"./rings\"\nexport { Suspense } from \"./suspense\"\nexport type { SuspenseProps } from \"./suspense\"\n"
    },
    {
      "name": "oval.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, varAttr, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface OvalProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Oval = withContext<\"svg\", OvalProps>(\n  ({ dur = \"1s\", secondaryColor, ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 38 38\" {...rest}>\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g strokeWidth=\"2\" transform=\"translate(1 1)\">\n            <styled.circle\n              {...(secondaryColor\n                ? { stroke: \"{secondary-color}\" }\n                : { strokeOpacity: \".5\" })}\n              cx=\"18px\"\n              cy=\"18px\"\n              r=\"18px\"\n            />\n            <styled.path\n              animationDuration={`${dur}s`}\n              animationIterationCount=\"infinite\"\n              animationName=\"spin\"\n              animationTimingFunction=\"linear\"\n              asChild\n              transformOrigin=\"18px 18px\"\n            >\n              <path d=\"M36 18c0-9.94-8.06-18-18-18\" />\n            </styled.path>\n          </g>\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, ({ secondaryColor, ...props }) => {\n  const rest = superProps(props)\n\n  return {\n    \"--secondary-color\": varAttr(secondaryColor, \"colors\"),\n    secondaryColor,\n    ...rest,\n  }\n})\n"
    },
    {
      "name": "page.tsx",
      "content": "import type { Variants } from \"motion/react\"\nimport type { FC } from \"react\"\nimport type { LoadingSharedProps } from \"./loading-provider\"\nimport { memo } from \"react\"\nimport { useTimeout } from \"../../hooks/use-timeout\"\nimport { isValidElement } from \"@yamada-ui/react\"\nimport { motion } from \"../motion\"\nimport { Text } from \"../text\"\nimport { useLoadingComponent } from \"./use-loading-component\"\n\nconst variants: { [key: string]: Variants } = {\n  overlay: {\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 0.2, 1],\n      },\n    },\n    exit: {\n      opacity: 0,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 1, 1],\n      },\n    },\n    initial: {\n      opacity: 0,\n    },\n  },\n  panel: {\n    animate: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 0.2, 1],\n      },\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.95,\n      transition: {\n        duration: 0.4,\n        ease: [0.4, 0, 1, 1],\n      },\n    },\n    initial: {\n      opacity: 0,\n      scale: 0.95,\n    },\n  },\n}\n\nexport interface PageProps extends LoadingSharedProps {}\n\nexport const Page: FC<PageProps> = memo(\n  ({ duration, initial, loadingScheme, message, onFinish }) => {\n    const Component = useLoadingComponent(loadingScheme)\n\n    useTimeout(onFinish, duration)\n\n    return (\n      <motion.div\n        data-loading\n        alignItems=\"center\"\n        animate=\"animate\"\n        bg=\"bg.overlay\"\n        display=\"flex\"\n        exit=\"exit\"\n        h=\"100dvh\"\n        initial={initial}\n        inset={0}\n        justifyContent=\"center\"\n        p=\"md\"\n        position=\"fixed\"\n        variants={variants.overlay}\n        w=\"100vw\"\n        zIndex=\"beerus\"\n      >\n        <motion.div\n          alignItems=\"center\"\n          animate=\"animate\"\n          bg=\"bg.panel\"\n          boxShadow=\"lg\"\n          display=\"flex\"\n          exit=\"exit\"\n          flexDirection=\"column\"\n          gap=\"sm\"\n          initial={initial}\n          justifyContent=\"center\"\n          maxW=\"24rem\"\n          p=\"md\"\n          rounded=\"l2\"\n          variants={variants.panel}\n        >\n          <Component fontSize=\"6xl\" />\n\n          {message ? (\n            isValidElement(message) ? (\n              message\n            ) : (\n              <Text lineClamp={3}>{message}</Text>\n            )\n          ) : null}\n        </motion.div>\n      </motion.div>\n    )\n  },\n)\n\nPage.displayName = \"Page\"\n"
    },
    {
      "name": "puff.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface PuffProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Puff = withContext<\"svg\", PuffProps>(\n  ({ dur = \"1.8s\", ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 44 44\" {...rest}>\n        <g fill=\"none\" fillRule=\"evenodd\" strokeWidth=\"2\">\n          <styled.circle\n            animationDuration={`${dur}s`}\n            animationIterationCount=\"infinite\"\n            animationTimingFunction=\"cubic-bezier(0.3, 0.61, 0.355, 1)\"\n            cx=\"22px\"\n            cy=\"22px\"\n            r=\"1px\"\n            transformBox=\"fill-box\"\n            transformOrigin=\"center\"\n            vectorEffect=\"non-scaling-stroke\"\n            _keyframes={{\n              \"0%\": { strokeOpacity: 1, transform: \"scale(1)\" },\n              \"100%\": { strokeOpacity: 0, transform: \"scale(20)\" },\n            }}\n          />\n          <styled.circle\n            animationDelay=\"-0.9s\"\n            animationDuration={`${dur}s`}\n            animationIterationCount=\"infinite\"\n            animationTimingFunction=\"cubic-bezier(0.3, 0.61, 0.355, 1)\"\n            cx=\"22px\"\n            cy=\"22px\"\n            r=\"1px\"\n            transformBox=\"fill-box\"\n            transformOrigin=\"center\"\n            vectorEffect=\"non-scaling-stroke\"\n            _keyframes={{\n              \"0%\": { strokeOpacity: 1, transform: \"scale(1)\" },\n              \"100%\": { strokeOpacity: 0, transform: \"scale(20)\" },\n            }}\n          />\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "rings.tsx",
      "content": "\"use client\"\n\nimport type { LoadingProps } from \"./loading\"\nimport { styled, isString } from \"@yamada-ui/react\"\nimport { Icon } from \"../icon\"\nimport { initialProps, superProps, withContext } from \"./loading\"\n\nexport interface RingsProps extends LoadingProps {}\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see https://yamada-ui.com/docs/components/feedback/loading\n */\nexport const Rings = withContext<\"svg\", RingsProps>(\n  ({ dur = \"3s\", ...rest }) => {\n    dur = isString(dur) ? parseFloat(dur) : dur\n\n    return (\n      <Icon stroke=\"currentColor\" viewBox=\"0 0 45 45\" {...rest}>\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          strokeWidth=\"2\"\n          transform=\"translate(1 1)\"\n        >\n          <styled.circle\n            animationDelay=\"1.5s\"\n            animationDuration={`${dur}s`}\n            animationIterationCount=\"infinite\"\n            animationTimingFunction=\"linear\"\n            cx=\"22px\"\n            cy=\"22px\"\n            r=\"6px\"\n            strokeOpacity=\"0\"\n            transformBox=\"fill-box\"\n            transformOrigin=\"center\"\n            _keyframes={{\n              \"0%\": {\n                strokeOpacity: \"1\",\n                strokeWidth: \"2\",\n                transform: \"scale(1)\",\n              },\n              \"100%\": {\n                strokeOpacity: \"0\",\n                strokeWidth: \"0\",\n                transform: \"scale(calc(22 / 6))\",\n              },\n            }}\n          />\n          <styled.circle\n            animationDelay=\"3s\"\n            animationDuration={`${dur}s`}\n            animationIterationCount=\"infinite\"\n            animationTimingFunction=\"linear\"\n            cx=\"22px\"\n            cy=\"22px\"\n            r=\"6px\"\n            strokeOpacity=\"0\"\n            transformBox=\"fill-box\"\n            transformOrigin=\"center\"\n            _keyframes={{\n              \"0%\": {\n                strokeOpacity: \"1\",\n                strokeWidth: \"2\",\n                transform: \"scale(1)\",\n              },\n              \"100%\": {\n                strokeOpacity: \"0\",\n                strokeWidth: \"0\",\n                transform: \"scale(calc(22 / 6))\",\n              },\n            }}\n          />\n          <styled.circle\n            animationDuration={`${dur / 2}s`}\n            animationIterationCount=\"infinite\"\n            animationTimingFunction=\"linear\"\n            cx=\"22px\"\n            cy=\"22px\"\n            r=\"8px\"\n            transformBox=\"fill-box\"\n            transformOrigin=\"center\"\n            _keyframes={{\n              \"0%, 100%\": { transform: \"scale(calc(6 / 8))\" },\n              \"16.7%\": { transform: \"scale(calc(1 / 8))\" },\n              \"33.3%\": { transform: \"scale(calc(2 / 8))\" },\n              \"50%\": { transform: \"scale(calc(3 / 8))\" },\n              \"66.7%\": { transform: \"scale(calc(4 / 8))\" },\n              \"83.3%\": { transform: \"scale(calc(5 / 8))\" },\n            }}\n          />\n        </g>\n      </Icon>\n    )\n  },\n)(initialProps, superProps)\n"
    },
    {
      "name": "screen.tsx",
      "content": "import type { Variants } from \"motion/react\"\nimport type { FC } from \"react\"\nimport type { LoadingSharedProps } from \"./loading-provider\"\nimport { memo } from \"react\"\nimport { useTimeout } from \"../../hooks/use-timeout\"\nimport { isValidElement } from \"@yamada-ui/react\"\nimport { Center } from \"../center\"\nimport { motion } from \"../motion\"\nimport { Text } from \"../text\"\nimport { useLoadingComponent } from \"./use-loading-component\"\n\nconst variants: Variants = {\n  animate: {\n    opacity: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  initial: {\n    opacity: 0,\n  },\n}\n\nexport interface ScreenProps extends LoadingSharedProps {}\n\nexport const Screen: FC<ScreenProps> = memo(\n  ({ duration, initial, loadingScheme, message, onFinish }) => {\n    const Component = useLoadingComponent(loadingScheme)\n\n    useTimeout(onFinish, duration)\n\n    return (\n      <motion.div\n        data-loading\n        alignItems=\"center\"\n        animate=\"animate\"\n        bg=\"bg\"\n        display=\"flex\"\n        exit=\"exit\"\n        h=\"100dvh\"\n        initial={initial}\n        inset={0}\n        justifyContent=\"center\"\n        p=\"md\"\n        position=\"fixed\"\n        variants={variants}\n        w=\"100vw\"\n        zIndex=\"beerus\"\n      >\n        <Center flexDirection=\"column\" gap=\"sm\" maxW=\"24rem\">\n          <Component fontSize=\"6xl\" />\n\n          {message ? (\n            isValidElement(message) ? (\n              message\n            ) : (\n              <Text lineClamp={3}>{message}</Text>\n            )\n          ) : null}\n        </Center>\n      </motion.div>\n    )\n  },\n)\n\nScreen.displayName = \"Screen\"\n"
    },
    {
      "name": "suspense.tsx",
      "content": "\"use client\"\n\nimport type { FC, SuspenseProps as OriginalSuspenseProps } from \"react\"\nimport type { HTMLStyledProps, LoadingScheme } from \"@yamada-ui/react\"\nimport type { LoadingProps } from \"./loading\"\nimport { Suspense as OriginalSuspense } from \"react\"\nimport { styled } from \"@yamada-ui/react\"\nimport { useLoadingComponent } from \"./use-loading-component\"\n\nexport interface SuspenseProps extends HTMLStyledProps, OriginalSuspenseProps {\n  /**\n   * The loading scheme.\n   */\n  loadingScheme?: LoadingScheme\n  /**\n   * The loading props.\n   */\n  loadingProps?: LoadingProps\n}\n\nexport const Suspense: FC<SuspenseProps> = ({\n  name,\n  children,\n  fallback,\n  loadingScheme = \"oval\",\n  ...rest\n}) => {\n  const Component = useLoadingComponent(loadingScheme)\n\n  return (\n    <OriginalSuspense\n      name={name}\n      fallback={\n        fallback ?? (\n          <styled.div boxSize=\"full\" display=\"center\" fontSize=\"6xl\" {...rest}>\n            <Component fontSize=\"1em\" />\n          </styled.div>\n        )\n      }\n    >\n      {children}\n    </OriginalSuspense>\n  )\n}\n"
    },
    {
      "name": "use-loading-component.ts",
      "content": "import type { Component } from \"@yamada-ui/react\"\nimport { useMemo } from \"react\"\nimport { isString, toPascalCase } from \"@yamada-ui/react\"\nimport { Loading } from \"./\"\n\nexport const useLoadingComponent = (\n  scheme: Loading.Scheme,\n): Component<\"svg\", Loading.Props> => {\n  const Component = useMemo(\n    () =>\n      Loading[toPascalCase(scheme) as keyof typeof Loading] as Component<\n        \"svg\",\n        Loading.Props\n      >,\n    [scheme],\n  )\n\n  return Component\n}\n\nexport const getLoadingComponent = (\n  scheme: Loading.Scheme,\n): Component<\"svg\", Loading.Props> => {\n  return Loading[toPascalCase(scheme) as keyof typeof Loading] as Component<\n    \"svg\",\n    Loading.Props\n  >\n}\n\nexport const isLoadingScheme = (scheme: any): scheme is Loading.Scheme => {\n  return isString(scheme) && toPascalCase(scheme) in Loading\n}\n"
    }
  ]
}
