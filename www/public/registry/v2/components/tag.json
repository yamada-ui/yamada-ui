{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["icon"],
    "externals": [],
    "hooks": ["use-clickable"],
    "providers": ["i18n-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./tag.style\"\nexport { Tag, TagPropsContext, useTagPropsContext } from \"./tag\"\nexport type { TagProps } from \"./tag\"\n"
    },
    {
      "name": "tag.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const tagStyle = defineComponentSlotStyle({\n  base: {\n    closeButton: {\n      alignItems: \"center\",\n      color: \"currentcolor\",\n      cursor: \"pointer\",\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      rounded: \"full\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n      _hover: {\n        layerStyle: \"hover\",\n      },\n      _active: {\n        layerStyle: \"active\",\n      },\n      _disabled: {\n        layerStyle: \"disabled\",\n      },\n    },\n    content: {\n      lineClamp: 1,\n    },\n    endIcon: {},\n    icon: {\n      alignItems: \"center\",\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"center\",\n    },\n    root: {\n      alignItems: \"center\",\n      display: \"inline-flex\",\n      gap: \"1\",\n      maxW: \"full\",\n      rounded: \"l2\",\n      userSelect: \"none\",\n      verticalAlign: \"top\",\n    },\n    startIcon: {},\n  },\n\n  variants: {\n    outline: {\n      root: {\n        layerStyle: \"outline\",\n      },\n    },\n    plain: {\n      root: {\n        borderColor: \"transparent\",\n        borderWidth: \"1px\",\n      },\n    },\n    solid: {\n      root: {\n        layerStyle: \"solid\",\n      },\n    },\n    subtle: {\n      root: {\n        layerStyle: \"subtle\",\n      },\n    },\n    surface: {\n      root: {\n        layerStyle: \"surface\",\n      },\n    },\n  },\n\n  sizes: {\n    sm: {\n      element: {\n        fontSize: \"1.25em\",\n      },\n      root: {\n        fontSize: \"xs\",\n        lineHeight: \"{sizes.5}\",\n        minH: \"5\",\n        minW: \"5\",\n        px: \"1.5\",\n      },\n    },\n    md: {\n      element: {\n        fontSize: \"1.25em\",\n      },\n      root: {\n        fontSize: \"sm\",\n        lineHeight: \"{sizes.6}\",\n        minH: \"6\",\n        minW: \"6\",\n        px: \"2\",\n      },\n    },\n    lg: {\n      element: {\n        fontSize: \"1.25em\",\n      },\n      root: {\n        fontSize: \"md\",\n        lineHeight: \"{sizes.7}\",\n        minH: \"7\",\n        minW: \"7\",\n        px: \"2.5\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"subtle\",\n  },\n})\n\nexport type TagStyle = typeof tagStyle\n"
    },
    {
      "name": "tag.tsx",
      "content": "\"use client\"\n\nimport type { MouseEventHandler, ReactNode } from \"react\"\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { TagStyle } from \"./tag.style\"\nimport { useMemo, useRef } from \"react\"\nimport { createSlotComponent, styled, dataAttr } from \"@yamada-ui/react\"\nimport { useClickable } from \"../../hooks/use-clickable\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { XIcon } from \"../icon\"\nimport { tagStyle } from \"./tag.style\"\n\ninterface ComponentContext extends Pick<TagProps, \"disabled\"> {}\n\nexport interface TagProps\n  extends HTMLStyledProps<\"span\">,\n    ThemeProps<TagStyle> {\n  /**\n   * If `true`, the tag is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * Icon to be displayed to the end of the tag.\n   */\n  endIcon?: ReactNode\n  /**\n   * Icon to be displayed to the start of the tag.\n   */\n  startIcon?: ReactNode\n  /**\n   * Props for tag close button element.\n   */\n  closeButtonProps?: TagCloseButtonProps\n  /**\n   * Props for content element.\n   */\n  contentProps?: TagContentProps\n  /**\n   * Props for icon element.\n   */\n  iconProps?: HTMLStyledProps<\"span\">\n  /**\n   * Function to be executed when the close button is clicked.\n   */\n  onClose?: MouseEventHandler<HTMLElement>\n}\n\nconst {\n  ComponentContext,\n  PropsContext: TagPropsContext,\n  useComponentContext,\n  usePropsContext: useTagPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<TagProps, TagStyle, ComponentContext>(\"tag\", tagStyle)\n\nexport { TagPropsContext, useTagPropsContext }\n\n/**\n * `Tag` is a component used to categorize or organize items using keywords that describe them.\n *\n * @see https://yamada-ui.com/components/tag\n */\nexport const Tag = withProvider<\"span\", TagProps, \"disabled\">(\n  ({\n    children,\n    disabled,\n    endIcon,\n    startIcon,\n    closeButtonProps,\n    contentProps,\n    iconProps,\n    onClose,\n    ...rest\n  }) => {\n    const context = useMemo(() => ({ disabled }), [disabled])\n\n    return (\n      <ComponentContext value={context}>\n        <styled.span data-disabled={dataAttr(disabled)} {...rest}>\n          {startIcon ? (\n            <TagStartIcon {...iconProps}>{startIcon}</TagStartIcon>\n          ) : null}\n\n          {children ? (\n            <TagContent {...contentProps}>{children}</TagContent>\n          ) : null}\n\n          {endIcon ? <TagEndIcon {...iconProps}>{endIcon}</TagEndIcon> : null}\n\n          {onClose ? (\n            <TagCloseButton onClick={onClose} {...closeButtonProps} />\n          ) : null}\n        </styled.span>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n  { transferProps: [\"disabled\"] },\n)()\n\ninterface TagContentProps extends HTMLStyledProps<\"span\"> {}\n\nconst TagContent = withContext<\"span\", TagContentProps>(\"span\", \"content\")(\n  undefined,\n  (props) => {\n    const { disabled } = useComponentContext()\n\n    return { \"data-disabled\": dataAttr(disabled), ...props }\n  },\n)\n\ninterface TagStartIconProps extends HTMLStyledProps<\"span\"> {}\n\nconst TagStartIcon = withContext<\"span\", TagStartIconProps>(\"span\", [\n  \"icon\",\n  \"start\",\n])(undefined, (props) => {\n  const { disabled } = useComponentContext()\n\n  return { \"data-disabled\": dataAttr(disabled), ...props }\n})\n\ninterface TagEndIconProps extends HTMLStyledProps<\"span\"> {}\n\nconst TagEndIcon = withContext<\"span\", TagEndIconProps>(\"span\", [\n  \"icon\",\n  \"end\",\n])(undefined, (props) => {\n  const { disabled } = useComponentContext()\n\n  return { \"data-disabled\": dataAttr(disabled), ...props }\n})\n\ninterface TagCloseButtonProps extends HTMLStyledProps<\"span\"> {}\n\nconst TagCloseButton = withContext<\"span\", TagCloseButtonProps>(\"span\", [\n  \"icon\",\n  \"closeButton\",\n])(undefined, ({ children, ...props }) => {\n  const ref = useRef<HTMLSpanElement>(null)\n  const { disabled } = useComponentContext()\n  const rest = useClickable<HTMLSpanElement>({ ref, disabled, ...props })\n  const { t } = useI18n(\"tag\")\n\n  return {\n    \"aria-label\": t(\"Close tag\"),\n    \"data-disabled\": dataAttr(disabled),\n    children: children || <XIcon />,\n    ...rest,\n  }\n})\n"
    }
  ]
}
