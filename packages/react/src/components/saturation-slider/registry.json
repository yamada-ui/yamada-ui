{
  "$schema": "https://yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": ["hue-slider", "slider", "field"],
    "externals": [],
    "hooks": ["use-controllable-state", "use-pan-event"],
    "providers": ["i18n-provider"]
  },
  "dependents": {
    "components": ["color-selector"],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./saturation-slider.style\"\nexport * as SaturationSlider from \"./namespace\"\nexport {\n  SaturationSliderPropsContext,\n  SaturationSliderRoot,\n  SaturationSliderThumb,\n  SaturationSliderTrack,\n  useSaturationSliderPropsContext,\n} from \"./saturation-slider\"\nexport type {\n  SaturationSliderRootProps,\n  SaturationSliderThumbProps,\n  SaturationSliderTrackProps,\n} from \"./saturation-slider\"\nexport * from \"./use-saturation-slider\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  SaturationSliderPropsContext as PropsContext,\n  SaturationSliderRoot as Root,\n  SaturationSliderThumb as Thumb,\n  SaturationSliderTrack as Track,\n  useSaturationSliderPropsContext as usePropsContext,\n} from \"./saturation-slider\"\nexport type {\n  SaturationSliderRootProps as RootProps,\n  SaturationSliderThumbProps as ThumbProps,\n  SaturationSliderTrackProps as TrackProps,\n} from \"./saturation-slider\"\n"
    },
    {
      "name": "saturation-slider.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\nimport { hueSliderStyle } from \"../hue-slider\"\nimport { sliderStyle } from \"../slider\"\n\nexport const saturationSliderStyle = defineComponentSlotStyle({\n  base: {\n    root: {\n      aspectRatio: \"16 / 9\",\n      boxShadow: \"inner\",\n      isolation: \"isolate\",\n      maxW: \"full\",\n      p: \"calc({thumb-size} / 2)\",\n      rounded: \"{root-rounded}\",\n      touchAction: \"none\",\n      w: \"full\",\n      _readOnly: { layerStyle: \"readOnly\" },\n      _disabled: { layerStyle: \"disabled\" },\n    },\n    thumb: {\n      ...sliderStyle.base?.thumb,\n      ...hueSliderStyle.base?.thumb,\n      boxSize: \"{thumb-size}\",\n      left: \"{--x, 0%}\",\n      position: \"absolute\",\n      rounded: \"{thumb-rounded}\",\n      top: \"{--y, 0%}\",\n      transform: \"translate(-50%, -50%)\",\n    },\n    track: {\n      boxSize: \"full\",\n      cursor: {\n        base: \"pointer\",\n        _readOnly: \"default\",\n        _disabled: \"not-allowed\",\n      },\n      position: \"relative\",\n    },\n  },\n\n  props: {\n    /**\n     * The shape of the thumb.\n     *\n     * @default 'circle'\n     */\n    shape: {\n      circle: {\n        root: {\n          ...sliderStyle.props?.shape.circle.root,\n          \"--root-rounded\": \"radii.l2\",\n        },\n      },\n      rounded: {\n        root: {\n          ...sliderStyle.props?.shape.rounded.root,\n          \"--root-rounded\": \"radii.l2\",\n        },\n      },\n      square: {\n        root: {\n          ...sliderStyle.props?.shape.square.root,\n          \"--root-rounded\": \"0\",\n        },\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      root: { \"--thumb-size\": hueSliderStyle.sizes?.xs.root[\"--thumb-size\"] },\n    },\n    sm: {\n      root: { \"--thumb-size\": hueSliderStyle.sizes?.sm.root[\"--thumb-size\"] },\n    },\n    md: {\n      root: { \"--thumb-size\": hueSliderStyle.sizes?.md.root[\"--thumb-size\"] },\n    },\n    lg: {\n      root: { \"--thumb-size\": hueSliderStyle.sizes?.lg.root[\"--thumb-size\"] },\n    },\n    xl: {\n      root: { \"--thumb-size\": hueSliderStyle.sizes?.xl.root[\"--thumb-size\"] },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    shape: \"circle\",\n  },\n})\n\nexport type SaturationSliderStyle = typeof saturationSliderStyle\n"
    },
    {
      "name": "saturation-slider.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps, Merge } from \"@yamada-ui/react\"\nimport type { SaturationSliderStyle } from \"./saturation-slider.style\"\nimport type {\n  UseSaturationSliderProps,\n  UseSaturationSliderReturn,\n} from \"./use-saturation-slider\"\nimport { useMemo } from \"react\"\nimport { createSlotComponent, styled } from \"@yamada-ui/react\"\nimport { saturationSliderStyle } from \"./saturation-slider.style\"\nimport { useSaturationSlider } from \"./use-saturation-slider\"\n\ninterface ComponentContext\n  extends Pick<UseSaturationSliderReturn, \"getThumbProps\" | \"getTrackProps\"> {}\n\nexport interface SaturationSliderRootProps\n  extends Merge<HTMLStyledProps, UseSaturationSliderProps>,\n    ThemeProps<SaturationSliderStyle> {\n  /**\n   * Props for the input element.\n   */\n  inputProps?: HTMLStyledProps<\"input\">\n  /**\n   * Props for the thumb element.\n   */\n  thumbProps?: SaturationSliderThumbProps\n  /**\n   * Props for the track element.\n   */\n  trackProps?: SaturationSliderTrackProps\n}\n\nconst {\n  ComponentContext,\n  PropsContext: SaturationSliderPropsContext,\n  useComponentContext,\n  usePropsContext: useSaturationSliderPropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<\n  SaturationSliderRootProps,\n  SaturationSliderStyle,\n  ComponentContext\n>(\"saturation-slider\", saturationSliderStyle)\n\nexport { SaturationSliderPropsContext, useSaturationSliderPropsContext }\n\n/**\n * `SaturationSlider` is a component used to allow the user to select a color saturation.\n *\n * @see https://yamada-ui.com/docs/components/saturation-slider\n */\nexport const SaturationSliderRoot = withProvider<\n  \"input\",\n  SaturationSliderRootProps\n>(({ children, inputProps, thumbProps, trackProps, ...rest }) => {\n  const { getInputProps, getRootProps, getThumbProps, getTrackProps } =\n    useSaturationSlider(rest)\n  const computedChildren = useMemo(() => {\n    if (children) return children\n\n    return (\n      <SaturationSliderTrack {...trackProps}>\n        <SaturationSliderThumb {...thumbProps} />\n      </SaturationSliderTrack>\n    )\n  }, [children, thumbProps, trackProps])\n  const context = useMemo(\n    () => ({ getThumbProps, getTrackProps }),\n    [getThumbProps, getTrackProps],\n  )\n\n  return (\n    <ComponentContext value={context}>\n      <styled.div {...getRootProps()}>\n        <styled.input {...getInputProps(inputProps)} />\n        {computedChildren}\n      </styled.div>\n    </ComponentContext>\n  )\n}, \"root\")()\n\nexport interface SaturationSliderTrackProps extends HTMLStyledProps {}\n\nexport const SaturationSliderTrack = withContext<\n  \"div\",\n  SaturationSliderTrackProps\n>(\"div\", \"track\")(undefined, (props) => {\n  const { getTrackProps } = useComponentContext()\n\n  return getTrackProps(props)\n})\n\nexport interface SaturationSliderThumbProps extends HTMLStyledProps {}\n\nexport const SaturationSliderThumb = withContext<\n  \"div\",\n  SaturationSliderThumbProps\n>(\"div\", \"thumb\")(undefined, (props) => {\n  const { getThumbProps } = useComponentContext()\n\n  return getThumbProps(props)\n})\n"
    },
    {
      "name": "use-saturation-slider.ts",
      "content": "\"use client\"\n\nimport type { KeyboardEvent } from \"react\"\nimport type {\n  HTMLProps,\n  HTMLRefAttributes,\n  PropGetter,\n  Point,\n} from \"@yamada-ui/react\"\nimport type { FieldProps } from \"../field\"\nimport { useCallback } from \"react\"\nimport { useControllableState } from \"../../hooks/use-controllable-state\"\nimport { usePanEvent } from \"../../hooks/use-pan-event\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport {\n  clampNumber,\n  cx,\n  handlerAll,\n  mergeRefs,\n  roundNumberToStep,\n  visuallyHiddenAttributes,\n  runKeyAction,\n} from \"@yamada-ui/react\"\nimport { useFieldProps } from \"../field\"\n\nfunction clampValue(value: [number, number, number]) {\n  return [\n    clampNumber(value[0], 0, 360),\n    clampNumber(value[1], 0, 1),\n    clampNumber(value[2], 0, 1),\n  ] as [number, number, number]\n}\n\nexport interface UseSaturationSliderProps\n  extends Omit<HTMLProps, \"defaultValue\" | \"onChange\" | \"ref\">,\n    HTMLRefAttributes<\"input\">,\n    FieldProps {\n  /**\n   * The base `id` to use for the slider.\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms.\n   */\n  name?: string\n  /**\n   * The initial value of the saturation slider.\n   *\n   * @default [0, 0, 1]\n   */\n  defaultValue?: [number, number, number]\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input.\n   */\n  getAriaValueText?: (value: [number, number, number]) => string | undefined\n  /**\n   * The step in which increments or decrements have to be made.\n   *\n   * @default 0.01\n   */\n  step?: number\n  /**\n   * The value of the saturation slider.\n   */\n  value?: [number, number, number]\n  /**\n   * Function called whenever the saturation slider value changes.\n   */\n  onChange?: (value: [number, number, number]) => void\n  /**\n   * Function called when the user is done selecting a new value.\n   */\n  onChangeEnd?: (value: [number, number, number]) => void\n  /**\n   * Function called when the user starts selecting a new value.\n   */\n  onChangeStart?: (value: [number, number, number]) => void\n}\n\nexport const useSaturationSlider = (props: UseSaturationSliderProps = {}) => {\n  const {\n    props: {\n      id,\n      ref,\n      name,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-valuetext\": ariaValueText,\n      defaultValue = [0, 0, 1],\n      disabled,\n      getAriaValueText,\n      readOnly,\n      required,\n      step = 0.01,\n      value: valueProp,\n      onChange: onChangeProp,\n      onChangeEnd,\n      onChangeStart,\n      ...rest\n    },\n    ariaProps,\n    dataProps,\n    eventProps,\n  } = useFieldProps(props)\n  const { t } = useI18n(\"saturationSlider\")\n  const [value, setValue] = useControllableState({\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n  const [h, s, v] = clampValue(value)\n  const interactive = !(disabled || readOnly)\n  const [_, getPanEventProps] = usePanEvent<HTMLDivElement>({\n    onEnd: (_, point, rect) => {\n      if (!interactive) return\n\n      const panValue = getPanValue(point, rect)\n\n      onChangeEnd?.(panValue)\n    },\n    onMove: (_, point, rect) => {\n      if (!interactive) return\n\n      const panValue = getPanValue(point, rect)\n\n      setValue(panValue)\n    },\n    onStart: (_, point, rect) => {\n      if (!interactive) return\n\n      const panValue = getPanValue(point, rect)\n\n      onChangeStart?.(value)\n      setValue(panValue)\n    },\n  })\n\n  const onChange = useCallback(\n    ([h, s, v]: [number, number, number]) => {\n      if (!interactive) return\n\n      s = clampNumber(s, 0, 1)\n      v = clampNumber(v, 0, 1)\n\n      setValue([h, s, v])\n    },\n    [interactive, setValue],\n  )\n\n  const getPanValue = useCallback(\n    (\n      { x, y }: Point,\n      { bottom, height, left, width }: DOMRect,\n    ): [number, number, number] => {\n      const diff = { x: x - left, y: bottom - y }\n      const percent = { x: diff.x / width, y: diff.y / height }\n      const clamp = {\n        x: clampNumber(percent.x, 0, 1),\n        y: clampNumber(percent.y, 0, 1),\n      }\n      const s = roundNumberToStep(clamp.x, 0, step)\n      const v = roundNumberToStep(clamp.y, 0, step)\n\n      return [h, parseFloat(s), parseFloat(v)]\n    },\n    [h, step],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLDivElement>) => {\n      runKeyAction(ev, {\n        ArrowDown: () => onChange([h, s, v - step]),\n        ArrowLeft: () => onChange([h, s - step, v]),\n        ArrowRight: () => onChange([h, s + step, v]),\n        ArrowUp: () => onChange([h, s, v + step]),\n      })\n    },\n    [h, onChange, s, step, v],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}) => ({\n      ...dataProps,\n      ...rest,\n      ...props,\n      style: {\n        ...rest.style,\n        ...props.style,\n        \"--x\": `${Math.abs(s * 100)}%`,\n        \"--y\": `${Math.abs(100 - v * 100)}%`,\n        backgroundColor: `hsl(${h}, 100%, 50%)`,\n        backgroundImage:\n          \"linear-gradient(0deg, #000, transparent), linear-gradient(90deg, #fff, transparent)\",\n      },\n      onBlur: handlerAll(props.onBlur, eventProps.onBlur),\n      onFocus: handlerAll(props.onFocus, eventProps.onFocus),\n    }),\n    [dataProps, eventProps, h, rest, s, v],\n  )\n\n  const getInputProps: PropGetter<\"input\"> = useCallback(\n    (props = {}) => ({\n      ...visuallyHiddenAttributes,\n      ...dataProps,\n      ...ariaProps,\n      id,\n      type: \"hidden\",\n      name,\n      disabled,\n      readOnly,\n      required,\n      value: [h, s, v].toString(),\n      ...props,\n      ref: mergeRefs(props.ref, ref),\n    }),\n    [\n      ariaProps,\n      dataProps,\n      disabled,\n      h,\n      id,\n      name,\n      readOnly,\n      ref,\n      required,\n      s,\n      v,\n    ],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}) => getPanEventProps({ ...dataProps, ...props }),\n    [dataProps, getPanEventProps],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}) => ({\n      ...dataProps,\n      ...ariaProps,\n      \"aria-label\": t(\"Saturation and brightness thumb\"),\n      \"aria-roledescription\": \"2D slider\",\n      \"aria-valuemax\": 100,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": s * 100,\n      \"aria-valuetext\":\n        ariaValueText ??\n        getAriaValueText?.(value) ??\n        t(\"Saturation {saturation}%, Brightness {brightness}%\", {\n          brightness: v * 100,\n          saturation: s * 100,\n        }),\n      role: \"slider\",\n      tabIndex: interactive ? 0 : -1,\n      ...props,\n      \"aria-labelledby\": cx(props[\"aria-labelledby\"], ariaLabelledBy),\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n    }),\n    [\n      ariaLabelledBy,\n      ariaProps,\n      ariaValueText,\n      dataProps,\n      getAriaValueText,\n      interactive,\n      onKeyDown,\n      s,\n      t,\n      v,\n      value,\n    ],\n  )\n\n  return {\n    setValue,\n    value,\n    getInputProps,\n    getRootProps,\n    getThumbProps,\n    getTrackProps,\n    onChange,\n  }\n}\n\nexport type UseSaturationSliderReturn = ReturnType<typeof useSaturationSlider>\n"
    }
  ]
}
