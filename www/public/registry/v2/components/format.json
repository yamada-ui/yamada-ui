{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": ["i18n-provider"]
  },
  "section": "components",
  "sources": [
    {
      "name": "format-byte.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const formatByteStyle = defineComponentStyle({})\n\nexport type FormatByteStyle = typeof formatByteStyle\n"
    },
    {
      "name": "format-byte.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FormatByteStyle } from \"./format-byte.style\"\nimport type { FormatBytesOptions } from \"./use-format-byte\"\nimport { createComponent, styled } from \"@yamada-ui/react\"\nimport { formatByteStyle } from \"./format-byte.style\"\nimport { useFormatByte } from \"./use-format-byte\"\n\nexport interface FormatByteProps\n  extends HTMLStyledProps<\"span\">,\n    ThemeProps<FormatByteStyle>,\n    FormatBytesOptions {\n  /**\n   * The byte size to format\n   */\n  value: number\n}\n\nconst {\n  PropsContext: FormatBytePropsContext,\n  usePropsContext: useFormatBytePropsContext,\n  withContext,\n} = createComponent<FormatByteProps, FormatByteStyle>(\n  \"format-byte\",\n  formatByteStyle,\n)\n\nexport { FormatBytePropsContext, useFormatBytePropsContext }\n\n/**\n * `Format` is used to format dates, numbers, and bytes according to a specific locale.\n *\n * @see https://yamada-ui.com/docs/components/format\n */\nexport const FormatByte = withContext(\n  ({ locale, unit, unitDisplay, value, ...rest }) => {\n    const text = useFormatByte(value, { locale, unit, unitDisplay })\n\n    return <styled.span {...rest}>{text}</styled.span>\n  },\n)()\n"
    },
    {
      "name": "format-date-time.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const formatDateTimeStyle = defineComponentStyle({})\n\nexport type FormatDateTimeStyle = typeof formatDateTimeStyle\n"
    },
    {
      "name": "format-date-time.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FormatDateTimeStyle } from \"./format-date-time.style\"\nimport type { FormatDateTimeOptions } from \"./use-format-date-time\"\nimport { createComponent, styled } from \"@yamada-ui/react\"\nimport { formatDateTimeStyle } from \"./format-date-time.style\"\nimport { useFormatDateTime } from \"./use-format-date-time\"\n\nexport interface FormatDateTimeProps\n  extends HTMLStyledProps<\"span\">,\n    ThemeProps<FormatDateTimeStyle>,\n    FormatDateTimeOptions {\n  /**\n   * The date time to format\n   */\n  value: Date\n}\n\nconst {\n  PropsContext: FormatDateTimePropsContext,\n  usePropsContext: useFormatDateTimePropsContext,\n  withContext,\n} = createComponent<FormatDateTimeProps, FormatDateTimeStyle>(\n  \"format-date-time\",\n  formatDateTimeStyle,\n)\n\nexport { FormatDateTimePropsContext, useFormatDateTimePropsContext }\n\n/**\n * `Format` is used to format dates, numbers, and bytes according to a specific locale.\n *\n * @see https://yamada-ui.com/docs/components/format\n */\nexport const FormatDateTime = withContext(\n  ({\n    calendar,\n    dateStyle,\n    day,\n    dayPeriod,\n    era,\n    formatMatcher,\n    fractionalSecondDigits,\n    hour,\n    hour12,\n    hourCycle,\n    locale,\n    localeMatcher,\n    minute,\n    month,\n    numberingSystem,\n    second,\n    timeStyle,\n    timeZone,\n    timeZoneName,\n    value,\n    weekday,\n    year,\n    ...rest\n  }) => {\n    const text = useFormatDateTime(value, {\n      calendar,\n      dateStyle,\n      day,\n      dayPeriod,\n      era,\n      formatMatcher,\n      fractionalSecondDigits,\n      hour,\n      hour12,\n      hourCycle,\n      locale,\n      localeMatcher,\n      minute,\n      month,\n      numberingSystem,\n      second,\n      timeStyle,\n      timeZone,\n      timeZoneName,\n      weekday,\n      year,\n    })\n\n    return <styled.span {...rest}>{text}</styled.span>\n  },\n)()\n"
    },
    {
      "name": "format-number.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const formatNumberStyle = defineComponentStyle({})\n\nexport type FormatNumberStyle = typeof formatNumberStyle\n"
    },
    {
      "name": "format-number.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FormatNumberStyle } from \"./format-number.style\"\nimport type { FormatNumberOptions } from \"./use-format-number\"\nimport { createComponent, styled } from \"@yamada-ui/react\"\nimport { formatNumberStyle } from \"./format-number.style\"\nimport { useFormatNumber } from \"./use-format-number\"\n\nexport interface FormatNumberProps\n  extends Omit<HTMLStyledProps<\"span\">, \"style\">,\n    ThemeProps<FormatNumberStyle>,\n    FormatNumberOptions {\n  /**\n   * The numeric value to be formatted.\n   */\n  value: number\n}\n\nconst {\n  PropsContext: FormatNumberPropsContext,\n  usePropsContext: useFormatNumberPropsContext,\n  withContext,\n} = createComponent<FormatNumberProps, FormatNumberStyle>(\n  \"format-number\",\n  formatNumberStyle,\n)\n\nexport { FormatNumberPropsContext, useFormatNumberPropsContext }\n\n/**\n * `Format` is used to format dates, numbers, and bytes according to a specific locale.\n *\n * @see https://yamada-ui.com/docs/components/format\n */\nexport const FormatNumber = withContext<\"span\", FormatNumberProps>(\n  ({\n    style,\n    compactDisplay,\n    currency,\n    currencyDisplay,\n    currencySign,\n    locale,\n    localeMatcher,\n    maximumFractionDigits,\n    maximumSignificantDigits,\n    minimumFractionDigits,\n    minimumIntegerDigits,\n    minimumSignificantDigits,\n    notation,\n    numberingSystem,\n    roundingIncrement,\n    roundingMode,\n    roundingPriority,\n    signDisplay,\n    trailingZeroDisplay,\n    unit,\n    unitDisplay,\n    useGrouping,\n    value,\n    ...rest\n  }) => {\n    const text = useFormatNumber(value, {\n      style,\n      compactDisplay,\n      currency,\n      currencyDisplay,\n      currencySign,\n      locale,\n      localeMatcher,\n      maximumFractionDigits,\n      maximumSignificantDigits,\n      minimumFractionDigits,\n      minimumIntegerDigits,\n      minimumSignificantDigits,\n      notation,\n      numberingSystem,\n      roundingIncrement,\n      roundingMode,\n      roundingPriority,\n      signDisplay,\n      trailingZeroDisplay,\n      unit,\n      unitDisplay,\n      useGrouping,\n    })\n\n    return <styled.span {...rest}>{text}</styled.span>\n  },\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"../format/format-number.style\"\nexport * from \"./format-byte.style\"\nexport {\n  FormatByte,\n  FormatBytePropsContext,\n  useFormatBytePropsContext,\n} from \"./format-byte\"\nexport type { FormatByteProps } from \"./format-byte\"\nexport {\n  FormatDateTime,\n  FormatDateTimePropsContext,\n  useFormatDateTimePropsContext,\n} from \"./format-date-time\"\nexport type { FormatDateTimeProps } from \"./format-date-time\"\nexport {\n  FormatNumber,\n  FormatNumberPropsContext,\n  useFormatNumberPropsContext,\n} from \"./format-number\"\nexport type { FormatNumberProps } from \"./format-number\"\nexport * as Format from \"./namespace\"\nexport * from \"./use-format-byte\"\nexport * from \"./use-format-date-time\"\nexport * from \"./use-format-number\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export {\n  FormatByte as Byte,\n  FormatBytePropsContext as BytePropsContext,\n  useFormatBytePropsContext as useBytePropsContext,\n} from \"./format-byte\"\nexport type { FormatByteProps as ByteProps } from \"./format-byte\"\nexport {\n  FormatDateTime as DateTime,\n  FormatDateTimePropsContext as DateTimePropsContext,\n  useFormatDateTimePropsContext as useDateTimePropsContext,\n} from \"./format-date-time\"\nexport type { FormatDateTimeProps as DateTimeProps } from \"./format-date-time\"\nexport {\n  FormatNumber as Number,\n  FormatNumberPropsContext as NumberPropsContext,\n  useFormatNumberPropsContext as useNumberPropsContext,\n} from \"./format-number\"\nexport type { FormatNumberProps as NumberProps } from \"./format-number\"\nexport {\n  useFormatByte as useByte,\n  useByteFormat as useByteFormat,\n} from \"./use-format-byte\"\nexport type { FormatBytesOptions as BytesOptions } from \"./use-format-byte\"\nexport {\n  getFormatDateTime as getDateTime,\n  useFormatDateTime as useDateTime,\n  useDateTimeFormat as useDateTimeFormat,\n} from \"./use-format-date-time\"\nexport type { FormatDateTimeOptions as DateTimeOptions } from \"./use-format-date-time\"\nexport {\n  getFormatNumber as getNumber,\n  useFormatNumber as useNumber,\n  useNumberFormat as useNumberFormat,\n} from \"./use-format-number\"\nexport type { FormatNumberOptions as NumberOptions } from \"./use-format-number\"\n"
    },
    {
      "name": "use-format-byte.ts",
      "content": "\"use client\"\n\nimport type { Locale } from \"../../providers/i18n-provider\"\nimport type { AnyString } from \"@yamada-ui/react\"\nimport { useCallback } from \"react\"\nimport { useI18n } from \"../../providers/i18n-provider\"\nimport { useNumberFormat } from \"./use-format-number\"\n\nconst bitPrefixes = [\"\", \"kilo\", \"mega\", \"giga\", \"tera\"]\nconst bytePrefixes = [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\"]\n\nexport interface FormatBytesOptions {\n  /**\n   * The locale string to use for formatting.\n   *\n   * @default 'en-US'\n   */\n  locale?: AnyString | Locale\n  /**\n   * The unit granularity to display\n   */\n  unit?: \"bit\" | \"byte\"\n  /**\n   * The unit display\n   */\n  unitDisplay?: \"long\" | \"narrow\" | \"short\"\n}\n\n/**\n * `useFormatByte` is a custom hook that returns the formatted byte.\n *\n * @see https://yamada-ui.com/docs/hooks/use-format-byte\n */\nexport const useFormatByte = (bytes: number, options?: FormatBytesOptions) => {\n  const byteFormat = useByteFormat(options)\n\n  return byteFormat(bytes)\n}\n\nexport type UseFormatByteReturn = ReturnType<typeof useFormatByte>\n\nexport const useByteFormat = ({\n  locale,\n  unit: defaultUnit = \"byte\",\n  unitDisplay: defaultUnitDisplay = \"short\",\n}: FormatBytesOptions = {}) => {\n  const { locale: defaultLocale } = useI18n()\n  const numberFormat = useNumberFormat({ locale: locale ?? defaultLocale })\n\n  const byteFormat = useCallback(\n    (\n      bytes: number,\n      {\n        unit = defaultUnit,\n        unitDisplay = defaultUnitDisplay,\n      }: Omit<FormatBytesOptions, \"locale\"> = {},\n    ) => {\n      const sanitizedBytes = Number.isNaN(bytes) ? 0 : bytes\n      const prefix = unit === \"bit\" ? bitPrefixes : bytePrefixes\n      const index = Math.max(\n        0,\n        Math.min(Math.floor(Math.log10(sanitizedBytes) / 3), prefix.length - 1),\n      )\n      const value =\n        sanitizedBytes === 0\n          ? 0\n          : Number.parseFloat(\n              (sanitizedBytes / 10 ** (3 * index)).toPrecision(3),\n            )\n\n      return numberFormat(value, {\n        style: \"unit\",\n        unit: prefix[index] + unit,\n        unitDisplay,\n      })\n    },\n    [defaultUnit, defaultUnitDisplay, numberFormat],\n  )\n\n  return byteFormat\n}\n\nexport type UseByteFormatReturn = ReturnType<typeof useByteFormat>\n"
    },
    {
      "name": "use-format-date-time.ts",
      "content": "\"use client\"\n\nimport type { Locale } from \"../../providers/i18n-provider\"\nimport type { AnyString } from \"@yamada-ui/react\"\nimport { useCallback, useRef } from \"react\"\nimport { i18nCache, useI18n } from \"../../providers/i18n-provider\"\n\nexport const getFormatDateTime = i18nCache(Intl.DateTimeFormat)\n\nexport interface FormatDateTimeOptions extends Intl.DateTimeFormatOptions {\n  /**\n   * The locale string to use for formatting.\n   *\n   * @default 'en-US'\n   */\n  locale?: AnyString | Locale\n}\n\n/**\n * `useFormatDateTime` is a custom hook that returns the formatted date time.\n *\n * @see https://yamada-ui.com/docs/hooks/use-format-date-time\n */\nexport const useFormatDateTime = (\n  value: Date,\n  options?: FormatDateTimeOptions,\n) => {\n  const dateTimeFormat = useDateTimeFormat(options)\n\n  return dateTimeFormat(value)\n}\n\nexport type UseFormatDateTimeReturn = ReturnType<typeof useFormatDateTime>\n\nexport const useDateTimeFormat = ({\n  locale,\n  ...options\n}: FormatDateTimeOptions = {}) => {\n  const { locale: defaultLocale } = useI18n()\n  const memoizedOptions = useRef(options)\n\n  locale ??= defaultLocale\n\n  const dateTimeFormat = useCallback(\n    (value: Date, options?: Intl.DateTimeFormatOptions) => {\n      const formatter = getFormatDateTime(locale, {\n        ...memoizedOptions.current,\n        ...options,\n      })\n\n      return formatter.format(value)\n    },\n    [locale],\n  )\n\n  return dateTimeFormat\n}\n\nexport type UseDateTimeFormatReturn = ReturnType<typeof useDateTimeFormat>\n"
    },
    {
      "name": "use-format-number.ts",
      "content": "\"use client\"\n\nimport type { Locale } from \"../../providers/i18n-provider\"\nimport type { AnyString } from \"@yamada-ui/react\"\nimport { useCallback, useRef } from \"react\"\nimport { i18nCache, useI18n } from \"../../providers/i18n-provider\"\n\nexport const getFormatNumber = i18nCache(Intl.NumberFormat)\n\nexport interface FormatNumberOptions extends Intl.NumberFormatOptions {\n  /**\n   * The locale string to use for formatting.\n   *\n   * @default 'en-US'\n   */\n  locale?: AnyString | Locale\n}\n\n/**\n * `useFormatNumber` is a custom hook that returns the formatted number.\n *\n * @see https://yamada-ui.com/docs/hooks/use-format-number\n */\nexport const useFormatNumber = (\n  value: number,\n  options?: FormatNumberOptions,\n) => {\n  const numberFormat = useNumberFormat(options)\n\n  return numberFormat(value)\n}\n\nexport type UseFormatNumberReturn = ReturnType<typeof useFormatNumber>\n\nexport const useNumberFormat = ({\n  locale,\n  ...options\n}: FormatNumberOptions = {}) => {\n  const { locale: defaultLocale } = useI18n()\n  const memoizedOptions = useRef(options)\n\n  locale ??= defaultLocale\n\n  const numberFormat = useCallback(\n    (value: number, options?: Intl.NumberFormatOptions) => {\n      const formatter = getFormatNumber(locale, {\n        ...memoizedOptions.current,\n        ...options,\n      })\n\n      return formatter.format(value)\n    },\n    [locale],\n  )\n\n  return numberFormat\n}\n\nexport type UseNumberFormatReturn = ReturnType<typeof useNumberFormat>\n"
    }
  ]
}
