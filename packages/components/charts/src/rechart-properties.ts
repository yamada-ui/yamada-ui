import type { ComponentPropsWithoutRef } from "react"
import type * as Recharts from "recharts"

export const areaChartProperties: (keyof ComponentPropsWithoutRef<
  typeof Recharts.AreaChart
>)[] = [
  "layout",
  "syncId",
  "syncMethod",
  "width",
  "height",
  "data",
  "margin",
  "stackOffset",
  "onClick",
  "onMouseEnter",
  "onMouseMove",
  "onMouseLeave",
]

export const barChartProperties: (keyof ComponentPropsWithoutRef<
  typeof Recharts.BarChart
>)[] = [
  "layout",
  "syncId",
  "syncMethod",
  "width",
  "height",
  "data",
  "margin",
  "barCategoryGap",
  "barGap",
  "barSize",
  "maxBarSize",
  "stackOffset",
  "reverseStackOrder",
  "onClick",
  "onMouseEnter",
  "onMouseMove",
  "onMouseLeave",
]

export const lineChartProperties: (keyof ComponentPropsWithoutRef<
  typeof Recharts.LineChart
>)[] = [
  "layout",
  "syncId",
  "syncMethod",
  "width",
  "height",
  "data",
  "margin",
  "onClick",
  "onMouseEnter",
  "onMouseMove",
  "onMouseLeave",
]

export const radarChartProperties: (keyof ComponentPropsWithoutRef<
  typeof Recharts.RadarChart
>)[] = [
  "width",
  "height",
  "data",
  "cx",
  "cy",
  "startAngle",
  "endAngle",
  "innerRadius",
  "outerRadius",
  "margin",
  "onMouseEnter",
  "onClick",
]

export const pieChartProperties: (keyof ComponentPropsWithoutRef<
  typeof Recharts.PieChart
>)[] = ["width", "height", "margin", "onClick", "onMouseEnter", "onMouseLeave"]

export const referenceLineProperties: (keyof Recharts.ReferenceLineProps)[] = [
  "xAxisId",
  "yAxisId",
  "x",
  "y",
  "ifOverflow",
  "viewBox",
  "xAxis",
  "yAxis",
  "label",
  "isFront",
  "strokeWidth",
  "segment",
]

export const containerProperties: (keyof Omit<
  Recharts.ResponsiveContainerProps,
  "children"
>)[] = [
  "aspect",
  "width",
  "height",
  "minWidth",
  "minHeight",
  "debounce",
  "onResize",
]

export const gridProperties: (keyof Recharts.CartesianGridProps)[] = [
  "x",
  "y",
  "width",
  "height",
  "horizontal",
  "vertical",
  "horizontalPoints",
  "horizontalCoordinatesGenerator",
  "verticalPoints",
  "verticalCoordinatesGenerator",
  "fill",
  "fillOpacity",
  "strokeDasharray",
]

export const xAxisProperties: (keyof Recharts.XAxisProps)[] = [
  "hide",
  "dataKey",
  "xAxisId",
  "width",
  "height",
  "orientation",
  "type",
  "allowDecimals",
  "allowDataOverflow",
  "allowDuplicatedCategory",
  "angle",
  "tickCount",
  "domain",
  "includeHidden",
  "interval",
  "padding",
  "minTickGap",
  "axisLine",
  "tickLine",
  "tickSize",
  "tickFormatter",
  "ticks",
  "tick",
  "mirror",
  "reversed",
  "label",
  "scale",
  "unit",
  "name",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
  "tickMargin",
]

export const yAxisProperties: (keyof Recharts.YAxisProps)[] = [
  "hide",
  "dataKey",
  "yAxisId",
  "width",
  "height",
  "orientation",
  "type",
  "tickCount",
  "domain",
  "includeHidden",
  "interval",
  "padding",
  "minTickGap",
  "allowDecimals",
  "allowDataOverflow",
  "allowDuplicatedCategory",
  "axisLine",
  "tickLine",
  "tickSize",
  "tickFormatter",
  "ticks",
  "tick",
  "mirror",
  "reversed",
  "label",
  "scale",
  "unit",
  "name",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
  "tickMargin",
]

export const legendProperties: (keyof Omit<Recharts.LegendProps, "ref">)[] = [
  "width",
  "height",
  "layout",
  "align",
  "verticalAlign",
  "iconSize",
  "iconType",
  "payload",
  "chartWidth",
  "chartHeight",
  "margin",
  "content",
  "formatter",
  "wrapperStyle",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
]

export const tooltipProperties: (keyof Recharts.TooltipProps<any, any>)[] = [
  "offset",
  "filterNull",
  "itemStyle",
  "wrapperStyle",
  "contentStyle",
  "labelStyle",
  "cursor",
  "viewBox",
  "allowEscapeViewBox",
  "active",
  "position",
  "coordinate",
  "payload",
  "label",
  "content",
  "formatter",
  "labelFormatter",
  "itemSorter",
  "isAnimationActive",
  "animationDuration",
  "animationEasing",
]

export const areaProperties: (keyof Omit<Recharts.AreaProps, "ref">)[] = [
  "type",
  "dataKey",
  "xAxisId",
  "yAxisId",
  "legendType",
  "dot",
  "activeDot",
  "label",
  "stroke",
  "strokeWidth",
  "layout",
  "baseLine",
  "points",
  "stackId",
  "connectNulls",
  "unit",
  "name",
  "isAnimationActive",
  "animationBegin",
  "animationDuration",
  "animationEasing",
  "id",
  "onAnimationStart",
  "onAnimationEnd",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
]

export const barProperties: (keyof Omit<Recharts.BarProps, "ref">)[] = [
  "layout",
  "dataKey",
  "xAxisId",
  "yAxisId",
  "legendType",
  "label",
  "data",
  "barSize",
  "maxBarSize",
  "minPointSize",
  "background",
  "shape",
  "activeBar",
  "stackId",
  "unit",
  "name",
  "isAnimationActive",
  "animationBegin",
  "animationDuration",
  "animationEasing",
  "id",
  "onAnimationStart",
  "onAnimationEnd",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
  "radius",
]

export const radarProperties: (keyof Omit<Recharts.RadarProps, "ref">)[] = [
  "dataKey",
  "points",
  "shape",
  "dot",
  "activeDot",
  "legendType",
  "label",
  "isAnimationActive",
  "animationBegin",
  "animationDuration",
  "animationEasing",
  "onAnimationStart",
  "onAnimationEnd",
]

export const lineProperties: (keyof Omit<Recharts.LineProps, "ref">)[] = [
  "type",
  "dataKey",
  "xAxisId",
  "yAxisId",
  "legendType",
  "dot",
  "activeDot",
  "label",
  "hide",
  "points",
  "stroke",
  "strokeWidth",
  "layout",
  "connectNulls",
  "unit",
  "name",
  "isAnimationActive",
  "animationBegin",
  "animationDuration",
  "animationEasing",
  "id",
  "onAnimationStart",
  "onAnimationEnd",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
  "strokeDasharray",
]

export const pieProperties: (keyof Omit<Recharts.PieProps, "ref">)[] = [
  "cx",
  "cy",
  "innerRadius",
  "outerRadius",
  "startAngle",
  "endAngle",
  "minAngle",
  "paddingAngle",
  "nameKey",
  "dataKey",
  "legendType",
  "label",
  "labelLine",
  "data",
  "activeIndex",
  "activeShape",
  "inactiveShape",
  "isAnimationActive",
  "animationBegin",
  "animationDuration",
  "animationEasing",
  "onAnimationStart",
  "onAnimationEnd",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
]

export const dotProperties: (keyof Omit<Recharts.DotProps, "ref">)[] = [
  "cx",
  "cy",
  "r",
  "onClick",
  "onMouseDown",
  "onMouseUp",
  "onMouseMove",
  "onMouseOver",
  "onMouseOut",
  "onMouseEnter",
  "onMouseLeave",
]

export const polarGridProperties: (keyof Recharts.PolarGridProps)[] = [
  "cx",
  "cy",
  "innerRadius",
  "outerRadius",
  "polarAngles",
  "polarRadius",
  "gridType",
]

export const polarAngleAxisProperties: (keyof Recharts.PolarAngleAxisProps)[] =
  [
    "dataKey",
    "cx",
    "cy",
    "radius",
    "axisLine",
    "axisLineType",
    "tickLine",
    "tickSize",
    "tick",
    "ticks",
    "orient",
    "tickFormatter",
    "type",
    "allowDuplicatedCategory",
    "onClick",
    "onMouseDown",
    "onMouseUp",
    "onMouseMove",
    "onMouseOver",
    "onMouseOut",
    "onMouseEnter",
    "onMouseLeave",
  ]
export const polarRadiusAxisProperties: (keyof Recharts.PolarRadiusAxisProps)[] =
  [
    "angle",
    "type",
    "allowDuplicatedCategory",
    "cx",
    "cy",
    "domain",
    "reversed",
    "label",
    "orientation",
    "axisLine",
    "tick",
    "tickSize",
    "tickFormatter",
    "tickCount",
    "scale",
    "onClick",
    "onMouseDown",
    "onMouseUp",
    "onMouseMove",
    "onMouseOver",
    "onMouseOut",
    "onMouseEnter",
    "onMouseLeave",
  ]
