{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./scroll-area.style\"\nexport {\n  ScrollArea,\n  ScrollAreaPropsContext,\n  useScrollAreaPropsContext,\n} from \"./scroll-area\"\nexport type { ScrollAreaProps } from \"./scroll-area\"\nexport * from \"./use-scroll-area\"\n"
    },
    {
      "name": "scroll-area.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const scrollAreaStyle = defineComponentStyle({\n  base: {\n    \"@-moz-document url-prefix()\": {\n      scrollbarColor: \"{colors.bg.emphasized} transparent\",\n      _dark: {\n        scrollbarColor: \"{colors.bg.emphasized} transparent\",\n      },\n      _light: {\n        scrollbarColor: \"{colors.bg.emphasized} transparent\",\n      },\n    },\n    overflow: \"auto\",\n    _scrollbar: {\n      boxSize: \"3\",\n    },\n    _scrollbarCorner: {\n      bg: \"transparent\",\n    },\n    _scrollbarThumb: {\n      bg: \"bg.emphasized\",\n      bgClip: \"padding-box\",\n      border: \"3px solid transparent\",\n      rounded: \"full\",\n      _nativeHover: {\n        bg: \"bg.contrast\",\n        bgClip: \"padding-box\",\n      },\n    },\n    _scrollbarTrack: {\n      bg: \"transparent\",\n    },\n    _hidden: {\n      \"&::-webkit-scrollbar-thumb\": { bg: \"transparent\" },\n      \"&::-webkit-scrollbar-track\": { bg: \"transparent\" },\n      \"@-moz-document url-prefix()\": {\n        scrollbarColor: \"transparent transparent\",\n        _dark: {\n          scrollbarColor: \"transparent transparent\",\n        },\n        _light: {\n          scrollbarColor: \"transparent transparent\",\n        },\n      },\n      _dark: {\n        \"&::-webkit-scrollbar-thumb\": { bg: \"transparent\" },\n        \"&::-webkit-scrollbar-track\": { bg: \"transparent\" },\n        _scrollbarThumb: { bg: \"transparent\" },\n        _scrollbarTrack: { bg: \"transparent\" },\n      },\n      _light: {\n        \"&::-webkit-scrollbar-thumb\": { bg: \"transparent\" },\n        \"&::-webkit-scrollbar-track\": { bg: \"transparent\" },\n        _scrollbarThumb: { bg: \"transparent\" },\n        _scrollbarTrack: { bg: \"transparent\" },\n      },\n      _scrollbarThumb: { bg: \"transparent\" },\n      _scrollbarTrack: { bg: \"transparent\" },\n    },\n    _never: {\n      \"&::-webkit-scrollbar\": { display: \"none\" },\n      scrollbarWidth: \"none\",\n      _scrollbar: { display: \"none\" },\n    },\n  },\n})\n\nexport type ScrollAreaStyle = typeof scrollAreaStyle\n"
    },
    {
      "name": "scroll-area.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { ScrollAreaStyle } from \"./scroll-area.style\"\nimport type { UseScrollAreaProps } from \"./use-scroll-area\"\nimport { createComponent, styled } from \"@yamada-ui/react\"\nimport { scrollAreaStyle } from \"./scroll-area.style\"\nimport { useScrollArea } from \"./use-scroll-area\"\n\nexport interface ScrollAreaProps\n  extends HTMLStyledProps,\n    ThemeProps<ScrollAreaStyle>,\n    UseScrollAreaProps {}\n\nconst {\n  PropsContext: ScrollAreaPropsContext,\n  usePropsContext: useScrollAreaPropsContext,\n  withContext,\n} = createComponent<ScrollAreaProps, ScrollAreaStyle>(\n  \"scroll-area\",\n  scrollAreaStyle,\n)\n\nexport { ScrollAreaPropsContext, useScrollAreaPropsContext }\n\n/**\n * `ScrollArea` is a component that displays a customized scrollbar.\n *\n * @see https://yamada-ui.com/components/scroll-area\n */\nexport const ScrollArea = withContext<\"div\", ScrollAreaProps>(\n  ({ children, ...rest }) => {\n    const { getRootProps } = useScrollArea(rest)\n\n    return <styled.div {...getRootProps()}>{children}</styled.div>\n  },\n)()\n"
    },
    {
      "name": "use-scroll-area.ts",
      "content": "\"use client\"\n\nimport type { UIEvent } from \"react\"\nimport type { HTMLProps, PropGetter } from \"@yamada-ui/react\"\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport {\n  dataAttr,\n  handlerAll,\n  isMac,\n  mergeRefs,\n  useSafeLayoutEffect,\n  vendor,\n} from \"@yamada-ui/react\"\n\nexport interface UseScrollAreaProps extends HTMLProps {\n  /**\n   * Scrollbar visibility type.\n   *\n   * @default 'hover'\n   */\n  type?: \"always\" | \"hover\" | \"never\" | \"scroll\"\n  /**\n   * Delay in milliseconds before scrollbars are hidden.\n   *\n   * @default 1000\n   */\n  scrollHideDelay?: number\n  /**\n   * Callback function for when the scroll position changes.\n   */\n  onScrollPositionChange?: ({ x, y }: { x: number; y: number }) => void\n}\n\nexport const useScrollArea = ({\n  id,\n  ref,\n  type = \"hover\",\n  scrollHideDelay = 1000,\n  onScrollPositionChange,\n  ...rest\n}: UseScrollAreaProps = {}) => {\n  const [isHovered, setIsHovered] = useState<boolean>(false)\n  const [isScrolling, setIsScrolling] = useState<boolean>(false)\n  const isAlways = type === \"always\"\n  const isNever = type === \"never\"\n  const isHidden = !isAlways && !isHovered && !isScrolling\n  const isSafari = isMac() && vendor(/apple/i)\n  const uuid = useId()\n  const key = `${id ?? uuid}-${isHovered}-${isScrolling}`\n\n  const hoverTimeout = useRef<any>(undefined)\n  const scrollTimeout = useRef<any>(undefined)\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n  const scrollPosition = useRef({ x: 0, y: 0 })\n\n  useSafeLayoutEffect(() => {\n    if (!scrollAreaRef.current || !isSafari) return\n\n    scrollAreaRef.current.scrollLeft = scrollPosition.current.x\n    scrollAreaRef.current.scrollTop = scrollPosition.current.y\n  })\n\n  const onMouseEnter = useCallback(() => {\n    if (type !== \"hover\") return\n\n    clearTimeout(hoverTimeout.current)\n\n    setIsHovered(true)\n  }, [type])\n\n  const onMouseLeave = useCallback(() => {\n    if (type !== \"hover\") return\n\n    hoverTimeout.current = setTimeout(\n      () => setIsHovered(false),\n      scrollHideDelay,\n    )\n  }, [scrollHideDelay, type])\n\n  const onScroll = useCallback(\n    (ev: UIEvent<HTMLDivElement>) => {\n      const el = ev.target as HTMLDivElement\n\n      const { scrollLeft: x, scrollTop: y } = el\n      const { x: prevX, y: prevY } = scrollPosition.current\n      const isEqual = Math.abs(x - prevX) <= 5 && Math.abs(y - prevY) <= 5\n\n      onScrollPositionChange?.({ x, y })\n      scrollPosition.current = { x, y }\n\n      if (type !== \"scroll\" || isEqual) return\n\n      if (!isScrolling) setIsScrolling(true)\n\n      clearTimeout(scrollTimeout.current)\n\n      scrollTimeout.current = setTimeout(\n        () => setIsScrolling(false),\n        scrollHideDelay,\n      )\n    },\n    [isScrolling, onScrollPositionChange, scrollHideDelay, type],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (hoverTimeout.current) clearTimeout(hoverTimeout.current)\n      if (scrollTimeout.current) clearTimeout(scrollTimeout.current)\n    }\n  }, [])\n\n  const safariProps = useMemo(\n    () => ({\n      key,\n      ref: mergeRefs(ref, scrollAreaRef),\n      \"data-key\": key,\n    }),\n    [key, ref, scrollAreaRef],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    ({ style, ...props } = {}) => ({\n      ref,\n      style: { overflow: \"auto\", ...style },\n      ...rest,\n      ...(isSafari ? safariProps : {}),\n      ...props,\n      \"data-hidden\": dataAttr(isHidden),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-never\": dataAttr(isNever),\n      \"data-scroll\": dataAttr(isScrolling),\n      tabIndex: 0,\n      onMouseEnter: handlerAll(\n        props.onMouseEnter,\n        rest.onMouseEnter,\n        onMouseEnter,\n      ),\n      onMouseLeave: handlerAll(\n        props.onMouseLeave,\n        rest.onMouseLeave,\n        onMouseLeave,\n      ),\n      onScroll: handlerAll(props.onScroll, rest.onScroll, onScroll),\n    }),\n    [\n      isNever,\n      ref,\n      isHidden,\n      isHovered,\n      isScrolling,\n      isSafari,\n      safariProps,\n      rest,\n      onMouseEnter,\n      onMouseLeave,\n      onScroll,\n    ],\n  )\n\n  return {\n    isAlways,\n    isHidden,\n    isHovered,\n    isNever,\n    isScrolling,\n    getRootProps,\n  }\n}\n\nexport type UseScrollAreaReturn = ReturnType<typeof useScrollArea>\n"
    }
  ]
}
