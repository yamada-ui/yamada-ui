{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "section": "components",
  "sources": [
    {
      "name": "index.ts",
      "content": "export * from \"./timeline.style\"\nexport * as Timeline from \"./namespace\"\nexport {\n  TimelineConnector,\n  TimelineContent,\n  TimelineDescription,\n  TimelineIndicator,\n  TimelineItem,\n  TimelinePropsContext,\n  TimelineRoot,\n  TimelineTitle,\n  useTimelinePropsContext,\n} from \"./timeline\"\nexport type {\n  TimelineConnectorProps,\n  TimelineContentProps,\n  TimelineDescriptionProps,\n  TimelineIndicatorProps,\n  TimelineItemProps,\n  TimelineRootProps,\n  TimelineTitleProps,\n} from \"./timeline\"\n"
    },
    {
      "name": "namespace.ts",
      "content": "export type {\n  TimelineConnectorProps as ConnectorProps,\n  TimelineContentProps as ContentProps,\n  TimelineDescriptionProps as DescriptionProps,\n  TimelineIndicatorProps as IndicatorProps,\n  TimelineItemProps as ItemProps,\n  TimelineRootProps as RootProps,\n  TimelineTitleProps as TitleProps,\n} from \"./timeline\"\nexport {\n  TimelineConnector as Connector,\n  TimelineContent as Content,\n  TimelineDescription as Description,\n  TimelineIndicator as Indicator,\n  TimelineItem as Item,\n  TimelinePropsContext as PropsContext,\n  TimelineRoot as Root,\n  TimelineTitle as Title,\n  useTimelinePropsContext as usePropsContext,\n} from \"./timeline\"\n"
    },
    {
      "name": "timeline.style.ts",
      "content": "import { defineComponentSlotStyle } from \"@yamada-ui/react\"\n\nexport const timelineStyle = defineComponentSlotStyle({\n  base: {\n    connector: {\n      alignSelf: \"stretch\",\n      position: \"relative\",\n      transitionDuration: \"moderate\",\n      transitionProperty: \"common\",\n      _after: {\n        borderInlineStart:\n          \"{separator-width} {separator-style, solid} {separator-color}\",\n        display: \"block\",\n        h: \"full\",\n        insetBlockStart: \"calc({indicator-size} + {separator-gap})\",\n        insetInlineStart:\n          \"calc(({indicator-size} / 2) - ({separator-width} / 2))\",\n        maxH: `calc(full - {indicator-size} - ({separator-gap} * 2))`,\n        position: \"absolute\",\n      },\n    },\n    content: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      w: \"full\",\n    },\n    description: {\n      color: \"fg.muted\",\n    },\n    indicator: {\n      alignItems: \"center\",\n      boxSize: \"{indicator-size}\",\n      color: \"{indicator-stroke}\",\n      display: \"flex\",\n      fontWeight: \"medium\",\n      justifyContent: \"center\",\n      lineHeight: \"{indicator-size}\",\n      overflow: \"hidden\",\n      rounded: \"{indicator-rounded}\",\n    },\n    item: {\n      alignItems: \"flex-start\",\n      display: \"flex\",\n      flexShrink: \"0\",\n      _last: {\n        \"& [data-connector]\": {\n          _after: { display: \"none\" },\n        },\n      },\n    },\n    root: {\n      \"--indicator-fill\": \"transparent\",\n      \"--indicator-stroke\": \"colorScheme.solid\",\n      \"--separator-color\": \"colors.border\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      w: \"full\",\n    },\n    title: {\n      alignItems: \"center\",\n      display: \"flex\",\n      fontWeight: \"medium\",\n      gap: \"1\",\n      lineHeight: \"{indicator-size}\",\n    },\n  },\n\n  props: {\n    /**\n     * The alignment of the timeline.\n     *\n     * @default 'start'\n     */\n    align: {\n      center: {\n        content: {\n          \"&:first-of-type\": { alignItems: \"flex-end\" },\n          flex: \"1\",\n        },\n        item: {\n          \"&:has(> [data-content]:first-of-type)\": {\n            \"&:not(:has(> [data-content]:last-of-type))\": {\n              _after: { display: \"block\", flex: \"1\" },\n            },\n          },\n          \"&:not(:has(> [data-content]:first-of-type))\": {\n            _before: { display: \"block\", flex: \"1\" },\n          },\n        },\n      },\n      end: {\n        content: { alignItems: \"flex-end\" },\n      },\n      start: {\n        content: { alignItems: \"flex-start\" },\n      },\n    },\n    /**\n     * If `true`, the timeline will be attached.\n     *\n     * @default false\n     */\n    attached: {\n      true: {\n        item: {\n          \"--separator-gap\": \"0px\",\n        },\n      },\n    },\n    /**\n     * The shape of the timeline.\n     *\n     * @default 'circle'\n     */\n    shape: {\n      circle: {\n        item: { \"--indicator-rounded\": \"radii.full\" },\n      },\n      rounded: {\n        item: { \"--indicator-rounded\": \"radii.l2\" },\n      },\n      square: {\n        item: { \"--indicator-rounded\": \"radii.0\" },\n      },\n    },\n  },\n\n  sizes: {\n    base: {\n      item: {\n        _last: {\n          \"& [data-content]\": { pb: 0 },\n        },\n      },\n    },\n    sm: {\n      content: { gap: \"1\", pb: \"8\" },\n      description: { fontSize: \"xs\" },\n      item: { gap: \"3\" },\n      root: {\n        \"--indicator-size\": \"sizes.3\",\n        \"--separator-gap\": \"spaces.2\",\n        \"--separator-width\": \"sizes.0.5\",\n      },\n      title: { fontSize: \"sm\" },\n    },\n    md: {\n      content: { gap: \"2\", pb: \"10\" },\n      description: { fontSize: \"sm\" },\n      item: { gap: \"4\" },\n      root: {\n        \"--indicator-size\": \"sizes.5\",\n        \"--separator-gap\": \"spaces.2\",\n        \"--separator-width\": \"sizes.1\",\n      },\n      title: { fontSize: \"md\" },\n    },\n    lg: {\n      content: { gap: \"2\", pb: \"10\" },\n      description: { fontSize: \"sm\" },\n      item: { gap: \"4\" },\n      root: {\n        \"--indicator-size\": \"sizes.7\",\n        \"--separator-gap\": \"spaces.2.5\",\n        \"--separator-width\": \"sizes.1\",\n      },\n      title: { fontSize: \"md\" },\n    },\n    xl: {\n      content: { gap: \"2\", pb: \"12\" },\n      description: { fontSize: \"md\" },\n      item: { gap: \"5\" },\n      root: {\n        \"--indicator-size\": \"sizes.8\",\n        \"--separator-gap\": \"spaces.3\",\n        \"--separator-width\": \"sizes.1.5\",\n      },\n      title: { fontSize: \"lg\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    align: \"start\",\n    shape: \"circle\",\n  },\n})\n\nexport type TimelineStyle = typeof timelineStyle\n"
    },
    {
      "name": "timeline.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport type { CSSProps, HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { TimelineStyle } from \"./timeline.style\"\nimport { useMemo } from \"react\"\nimport {\n  createSlotComponent,\n  styled,\n  varAttr,\n  dataAttr,\n  isUndefined,\n} from \"@yamada-ui/react\"\nimport { timelineStyle } from \"./timeline.style\"\n\ninterface TimelineItem extends Omit<TimelineItemProps, \"content\" | \"title\"> {\n  align?: \"end\" | \"start\"\n  content?: ReactNode\n  description?: ReactNode\n  indicator?: ReactNode\n  title?: ReactNode\n  connectorProps?: TimelineConnectorProps\n  contentProps?: TimelineContentProps\n  descriptionProps?: TimelineDescriptionProps\n  indicatorProps?: TimelineIndicatorProps\n  titleProps?: TimelineTitleProps\n}\n\ninterface ComponentContext extends Pick<TimelineRootProps, \"index\"> {}\n\nexport interface TimelineRootProps\n  extends HTMLStyledProps<\"ul\">,\n    ThemeProps<TimelineStyle> {\n  /**\n   * The index of the active timeline item.\n   */\n  index?: number\n  /**\n   * The fill color of the indicator.\n   */\n  indicatorFill?: CSSProps[\"bg\"]\n  /**\n   * The size of the indicator.\n   */\n  indicatorSize?: CSSProps[\"boxSize\"]\n  /**\n   * The stroke color of the indicator.\n   */\n  indicatorStroke?: CSSProps[\"color\"]\n  /**\n   * If provided, generate timeline components based on items.\n   */\n  items?: TimelineItem[]\n  /**\n   * The color of the separator.\n   */\n  separatorColor?: CSSProps[\"color\"]\n  /**\n   * The gap of the separator.\n   */\n  separatorGap?: CSSProps[\"gap\"]\n  /**\n   * The style of the separator.\n   */\n  separatorStyle?: CSSProps[\"borderStyle\"]\n  /**\n   * The width of the separator.\n   */\n  separatorWidth?: CSSProps[\"width\"]\n}\n\nconst {\n  ComponentContext,\n  PropsContext: TimelinePropsContext,\n  useComponentContext,\n  usePropsContext: useTimelinePropsContext,\n  withContext,\n  withProvider,\n} = createSlotComponent<TimelineRootProps, TimelineStyle, ComponentContext>(\n  \"timeline\",\n  timelineStyle,\n)\n\nexport { TimelinePropsContext, useTimelinePropsContext }\n\n/**\n * `Timeline` is a component that is used to display a list of events in chronological order.\n *\n * @see https://yamada-ui.com/components/timeline\n */\nexport const TimelineRoot = withProvider(\n  ({ children, index = -1, items = [], ...rest }) => {\n    const context = useMemo(() => ({ index }), [index])\n    const computedChildren = useMemo(() => {\n      if (children) return children\n\n      return items.map(\n        (\n          {\n            align = \"start\",\n            content,\n            description,\n            indicator,\n            title,\n            connectorProps,\n            contentProps,\n            descriptionProps,\n            indicatorProps,\n            titleProps,\n            ...rest\n          },\n          index,\n        ) => {\n          const children = {\n            connector: (\n              <TimelineConnector {...connectorProps}>\n                <TimelineIndicator {...indicatorProps}>\n                  {indicator}\n                </TimelineIndicator>\n              </TimelineConnector>\n            ),\n            content: (\n              <TimelineContent {...contentProps}>\n                {content ?? (\n                  <>\n                    <TimelineTitle {...titleProps}>{title}</TimelineTitle>\n                    <TimelineDescription {...descriptionProps}>\n                      {description}\n                    </TimelineDescription>\n                  </>\n                )}\n              </TimelineContent>\n            ),\n          }\n\n          return (\n            <TimelineItem key={index} index={index} {...rest}>\n              {align === \"start\" ? children.connector : children.content}\n              {align === \"start\" ? children.content : children.connector}\n            </TimelineItem>\n          )\n        },\n      )\n    }, [items, children])\n\n    return (\n      <ComponentContext value={context}>\n        <styled.ul {...rest}>{computedChildren}</styled.ul>\n      </ComponentContext>\n    )\n  },\n  \"root\",\n)(\n  undefined,\n  ({\n    indicatorFill,\n    indicatorSize,\n    indicatorStroke,\n    separatorColor,\n    separatorGap,\n    separatorStyle,\n    separatorWidth,\n    ...rest\n  }) => ({\n    \"--indicator-fill\": varAttr(indicatorFill, \"colors\"),\n    \"--indicator-size\": varAttr(indicatorSize, \"sizes\"),\n    \"--indicator-stroke\": varAttr(indicatorStroke, \"colors\"),\n    \"--separator-color\": varAttr(separatorColor, \"colors\"),\n    \"--separator-gap\": varAttr(separatorGap, \"spaces\"),\n    \"--separator-style\": varAttr(separatorStyle),\n    \"--separator-width\": varAttr(separatorWidth, \"sizes\"),\n    ...rest,\n  }),\n)\n\nexport interface TimelineItemProps extends HTMLStyledProps<\"li\"> {\n  /**\n   * The index of the timeline item.\n   */\n  index?: number\n}\n\nexport const TimelineItem = withContext<\"li\", TimelineItemProps>(\"li\", \"item\")(\n  undefined,\n  ({ index, ...rest }) => {\n    const { index: currentIndex } = useComponentContext()\n    const active =\n      !isUndefined(index) && !isUndefined(currentIndex) && index <= currentIndex\n\n    return {\n      ...rest,\n      \"data-active\": dataAttr(active),\n      \"data-index\": index,\n    }\n  },\n)\n\nexport interface TimelineConnectorProps extends HTMLStyledProps {}\n\nexport const TimelineConnector = withContext<\"div\", TimelineConnectorProps>(\n  \"div\",\n  \"connector\",\n)({ \"data-connector\": \"\" })\n\nexport interface TimelineIndicatorProps extends HTMLStyledProps {}\n\nconst TimelineIcon = styled(\"div\", {\n  base: {\n    bg: \"{indicator-fill}\",\n    borderColor: \"{indicator-stroke}\",\n    borderWidth: \"{separator-width}\",\n    boxSize: \"full\",\n    rounded: \"{indicator-rounded}\",\n  },\n})\n\nexport const TimelineIndicator = withContext<\"div\", TimelineIndicatorProps>(\n  \"div\",\n  \"indicator\",\n)(undefined, ({ children = <TimelineIcon />, ...rest }) => ({\n  children,\n  ...rest,\n}))\n\nexport interface TimelineContentProps extends HTMLStyledProps {}\n\nexport const TimelineContent = withContext<\"div\", TimelineContentProps>(\n  \"div\",\n  \"content\",\n)({ \"data-content\": \"\" })\n\nexport interface TimelineTitleProps extends HTMLStyledProps<\"h3\"> {}\n\nexport const TimelineTitle = withContext<\"h3\", TimelineTitleProps>(\n  \"h3\",\n  \"title\",\n)()\n\nexport interface TimelineDescriptionProps extends HTMLStyledProps<\"p\"> {}\n\nexport const TimelineDescription = withContext<\"p\", TimelineDescriptionProps>(\n  \"p\",\n  \"description\",\n)()\n"
    }
  ]
}
