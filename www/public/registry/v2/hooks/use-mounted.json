{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": []
  },
  "dependents": {
    "components": ["client-only"],
    "hooks": ["use-async"],
    "providers": []
  },
  "section": "hooks",
  "sources": [
    {
      "name": "index.ts",
      "content": "\"use client\"\n\nimport { useCallback, useRef, useState } from \"react\"\nimport { useSafeLayoutEffect } from \"@yamada-ui/react\"\n\nexport interface UseMountedProps {\n  delay?: number\n  state?: boolean\n}\n\nexport function useMounted(props?: {\n  delay?: number\n  state?: false\n}): () => boolean\n\nexport function useMounted(props?: { delay?: number; state?: true }): boolean\n\n/**\n * `useMounted` is a custom hook that returns a boolean indicating whether the component is mounted.\n *\n * @see https://yamada-ui.com/hooks/use-mounted\n */\nexport function useMounted({ delay = 0, state = false }: UseMountedProps = {}) {\n  const mountedRef = useRef(false)\n  const [mounted, setMounted] = useState(false)\n\n  useSafeLayoutEffect(() => {\n    mountedRef.current = true\n\n    let timeoutId: NodeJS.Timeout | null = null\n\n    if (state) {\n      if (delay > 0) {\n        timeoutId = setTimeout(() => setMounted(true), delay)\n      } else {\n        setMounted(true)\n      }\n    }\n\n    return () => {\n      mountedRef.current = false\n\n      if (state) setMounted(false)\n\n      if (timeoutId) clearTimeout(timeoutId)\n    }\n  }, [delay, state])\n\n  if (state) {\n    return mounted\n  } else {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useCallback(() => mountedRef.current, [])\n  }\n}\n\nexport type UseMountedReturn = ReturnType<typeof useMounted>\n"
    }
  ]
}
