{
  "ComboBox": {
    "animation": {
      "type": "\"bottom\" | \"left\" | \"none\" | \"right\" | \"scale\" | \"top\"",
      "defaultValue": "'scale'",
      "description": "The animation of the popover.",
      "required": false
    },
    "boundary": {
      "type": "\"clippingParents\" | \"scrollParent\" | HTMLElement",
      "defaultValue": "'clippingParents'",
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier.",
      "required": false
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to close.",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out.",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you hit the `Esc` key.",
      "required": false
    },
    "defaultIsOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be initially opened.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "The animation duration.",
      "required": false
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { resize?: boolean | undefined; scroll?: boolean | undefined }",
      "defaultValue": true,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window.",
      "required": false
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area.",
      "required": false
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.",
      "required": false
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open.",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be opened.",
      "required": false
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.",
      "required": false
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns.",
      "required": false
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "required": false,
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "offset": {
      "type": "[number, number]",
      "description": "The main and cross-axis offset to displace popper element from its reference element.",
      "required": false
    },
    "onClose": {
      "type": "() => void",
      "description": "Callback fired when the popover closes.",
      "required": false
    },
    "onOpen": {
      "type": "() => void",
      "description": "Callback fired when the popover opens.",
      "required": false
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to open.",
      "required": false
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "description": "The placement of the popper relative to its reference.",
      "required": false
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area.",
      "required": false
    },
    "strategy": {
      "type": "\"absolute\" | \"fixed\"",
      "defaultValue": "'absolute'",
      "description": "The CSS positioning strategy to use.",
      "required": false
    }
  },
  "Popover": {
    "animation": {
      "type": "\"bottom\" | \"left\" | \"none\" | \"right\" | \"scale\" | \"top\"",
      "defaultValue": "'scale'",
      "description": "The animation of the popover.",
      "required": false
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, focus will be transferred to the first interactive element when the popover opens.",
      "required": false
    },
    "boundary": {
      "type": "\"clippingParents\" | \"scrollParent\" | HTMLElement",
      "defaultValue": "'clippingParents'",
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier.",
      "required": false
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to close.",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you blur out it by clicking outside or tabbing out.",
      "required": false
    },
    "closeOnButton": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, display the popover close button.",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popover will close when you hit the `Esc` key.",
      "required": false
    },
    "defaultIsOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be initially opened.",
      "required": false
    },
    "duration": {
      "type": "number | MotionLifecycleProps<number>",
      "description": "The animation duration.",
      "required": false
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { resize?: boolean | undefined; scroll?: boolean | undefined }",
      "defaultValue": true,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`  and `resize` of the window.",
      "required": false
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the popper will change its placement and flip when it's about to overflow its boundary area.",
      "required": false
    },
    "gutter": {
      "type": "UIValue<number>",
      "defaultValue": "8",
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.",
      "required": false
    },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "description": "The `ref` of the element that should receive focus when the popover opens.",
      "required": false
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the PopoverContent rendering will be deferred until the popover is open.",
      "required": false
    },
    "isOpen": {
      "type": "boolean",
      "description": "If `true`, the popover will be opened.",
      "required": false
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "'unmount'",
      "description": "The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n\n- `unmount`: The popover's content is always unmounted when not open.\n- `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.",
      "required": false
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns.",
      "required": false
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "description": "Array of popper.js modifiers.\nCheck the docs to see the list of possible modifiers you can pass.",
      "required": false,
      "see": "https://popper.js.org/docs/v2/modifiers/"
    },
    "offset": {
      "type": "[number, number]",
      "description": "The main and cross-axis offset to displace popper element from its reference element.",
      "required": false
    },
    "onClose": {
      "type": "() => void",
      "description": "Callback fired when the popover closes.",
      "required": false
    },
    "onOpen": {
      "type": "() => void",
      "description": "Callback fired when the popover opens.",
      "required": false
    },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "description": "The number of delay time to open.",
      "required": false
    },
    "placement": {
      "type": "UIValue<Placement>",
      "defaultValue": "'bottom'",
      "description": "The placement of the popper relative to its reference.",
      "required": false
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, will prevent the popper from being cut off and ensure it's visible within the boundary area.",
      "required": false
    },
    "relatedRef": {
      "type": "RefObject<HTMLElement>",
      "description": "The `ref` of the element related to the popover.\nThis is used during the `onBlur` event.",
      "required": false
    },
    "restoreFocus": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, focus will be returned to the element that triggers the popover when it closes.",
      "required": false
    },
    "strategy": {
      "type": "\"absolute\" | \"fixed\"",
      "defaultValue": "'absolute'",
      "description": "The CSS positioning strategy to use.",
      "required": false
    },
    "trigger": {
      "type": "\"click\" | \"contextmenu\" | \"hover\" | \"never\"",
      "defaultValue": "'click'",
      "description": "The interaction that triggers the popover.\n\n- `hover`: means the popover will open when you hover with mouse or focus with keyboard on the popover trigger.\n- `click`: means the popover will open on click or press `Enter` to `Space` on keyboard.",
      "required": false
    }
  },
  "PopoverBody": {},
  "PopoverCloseButton": {
    "disableRipple": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, disable ripple effects when pressing a element.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the button is disabled.",
      "required": false
    },
    "isRounded": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If true, the button is full rounded.",
      "required": false
    }
  },
  "PopoverContent": {
    "as": {
      "type": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"g\" | \"marker\" | \"mask\" | \"p\" | \"text\" | \"div\" | \"style\" | \"title\" | \"button\" | \"form\" | \"animate\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 149 more ... | \"textPath\"",
      "description": "The HTML element to render.",
      "required": false
    },
    "containerProps": {
      "type": "Omit<HTMLUIProps, \"children\">",
      "description": "The props of the container element.",
      "required": false
    }
  },
  "PopoverFooter": {},
  "PopoverHeader": {}
}
