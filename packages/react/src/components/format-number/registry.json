{
  "$schema": "https://v2.yamada-ui.com/registry/v2/schema.json",
  "dependencies": {
    "components": [],
    "externals": [],
    "hooks": [],
    "providers": ["i18n-provider"]
  },
  "dependents": { "components": ["format-byte"], "hooks": [], "providers": [] },
  "section": "components",
  "sources": [
    {
      "name": "format-number.style.ts",
      "content": "import { defineComponentStyle } from \"@yamada-ui/react\"\n\nexport const formatNumberStyle = defineComponentStyle({})\n\nexport type FormatNumberStyle = typeof formatNumberStyle\n"
    },
    {
      "name": "format-number.tsx",
      "content": "\"use client\"\n\nimport type { HTMLStyledProps, ThemeProps } from \"@yamada-ui/react\"\nimport type { FormatNumberStyle } from \"./format-number.style\"\nimport { createComponent, styled } from \"@yamada-ui/react\"\nimport { formatNumberStyle } from \"./format-number.style\"\nimport { useFormatNumber } from \"./use-format-number\"\n\nexport interface FormatNumberProps\n  extends Omit<HTMLStyledProps, \"style\">,\n    ThemeProps<FormatNumberStyle>,\n    Intl.NumberFormatOptions {\n  /**\n   * The numeric value to be formatted.\n   */\n  value: number\n  /**\n   * The locale string to use for formatting.\n   * @default 'en-US'\n   */\n  locale?: string\n}\n\nconst {\n  PropsContext: FormatNumberPropsContext,\n  usePropsContext: useFormatNumberPropsContext,\n  withContext,\n} = createComponent<FormatNumberProps, FormatNumberStyle>(\n  \"format-number\",\n  formatNumberStyle,\n)\n\nexport { FormatNumberPropsContext, useFormatNumberPropsContext }\n\n/**\n * `FormatNumber` is used to format numbers to a specific locale and options.\n *\n * @see https://yamada-ui.com/components/format-number\n */\nexport const FormatNumber = withContext<\"span\", FormatNumberProps>(\n  ({\n    style,\n    compactDisplay,\n    currency,\n    currencyDisplay,\n    currencySign,\n    locale,\n    localeMatcher,\n    maximumFractionDigits,\n    maximumSignificantDigits,\n    minimumFractionDigits,\n    minimumIntegerDigits,\n    minimumSignificantDigits,\n    notation,\n    numberingSystem,\n    roundingIncrement,\n    roundingMode,\n    roundingPriority,\n    signDisplay,\n    trailingZeroDisplay,\n    unit,\n    unitDisplay,\n    useGrouping,\n    value,\n    ...rest\n  }) => {\n    const text = useFormatNumber(value, {\n      style,\n      compactDisplay,\n      currency,\n      currencyDisplay,\n      currencySign,\n      locale,\n      localeMatcher,\n      maximumFractionDigits,\n      maximumSignificantDigits,\n      minimumFractionDigits,\n      minimumIntegerDigits,\n      minimumSignificantDigits,\n      notation,\n      numberingSystem,\n      roundingIncrement,\n      roundingMode,\n      roundingPriority,\n      signDisplay,\n      trailingZeroDisplay,\n      unit,\n      unitDisplay,\n      useGrouping,\n    })\n\n    return <styled.span {...rest}>{text}</styled.span>\n  },\n)()\n"
    },
    {
      "name": "index.ts",
      "content": "export * from \"./format-number.style\"\nexport {\n  FormatNumber,\n  FormatNumberPropsContext,\n  useFormatNumberPropsContext,\n} from \"./format-number\"\nexport type { FormatNumberProps } from \"./format-number\"\nexport * from \"./use-format-number\"\n"
    },
    {
      "name": "use-format-number.tsx",
      "content": "\"use client\"\n\nimport { i18nCache, useI18n } from \"../../providers/i18n-provider\"\n\nconst getNumberFormatter = i18nCache(Intl.NumberFormat)\n\nexport interface FormatNumberOptions extends Intl.NumberFormatOptions {\n  locale?: string\n}\n\n/**\n * `useFormatNumber` is a custom hook that returns the formatted number.\n *\n * @see https://yamada-ui.com/hooks/use-format-number\n */\nexport const useFormatNumber = (\n  value: number,\n  { locale, ...options }: FormatNumberOptions = {},\n) => {\n  const { locale: defaultLocale } = useI18n()\n\n  locale ??= defaultLocale\n\n  const formatter = getNumberFormatter(locale, options)\n\n  return formatter.format(value)\n}\n\nexport type UseFormatNumberReturn = ReturnType<typeof useFormatNumber>\n"
    }
  ]
}
